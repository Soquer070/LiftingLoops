; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple riscv64 -mattr=+experimental-v < %s | FileCheck %s

define i64 @vscale() nounwind {
; CHECK-LABEL: vscale:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64,m1,tu,mu
; CHECK-NEXT:    ret
  %1 = call i64 @llvm.vscale.i64()
  ret i64 %1
}

define i64 @vscale_neg() nounwind {
; CHECK-LABEL: vscale_neg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64,m1,tu,mu
; CHECK-NEXT:    neg a0, a0
; CHECK-NEXT:    addi a0, a0, 1
; CHECK-NEXT:    ret
  %1 = call i64 @llvm.vscale.i64()
  %2 = sub i64 1, %1
  ret i64 %2
}

define i64 @vscale_neg_plus_1() nounwind {
; CHECK-LABEL: vscale_neg_plus_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64,m1,tu,mu
; CHECK-NEXT:    neg a0, a0
; CHECK-NEXT:    ret
  %1 = call i64 @llvm.vscale.i64()
  %2 = sub i64 0, %1
  ret i64 %2
}

define i64 @vscale_pow2() nounwind {
; CHECK-LABEL: vscale_pow2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64,m1,tu,mu
; CHECK-NEXT:    slli a0, a0, 6
; CHECK-NEXT:    ret
  %1 = call i64 @llvm.vscale.i64()
  %2 = mul i64 64, %1
  ret i64 %2
}

define i64 @vscale_mul() nounwind {
; CHECK-LABEL: vscale_mul:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64,m1,tu,mu
; CHECK-NEXT:    addi a1, zero, 5
; CHECK-NEXT:    mul a0, a0, a1
; CHECK-NEXT:    ret
  %1 = call i64 @llvm.vscale.i64()
  %2 = mul i64 5, %1
  ret i64 %2
}

declare i64 @llvm.vscale.i64()
