; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+a -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV64A %s

define i64 @atomic_load_i64_unordered(i64 *%a) nounwind {
; RV64A-LABEL: atomic_load_i64_unordered:
; RV64A:       # %bb.0:
; RV64A-NEXT:    ld a0, 0(a0)
; RV64A-NEXT:    ret
  %1 = load atomic i64, i64* %a unordered, align 8
  ret i64 %1
}

define i64 @atomic_load_i64_monotonic(i64 *%a) nounwind {
; RV64A-LABEL: atomic_load_i64_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    ld a0, 0(a0)
; RV64A-NEXT:    ret
  %1 = load atomic i64, i64* %a monotonic, align 8
  ret i64 %1
}

define i64 @atomic_load_i64_acquire(i64 *%a) nounwind {
; RV64A-LABEL: atomic_load_i64_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    ld a0, 0(a0)
; RV64A-NEXT:    fence r, rw
; RV64A-NEXT:    ret
  %1 = load atomic i64, i64* %a acquire, align 8
  ret i64 %1
}

define i64 @atomic_load_i64_seq_cst(i64 *%a) nounwind {
; RV64A-LABEL: atomic_load_i64_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    fence rw, rw
; RV64A-NEXT:    ld a0, 0(a0)
; RV64A-NEXT:    fence r, rw
; RV64A-NEXT:    ret
  %1 = load atomic i64, i64* %a seq_cst, align 8
  ret i64 %1
}

define void @atomic_store_i64_unordered(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomic_store_i64_unordered:
; RV64A:       # %bb.0:
; RV64A-NEXT:    sd a0, 0(a1)
; RV64A-NEXT:    ret
  store atomic i64 %b, i64* %a unordered, align 8
  ret void
}

define void @atomic_store_i64_monotonic(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomic_store_i64_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    sd a0, 0(a1)
; RV64A-NEXT:    ret
  store atomic i64 %b, i64* %a monotonic, align 8
  ret void
}

define void @atomic_store_i64_release(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomic_store_i64_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    fence rw, w
; RV64A-NEXT:    sd a0, 0(a1)
; RV64A-NEXT:    ret
  store atomic i64 %b, i64* %a release, align 8
  ret void
}

define void @atomic_store_i64_seq_cst(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomic_store_i64_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    fence rw, w
; RV64A-NEXT:    sd a0, 0(a1)
; RV64A-NEXT:    ret
  store atomic i64 %b, i64* %a seq_cst, align 8
  ret void
}

define i64 @atomicrmw_xchg_i64_monotonic(i64* %a, i64 %b) {
; RV64A-LABEL: atomicrmw_xchg_i64_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoswap.d a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xchg i64* %a, i64 %b monotonic
  ret i64 %1
}

define i64 @atomicrmw_xchg_i64_acquire(i64* %a, i64 %b) {
; RV64A-LABEL: atomicrmw_xchg_i64_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoswap.d.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xchg i64* %a, i64 %b acquire
  ret i64 %1
}

define i64 @atomicrmw_xchg_i64_release(i64* %a, i64 %b) {
; RV64A-LABEL: atomicrmw_xchg_i64_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoswap.d.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xchg i64* %a, i64 %b release
  ret i64 %1
}

define i64 @atomicrmw_xchg_i64_acq_rel(i64* %a, i64 %b) {
; RV64A-LABEL: atomicrmw_xchg_i64_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoswap.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xchg i64* %a, i64 %b acq_rel
  ret i64 %1
}

define i64 @atomicrmw_xchg_i64_seq_cst(i64* %a, i64 %b) {
; RV64A-LABEL: atomicrmw_xchg_i64_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoswap.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xchg i64* %a, i64 %b seq_cst
  ret i64 %1
}

define i64 @atomicrmw_add_i64_monotonic(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_add_i64_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoadd.d a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw add i64* %a, i64 %b monotonic
  ret i64 %1
}

define i64 @atomicrmw_add_i64_acquire(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_add_i64_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoadd.d.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw add i64* %a, i64 %b acquire
  ret i64 %1
}

define i64 @atomicrmw_add_i64_release(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_add_i64_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoadd.d.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw add i64* %a, i64 %b release
  ret i64 %1
}

define i64 @atomicrmw_add_i64_acq_rel(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_add_i64_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoadd.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw add i64* %a, i64 %b acq_rel
  ret i64 %1
}

define i64 @atomicrmw_add_i64_seq_cst(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_add_i64_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoadd.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw add i64* %a, i64 %b seq_cst
  ret i64 %1
}

define i64 @atomicrmw_sub_i64_monotonic(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_sub_i64_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    neg a1, a1
; RV64A-NEXT:    amoadd.d a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw sub i64* %a, i64 %b monotonic
  ret i64 %1
}

define i64 @atomicrmw_sub_i64_acquire(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_sub_i64_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    neg a1, a1
; RV64A-NEXT:    amoadd.d.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw sub i64* %a, i64 %b acquire
  ret i64 %1
}

define i64 @atomicrmw_sub_i64_release(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_sub_i64_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    neg a1, a1
; RV64A-NEXT:    amoadd.d.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw sub i64* %a, i64 %b release
  ret i64 %1
}

define i64 @atomicrmw_sub_i64_acq_rel(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_sub_i64_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    neg a1, a1
; RV64A-NEXT:    amoadd.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw sub i64* %a, i64 %b acq_rel
  ret i64 %1
}

define i64 @atomicrmw_sub_i64_seq_cst(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_sub_i64_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    neg a1, a1
; RV64A-NEXT:    amoadd.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw sub i64* %a, i64 %b seq_cst
  ret i64 %1
}

define i64 @atomicrmw_and_i64_monotonic(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_and_i64_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoand.d a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw and i64* %a, i64 %b monotonic
  ret i64 %1
}

define i64 @atomicrmw_and_i64_acquire(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_and_i64_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoand.d.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw and i64* %a, i64 %b acquire
  ret i64 %1
}

define i64 @atomicrmw_and_i64_release(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_and_i64_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoand.d.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw and i64* %a, i64 %b release
  ret i64 %1
}

define i64 @atomicrmw_and_i64_acq_rel(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_and_i64_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoand.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw and i64* %a, i64 %b acq_rel
  ret i64 %1
}

define i64 @atomicrmw_and_i64_seq_cst(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_and_i64_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoand.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw and i64* %a, i64 %b seq_cst
  ret i64 %1
}

define i64 @atomicrmw_or_i64_monotonic(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_or_i64_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoor.d a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw or i64* %a, i64 %b monotonic
  ret i64 %1
}

define i64 @atomicrmw_or_i64_acquire(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_or_i64_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoor.d.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw or i64* %a, i64 %b acquire
  ret i64 %1
}

define i64 @atomicrmw_or_i64_release(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_or_i64_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoor.d.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw or i64* %a, i64 %b release
  ret i64 %1
}

define i64 @atomicrmw_or_i64_acq_rel(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_or_i64_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoor.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw or i64* %a, i64 %b acq_rel
  ret i64 %1
}

define i64 @atomicrmw_or_i64_seq_cst(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_or_i64_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoor.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw or i64* %a, i64 %b seq_cst
  ret i64 %1
}

define i64 @atomicrmw_xor_i64_monotonic(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_xor_i64_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoxor.d a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xor i64* %a, i64 %b monotonic
  ret i64 %1
}

define i64 @atomicrmw_xor_i64_acquire(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_xor_i64_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoxor.d.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xor i64* %a, i64 %b acquire
  ret i64 %1
}

define i64 @atomicrmw_xor_i64_release(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_xor_i64_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoxor.d.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xor i64* %a, i64 %b release
  ret i64 %1
}

define i64 @atomicrmw_xor_i64_acq_rel(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_xor_i64_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoxor.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xor i64* %a, i64 %b acq_rel
  ret i64 %1
}

define i64 @atomicrmw_xor_i64_seq_cst(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_xor_i64_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoxor.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xor i64* %a, i64 %b seq_cst
  ret i64 %1
}

define i64 @atomicrmw_max_i64_monotonic(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_max_i64_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomax.d a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw max i64* %a, i64 %b monotonic
  ret i64 %1
}

define i64 @atomicrmw_max_i64_acquire(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_max_i64_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomax.d.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw max i64* %a, i64 %b acquire
  ret i64 %1
}

define i64 @atomicrmw_max_i64_release(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_max_i64_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomax.d.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw max i64* %a, i64 %b release
  ret i64 %1
}

define i64 @atomicrmw_max_i64_acq_rel(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_max_i64_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomax.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw max i64* %a, i64 %b acq_rel
  ret i64 %1
}

define i64 @atomicrmw_max_i64_seq_cst(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_max_i64_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomax.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw max i64* %a, i64 %b seq_cst
  ret i64 %1
}

define i64 @atomicrmw_min_i64_monotonic(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_min_i64_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomin.d a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw min i64* %a, i64 %b monotonic
  ret i64 %1
}

define i64 @atomicrmw_min_i64_acquire(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_min_i64_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomin.d.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw min i64* %a, i64 %b acquire
  ret i64 %1
}

define i64 @atomicrmw_min_i64_release(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_min_i64_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomin.d.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw min i64* %a, i64 %b release
  ret i64 %1
}

define i64 @atomicrmw_min_i64_acq_rel(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_min_i64_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomin.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw min i64* %a, i64 %b acq_rel
  ret i64 %1
}

define i64 @atomicrmw_min_i64_seq_cst(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_min_i64_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomin.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw min i64* %a, i64 %b seq_cst
  ret i64 %1
}

define i64 @atomicrmw_umax_i64_monotonic(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_umax_i64_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomaxu.d a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umax i64* %a, i64 %b monotonic
  ret i64 %1
}

define i64 @atomicrmw_umax_i64_acquire(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_umax_i64_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomaxu.d.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umax i64* %a, i64 %b acquire
  ret i64 %1
}

define i64 @atomicrmw_umax_i64_release(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_umax_i64_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomaxu.d.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umax i64* %a, i64 %b release
  ret i64 %1
}

define i64 @atomicrmw_umax_i64_acq_rel(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_umax_i64_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomaxu.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umax i64* %a, i64 %b acq_rel
  ret i64 %1
}

define i64 @atomicrmw_umax_i64_seq_cst(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_umax_i64_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomaxu.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umax i64* %a, i64 %b seq_cst
  ret i64 %1
}

define i64 @atomicrmw_umin_i64_monotonic(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_umin_i64_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amominu.d a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umin i64* %a, i64 %b monotonic
  ret i64 %1
}

define i64 @atomicrmw_umin_i64_acquire(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_umin_i64_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amominu.d.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umin i64* %a, i64 %b acquire
  ret i64 %1
}

define i64 @atomicrmw_umin_i64_release(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_umin_i64_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amominu.d.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umin i64* %a, i64 %b release
  ret i64 %1
}

define i64 @atomicrmw_umin_i64_acq_rel(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_umin_i64_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amominu.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umin i64* %a, i64 %b acq_rel
  ret i64 %1
}

define i64 @atomicrmw_umin_i64_seq_cst(i64 *%a, i64 %b) nounwind {
; RV64A-LABEL: atomicrmw_umin_i64_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amominu.d.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umin i64* %a, i64 %b seq_cst
  ret i64 %1
}
