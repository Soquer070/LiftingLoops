; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -target-abi lp64f -mattr=+f -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=LP64F

; RUN: llc -mtriple=riscv64 -target-abi lp64d -mattr=+f,+d -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=LP64D

; -----------------------------------------------------------------------------
; A real floating-point argument is passed in a floating point argument
; register if there is no more than FLEN bits wide and at least one floating
; point argument
; -----------------------------------------------------------------------------

; float
declare void @one_float(float %a1);
declare void @two_floats(float %a1, float %a2);
declare void @three_floats(float %a1, float %a2, float %a3);
declare void @four_floats(float %a1, float %a2, float %a3, float %a4);
declare void @five_floats(float %a1, float %a2, float %a3, float %a4, float %a5);
declare void @six_floats(float %a1, float %a2, float %a3, float %a4, float %a5, float %a6);
declare void @seven_floats(float %a1, float %a2, float %a3, float %a4, float %a5, float %a6, float %a7);
declare void @eight_floats(float %a1, float %a2, float %a3, float %a4, float %a5, float %a6, float %a7, float %a8);
declare void @nine_floats(float %a1, float %a2, float %a3, float %a4, float %a5, float %a6, float %a7, float %a8, float %a9);

define void @test_one_float() nounwind {
; LP64F-LABEL: test_one_float:
; LP64F:       # %bb.0:
; LP64F-NEXT:    lui a0, %hi(.LCPI0_0)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI0_0)
; LP64F-NEXT:    flw fa0, 0(a0)
; LP64F-NEXT:    tail one_float
;
; LP64D-LABEL: test_one_float:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI0_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI0_0)
; LP64D-NEXT:    flw fa0, 0(a0)
; LP64D-NEXT:    tail one_float
    tail call void @one_float(float 1.0)
    ret void
}

define void @test_two_floats() nounwind {
; LP64F-LABEL: test_two_floats:
; LP64F:       # %bb.0:
; LP64F-NEXT:    lui a0, %hi(.LCPI1_0)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI1_0)
; LP64F-NEXT:    flw fa0, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI1_1)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI1_1)
; LP64F-NEXT:    flw fa1, 0(a0)
; LP64F-NEXT:    tail two_floats
;
; LP64D-LABEL: test_two_floats:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI1_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI1_0)
; LP64D-NEXT:    flw fa0, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI1_1)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI1_1)
; LP64D-NEXT:    flw fa1, 0(a0)
; LP64D-NEXT:    tail two_floats
    tail call void @two_floats(float 1.0, float 2.0)
    ret void
}

define void @test_three_floats() nounwind {
; LP64F-LABEL: test_three_floats:
; LP64F:       # %bb.0:
; LP64F-NEXT:    lui a0, %hi(.LCPI2_0)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI2_0)
; LP64F-NEXT:    flw fa0, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI2_1)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI2_1)
; LP64F-NEXT:    flw fa1, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI2_2)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI2_2)
; LP64F-NEXT:    flw fa2, 0(a0)
; LP64F-NEXT:    tail three_floats
;
; LP64D-LABEL: test_three_floats:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI2_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI2_0)
; LP64D-NEXT:    flw fa0, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI2_1)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI2_1)
; LP64D-NEXT:    flw fa1, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI2_2)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI2_2)
; LP64D-NEXT:    flw fa2, 0(a0)
; LP64D-NEXT:    tail three_floats
    tail call void @three_floats(float 1.0, float 2.0, float 4.0)
    ret void
}

define void @test_four_floats() nounwind {
; LP64F-LABEL: test_four_floats:
; LP64F:       # %bb.0:
; LP64F-NEXT:    lui a0, %hi(.LCPI3_0)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI3_0)
; LP64F-NEXT:    lui a1, %hi(.LCPI3_1)
; LP64F-NEXT:    addi a1, a1, %lo(.LCPI3_1)
; LP64F-NEXT:    flw fa0, 0(a1)
; LP64F-NEXT:    flw fa1, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI3_2)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI3_2)
; LP64F-NEXT:    flw fa2, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI3_3)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI3_3)
; LP64F-NEXT:    flw fa3, 0(a0)
; LP64F-NEXT:    tail four_floats
;
; LP64D-LABEL: test_four_floats:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI3_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI3_0)
; LP64D-NEXT:    lui a1, %hi(.LCPI3_1)
; LP64D-NEXT:    addi a1, a1, %lo(.LCPI3_1)
; LP64D-NEXT:    flw fa0, 0(a1)
; LP64D-NEXT:    flw fa1, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI3_2)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI3_2)
; LP64D-NEXT:    flw fa2, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI3_3)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI3_3)
; LP64D-NEXT:    flw fa3, 0(a0)
; LP64D-NEXT:    tail four_floats
    tail call void @four_floats(float 1.0, float 2.0, float 4.0, float 8.0)
    ret void
}

define void @test_five_floats() nounwind {
; LP64F-LABEL: test_five_floats:
; LP64F:       # %bb.0:
; LP64F-NEXT:    lui a0, %hi(.LCPI4_0)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI4_0)
; LP64F-NEXT:    lui a1, %hi(.LCPI4_1)
; LP64F-NEXT:    addi a1, a1, %lo(.LCPI4_1)
; LP64F-NEXT:    lui a2, %hi(.LCPI4_2)
; LP64F-NEXT:    addi a2, a2, %lo(.LCPI4_2)
; LP64F-NEXT:    flw fa0, 0(a2)
; LP64F-NEXT:    flw fa1, 0(a1)
; LP64F-NEXT:    flw fa2, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI4_3)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI4_3)
; LP64F-NEXT:    flw fa3, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI4_4)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI4_4)
; LP64F-NEXT:    flw fa4, 0(a0)
; LP64F-NEXT:    tail five_floats
;
; LP64D-LABEL: test_five_floats:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI4_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI4_0)
; LP64D-NEXT:    lui a1, %hi(.LCPI4_1)
; LP64D-NEXT:    addi a1, a1, %lo(.LCPI4_1)
; LP64D-NEXT:    lui a2, %hi(.LCPI4_2)
; LP64D-NEXT:    addi a2, a2, %lo(.LCPI4_2)
; LP64D-NEXT:    flw fa0, 0(a2)
; LP64D-NEXT:    flw fa1, 0(a1)
; LP64D-NEXT:    flw fa2, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI4_3)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI4_3)
; LP64D-NEXT:    flw fa3, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI4_4)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI4_4)
; LP64D-NEXT:    flw fa4, 0(a0)
; LP64D-NEXT:    tail five_floats
    tail call void @five_floats(float 1.0, float 2.0, float 4.0, float 8.0, float 16.0)
    ret void
}

define void @test_six_floats() nounwind {
; LP64F-LABEL: test_six_floats:
; LP64F:       # %bb.0:
; LP64F-NEXT:    lui a0, %hi(.LCPI5_0)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI5_0)
; LP64F-NEXT:    lui a1, %hi(.LCPI5_1)
; LP64F-NEXT:    addi a1, a1, %lo(.LCPI5_1)
; LP64F-NEXT:    lui a2, %hi(.LCPI5_2)
; LP64F-NEXT:    addi a2, a2, %lo(.LCPI5_2)
; LP64F-NEXT:    lui a3, %hi(.LCPI5_3)
; LP64F-NEXT:    addi a3, a3, %lo(.LCPI5_3)
; LP64F-NEXT:    flw fa0, 0(a3)
; LP64F-NEXT:    flw fa1, 0(a2)
; LP64F-NEXT:    flw fa2, 0(a1)
; LP64F-NEXT:    flw fa3, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI5_4)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI5_4)
; LP64F-NEXT:    flw fa4, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI5_5)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI5_5)
; LP64F-NEXT:    flw fa5, 0(a0)
; LP64F-NEXT:    tail six_floats
;
; LP64D-LABEL: test_six_floats:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI5_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI5_0)
; LP64D-NEXT:    lui a1, %hi(.LCPI5_1)
; LP64D-NEXT:    addi a1, a1, %lo(.LCPI5_1)
; LP64D-NEXT:    lui a2, %hi(.LCPI5_2)
; LP64D-NEXT:    addi a2, a2, %lo(.LCPI5_2)
; LP64D-NEXT:    lui a3, %hi(.LCPI5_3)
; LP64D-NEXT:    addi a3, a3, %lo(.LCPI5_3)
; LP64D-NEXT:    flw fa0, 0(a3)
; LP64D-NEXT:    flw fa1, 0(a2)
; LP64D-NEXT:    flw fa2, 0(a1)
; LP64D-NEXT:    flw fa3, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI5_4)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI5_4)
; LP64D-NEXT:    flw fa4, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI5_5)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI5_5)
; LP64D-NEXT:    flw fa5, 0(a0)
; LP64D-NEXT:    tail six_floats
    tail call void @six_floats(float 1.0, float 2.0, float 4.0, float 8.0, float 16.0, float 32.0)
    ret void
}

define void @test_seven_floats() nounwind {
; LP64F-LABEL: test_seven_floats:
; LP64F:       # %bb.0:
; LP64F-NEXT:    lui a0, %hi(.LCPI6_0)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI6_0)
; LP64F-NEXT:    lui a1, %hi(.LCPI6_1)
; LP64F-NEXT:    addi a1, a1, %lo(.LCPI6_1)
; LP64F-NEXT:    lui a2, %hi(.LCPI6_2)
; LP64F-NEXT:    addi a2, a2, %lo(.LCPI6_2)
; LP64F-NEXT:    lui a3, %hi(.LCPI6_3)
; LP64F-NEXT:    addi a3, a3, %lo(.LCPI6_3)
; LP64F-NEXT:    lui a4, %hi(.LCPI6_4)
; LP64F-NEXT:    addi a4, a4, %lo(.LCPI6_4)
; LP64F-NEXT:    flw fa0, 0(a4)
; LP64F-NEXT:    flw fa1, 0(a3)
; LP64F-NEXT:    flw fa2, 0(a2)
; LP64F-NEXT:    flw fa3, 0(a1)
; LP64F-NEXT:    flw fa4, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI6_5)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI6_5)
; LP64F-NEXT:    flw fa5, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI6_6)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI6_6)
; LP64F-NEXT:    flw fa6, 0(a0)
; LP64F-NEXT:    tail seven_floats
;
; LP64D-LABEL: test_seven_floats:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI6_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI6_0)
; LP64D-NEXT:    lui a1, %hi(.LCPI6_1)
; LP64D-NEXT:    addi a1, a1, %lo(.LCPI6_1)
; LP64D-NEXT:    lui a2, %hi(.LCPI6_2)
; LP64D-NEXT:    addi a2, a2, %lo(.LCPI6_2)
; LP64D-NEXT:    lui a3, %hi(.LCPI6_3)
; LP64D-NEXT:    addi a3, a3, %lo(.LCPI6_3)
; LP64D-NEXT:    lui a4, %hi(.LCPI6_4)
; LP64D-NEXT:    addi a4, a4, %lo(.LCPI6_4)
; LP64D-NEXT:    flw fa0, 0(a4)
; LP64D-NEXT:    flw fa1, 0(a3)
; LP64D-NEXT:    flw fa2, 0(a2)
; LP64D-NEXT:    flw fa3, 0(a1)
; LP64D-NEXT:    flw fa4, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI6_5)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI6_5)
; LP64D-NEXT:    flw fa5, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI6_6)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI6_6)
; LP64D-NEXT:    flw fa6, 0(a0)
; LP64D-NEXT:    tail seven_floats
    tail call void @seven_floats(float 1.0, float 2.0, float 4.0, float 8.0, float 16.0, float 32.0, float 64.0)
    ret void
}

define void @test_eight_floats() nounwind {
; LP64F-LABEL: test_eight_floats:
; LP64F:       # %bb.0:
; LP64F-NEXT:    lui a0, %hi(.LCPI7_0)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI7_0)
; LP64F-NEXT:    lui a1, %hi(.LCPI7_1)
; LP64F-NEXT:    addi a1, a1, %lo(.LCPI7_1)
; LP64F-NEXT:    lui a2, %hi(.LCPI7_2)
; LP64F-NEXT:    addi a2, a2, %lo(.LCPI7_2)
; LP64F-NEXT:    lui a3, %hi(.LCPI7_3)
; LP64F-NEXT:    addi a3, a3, %lo(.LCPI7_3)
; LP64F-NEXT:    lui a4, %hi(.LCPI7_4)
; LP64F-NEXT:    addi a4, a4, %lo(.LCPI7_4)
; LP64F-NEXT:    lui a5, %hi(.LCPI7_5)
; LP64F-NEXT:    addi a5, a5, %lo(.LCPI7_5)
; LP64F-NEXT:    flw fa0, 0(a5)
; LP64F-NEXT:    flw fa1, 0(a4)
; LP64F-NEXT:    flw fa2, 0(a3)
; LP64F-NEXT:    flw fa3, 0(a2)
; LP64F-NEXT:    flw fa4, 0(a1)
; LP64F-NEXT:    flw fa5, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI7_6)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI7_6)
; LP64F-NEXT:    flw fa6, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI7_7)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI7_7)
; LP64F-NEXT:    flw fa7, 0(a0)
; LP64F-NEXT:    tail eight_floats
;
; LP64D-LABEL: test_eight_floats:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI7_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI7_0)
; LP64D-NEXT:    lui a1, %hi(.LCPI7_1)
; LP64D-NEXT:    addi a1, a1, %lo(.LCPI7_1)
; LP64D-NEXT:    lui a2, %hi(.LCPI7_2)
; LP64D-NEXT:    addi a2, a2, %lo(.LCPI7_2)
; LP64D-NEXT:    lui a3, %hi(.LCPI7_3)
; LP64D-NEXT:    addi a3, a3, %lo(.LCPI7_3)
; LP64D-NEXT:    lui a4, %hi(.LCPI7_4)
; LP64D-NEXT:    addi a4, a4, %lo(.LCPI7_4)
; LP64D-NEXT:    lui a5, %hi(.LCPI7_5)
; LP64D-NEXT:    addi a5, a5, %lo(.LCPI7_5)
; LP64D-NEXT:    flw fa0, 0(a5)
; LP64D-NEXT:    flw fa1, 0(a4)
; LP64D-NEXT:    flw fa2, 0(a3)
; LP64D-NEXT:    flw fa3, 0(a2)
; LP64D-NEXT:    flw fa4, 0(a1)
; LP64D-NEXT:    flw fa5, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI7_6)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI7_6)
; LP64D-NEXT:    flw fa6, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI7_7)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI7_7)
; LP64D-NEXT:    flw fa7, 0(a0)
; LP64D-NEXT:    tail eight_floats
    tail call void @eight_floats(float 1.0, float 2.0, float 4.0, float 8.0, float 16.0, float 32.0, float 64.0, float 128.0)
    ret void
}

define void @test_nine_floats() nounwind {
; LP64F-LABEL: test_nine_floats:
; LP64F:       # %bb.0:
; LP64F-NEXT:    lui a0, %hi(.LCPI8_0)
; LP64F-NEXT:    addi a6, a0, %lo(.LCPI8_0)
; LP64F-NEXT:    lui a1, %hi(.LCPI8_1)
; LP64F-NEXT:    addi a1, a1, %lo(.LCPI8_1)
; LP64F-NEXT:    lui a2, %hi(.LCPI8_2)
; LP64F-NEXT:    addi a2, a2, %lo(.LCPI8_2)
; LP64F-NEXT:    lui a3, %hi(.LCPI8_3)
; LP64F-NEXT:    addi a3, a3, %lo(.LCPI8_3)
; LP64F-NEXT:    lui a4, %hi(.LCPI8_4)
; LP64F-NEXT:    addi a4, a4, %lo(.LCPI8_4)
; LP64F-NEXT:    lui a5, %hi(.LCPI8_5)
; LP64F-NEXT:    addi a5, a5, %lo(.LCPI8_5)
; LP64F-NEXT:    lui a0, %hi(.LCPI8_6)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI8_6)
; LP64F-NEXT:    flw fa0, 0(a0)
; LP64F-NEXT:    flw fa1, 0(a5)
; LP64F-NEXT:    flw fa2, 0(a4)
; LP64F-NEXT:    flw fa3, 0(a3)
; LP64F-NEXT:    flw fa4, 0(a2)
; LP64F-NEXT:    flw fa5, 0(a1)
; LP64F-NEXT:    flw fa6, 0(a6)
; LP64F-NEXT:    lui a0, %hi(.LCPI8_7)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI8_7)
; LP64F-NEXT:    flw fa7, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI8_8)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI8_8)
; LP64F-NEXT:    flw ft0, 0(a0)
; LP64F-NEXT:    fmv.x.w a0, ft0
; LP64F-NEXT:    tail nine_floats
;
; LP64D-LABEL: test_nine_floats:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI8_0)
; LP64D-NEXT:    addi a6, a0, %lo(.LCPI8_0)
; LP64D-NEXT:    lui a1, %hi(.LCPI8_1)
; LP64D-NEXT:    addi a1, a1, %lo(.LCPI8_1)
; LP64D-NEXT:    lui a2, %hi(.LCPI8_2)
; LP64D-NEXT:    addi a2, a2, %lo(.LCPI8_2)
; LP64D-NEXT:    lui a3, %hi(.LCPI8_3)
; LP64D-NEXT:    addi a3, a3, %lo(.LCPI8_3)
; LP64D-NEXT:    lui a4, %hi(.LCPI8_4)
; LP64D-NEXT:    addi a4, a4, %lo(.LCPI8_4)
; LP64D-NEXT:    lui a5, %hi(.LCPI8_5)
; LP64D-NEXT:    addi a5, a5, %lo(.LCPI8_5)
; LP64D-NEXT:    lui a0, %hi(.LCPI8_6)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI8_6)
; LP64D-NEXT:    flw fa0, 0(a0)
; LP64D-NEXT:    flw fa1, 0(a5)
; LP64D-NEXT:    flw fa2, 0(a4)
; LP64D-NEXT:    flw fa3, 0(a3)
; LP64D-NEXT:    flw fa4, 0(a2)
; LP64D-NEXT:    flw fa5, 0(a1)
; LP64D-NEXT:    flw fa6, 0(a6)
; LP64D-NEXT:    lui a0, %hi(.LCPI8_7)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI8_7)
; LP64D-NEXT:    flw fa7, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI8_8)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI8_8)
; LP64D-NEXT:    flw ft0, 0(a0)
; LP64D-NEXT:    fmv.x.w a0, ft0
; LP64D-NEXT:    tail nine_floats
    tail call void @nine_floats(float 1.0, float 2.0, float 4.0, float 8.0, float 16.0, float 32.0, float 64.0, float 128.0, float 256.0)
    ret void
}

; double
declare void @one_double(double %a1);
declare void @two_doubles(double %a1, double %a2);
declare void @three_doubles(double %a1, double %a2, double %a3);
declare void @four_doubles(double %a1, double %a2, double %a3, double %a4);
declare void @five_doubles(double %a1, double %a2, double %a3, double %a4, double %a5);
declare void @six_doubles(double %a1, double %a2, double %a3, double %a4, double %a5, double %a6);
declare void @seven_doubles(double %a1, double %a2, double %a3, double %a4, double %a5, double %a6, double %a7);
declare void @eight_doubles(double %a1, double %a2, double %a3, double %a4, double %a5, double %a6, double %a7, double %a8);
declare void @nine_doubles(double %a1, double %a2, double %a3, double %a4, double %a5, double %a6, double %a7, double %a8, double %a9);


define void @test_one_double() nounwind {
; LP64F-LABEL: test_one_double:
; LP64F:       # %bb.0:
; LP64F-NEXT:    addi a0, zero, 1023
; LP64F-NEXT:    slli a0, a0, 52
; LP64F-NEXT:    tail one_double
;
; LP64D-LABEL: test_one_double:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI9_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI9_0)
; LP64D-NEXT:    fld fa0, 0(a0)
; LP64D-NEXT:    tail one_double
    tail call void @one_double(double 1.0)
    ret void
}

define void @test_two_doubles() nounwind {
; LP64F-LABEL: test_two_doubles:
; LP64F:       # %bb.0:
; LP64F-NEXT:    addi a0, zero, 1023
; LP64F-NEXT:    slli a0, a0, 52
; LP64F-NEXT:    addi a1, zero, 1
; LP64F-NEXT:    slli a1, a1, 62
; LP64F-NEXT:    tail two_doubles
;
; LP64D-LABEL: test_two_doubles:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI10_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI10_0)
; LP64D-NEXT:    fld fa0, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI10_1)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI10_1)
; LP64D-NEXT:    fld fa1, 0(a0)
; LP64D-NEXT:    tail two_doubles
    tail call void @two_doubles(double 1.0, double 2.0)
    ret void
}

define void @test_three_doubles() nounwind {
; LP64F-LABEL: test_three_doubles:
; LP64F:       # %bb.0:
; LP64F-NEXT:    addi a0, zero, 1023
; LP64F-NEXT:    slli a0, a0, 52
; LP64F-NEXT:    addi a1, zero, 1
; LP64F-NEXT:    slli a1, a1, 62
; LP64F-NEXT:    addi a2, zero, 1025
; LP64F-NEXT:    slli a2, a2, 52
; LP64F-NEXT:    tail three_doubles
;
; LP64D-LABEL: test_three_doubles:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI11_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI11_0)
; LP64D-NEXT:    fld fa0, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI11_1)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI11_1)
; LP64D-NEXT:    fld fa1, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI11_2)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI11_2)
; LP64D-NEXT:    fld fa2, 0(a0)
; LP64D-NEXT:    tail three_doubles
    tail call void @three_doubles(double 1.0, double 2.0, double 4.0)
    ret void
}

define void @test_four_doubles() nounwind {
; LP64F-LABEL: test_four_doubles:
; LP64F:       # %bb.0:
; LP64F-NEXT:    addi a0, zero, 1023
; LP64F-NEXT:    slli a0, a0, 52
; LP64F-NEXT:    addi a1, zero, 1
; LP64F-NEXT:    slli a1, a1, 62
; LP64F-NEXT:    addi a2, zero, 1025
; LP64F-NEXT:    slli a2, a2, 52
; LP64F-NEXT:    addi a3, zero, 513
; LP64F-NEXT:    slli a3, a3, 53
; LP64F-NEXT:    tail four_doubles
;
; LP64D-LABEL: test_four_doubles:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI12_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI12_0)
; LP64D-NEXT:    lui a1, %hi(.LCPI12_1)
; LP64D-NEXT:    addi a1, a1, %lo(.LCPI12_1)
; LP64D-NEXT:    fld fa0, 0(a1)
; LP64D-NEXT:    fld fa1, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI12_2)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI12_2)
; LP64D-NEXT:    fld fa2, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI12_3)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI12_3)
; LP64D-NEXT:    fld fa3, 0(a0)
; LP64D-NEXT:    tail four_doubles
    tail call void @four_doubles(double 1.0, double 2.0, double 4.0, double 8.0)
    ret void
}

define void @test_five_doubles() nounwind {
; LP64F-LABEL: test_five_doubles:
; LP64F:       # %bb.0:
; LP64F-NEXT:    addi a0, zero, 1023
; LP64F-NEXT:    slli a0, a0, 52
; LP64F-NEXT:    addi a1, zero, 1
; LP64F-NEXT:    slli a1, a1, 62
; LP64F-NEXT:    addi a2, zero, 1025
; LP64F-NEXT:    slli a2, a2, 52
; LP64F-NEXT:    addi a3, zero, 513
; LP64F-NEXT:    slli a3, a3, 53
; LP64F-NEXT:    addi a4, zero, 1027
; LP64F-NEXT:    slli a4, a4, 52
; LP64F-NEXT:    tail five_doubles
;
; LP64D-LABEL: test_five_doubles:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI13_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI13_0)
; LP64D-NEXT:    lui a1, %hi(.LCPI13_1)
; LP64D-NEXT:    addi a1, a1, %lo(.LCPI13_1)
; LP64D-NEXT:    lui a2, %hi(.LCPI13_2)
; LP64D-NEXT:    addi a2, a2, %lo(.LCPI13_2)
; LP64D-NEXT:    fld fa0, 0(a2)
; LP64D-NEXT:    fld fa1, 0(a1)
; LP64D-NEXT:    fld fa2, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI13_3)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI13_3)
; LP64D-NEXT:    fld fa3, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI13_4)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI13_4)
; LP64D-NEXT:    fld fa4, 0(a0)
; LP64D-NEXT:    tail five_doubles
    tail call void @five_doubles(double 1.0, double 2.0, double 4.0, double 8.0, double 16.0)
    ret void
}

define void @test_six_doubles() nounwind {
; LP64F-LABEL: test_six_doubles:
; LP64F:       # %bb.0:
; LP64F-NEXT:    addi a0, zero, 1023
; LP64F-NEXT:    slli a0, a0, 52
; LP64F-NEXT:    addi a1, zero, 1
; LP64F-NEXT:    slli a1, a1, 62
; LP64F-NEXT:    addi a2, zero, 1025
; LP64F-NEXT:    slli a2, a2, 52
; LP64F-NEXT:    addi a3, zero, 513
; LP64F-NEXT:    slli a3, a3, 53
; LP64F-NEXT:    addi a4, zero, 1027
; LP64F-NEXT:    slli a4, a4, 52
; LP64F-NEXT:    addi a5, zero, 257
; LP64F-NEXT:    slli a5, a5, 54
; LP64F-NEXT:    tail six_doubles
;
; LP64D-LABEL: test_six_doubles:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI14_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI14_0)
; LP64D-NEXT:    lui a1, %hi(.LCPI14_1)
; LP64D-NEXT:    addi a1, a1, %lo(.LCPI14_1)
; LP64D-NEXT:    lui a2, %hi(.LCPI14_2)
; LP64D-NEXT:    addi a2, a2, %lo(.LCPI14_2)
; LP64D-NEXT:    lui a3, %hi(.LCPI14_3)
; LP64D-NEXT:    addi a3, a3, %lo(.LCPI14_3)
; LP64D-NEXT:    fld fa0, 0(a3)
; LP64D-NEXT:    fld fa1, 0(a2)
; LP64D-NEXT:    fld fa2, 0(a1)
; LP64D-NEXT:    fld fa3, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI14_4)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI14_4)
; LP64D-NEXT:    fld fa4, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI14_5)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI14_5)
; LP64D-NEXT:    fld fa5, 0(a0)
; LP64D-NEXT:    tail six_doubles
    tail call void @six_doubles(double 1.0, double 2.0, double 4.0, double 8.0, double 16.0, double 32.0)
    ret void
}

define void @test_seven_doubles() nounwind {
; LP64F-LABEL: test_seven_doubles:
; LP64F:       # %bb.0:
; LP64F-NEXT:    addi a0, zero, 1023
; LP64F-NEXT:    slli a0, a0, 52
; LP64F-NEXT:    addi a1, zero, 1
; LP64F-NEXT:    slli a1, a1, 62
; LP64F-NEXT:    addi a2, zero, 1025
; LP64F-NEXT:    slli a2, a2, 52
; LP64F-NEXT:    addi a3, zero, 513
; LP64F-NEXT:    slli a3, a3, 53
; LP64F-NEXT:    addi a4, zero, 1027
; LP64F-NEXT:    slli a4, a4, 52
; LP64F-NEXT:    addi a5, zero, 257
; LP64F-NEXT:    slli a5, a5, 54
; LP64F-NEXT:    addi a6, zero, 1029
; LP64F-NEXT:    slli a6, a6, 52
; LP64F-NEXT:    tail seven_doubles
;
; LP64D-LABEL: test_seven_doubles:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI15_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI15_0)
; LP64D-NEXT:    lui a1, %hi(.LCPI15_1)
; LP64D-NEXT:    addi a1, a1, %lo(.LCPI15_1)
; LP64D-NEXT:    lui a2, %hi(.LCPI15_2)
; LP64D-NEXT:    addi a2, a2, %lo(.LCPI15_2)
; LP64D-NEXT:    lui a3, %hi(.LCPI15_3)
; LP64D-NEXT:    addi a3, a3, %lo(.LCPI15_3)
; LP64D-NEXT:    lui a4, %hi(.LCPI15_4)
; LP64D-NEXT:    addi a4, a4, %lo(.LCPI15_4)
; LP64D-NEXT:    fld fa0, 0(a4)
; LP64D-NEXT:    fld fa1, 0(a3)
; LP64D-NEXT:    fld fa2, 0(a2)
; LP64D-NEXT:    fld fa3, 0(a1)
; LP64D-NEXT:    fld fa4, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI15_5)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI15_5)
; LP64D-NEXT:    fld fa5, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI15_6)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI15_6)
; LP64D-NEXT:    fld fa6, 0(a0)
; LP64D-NEXT:    tail seven_doubles
    tail call void @seven_doubles(double 1.0, double 2.0, double 4.0, double 8.0, double 16.0, double 32.0, double 64.0)
    ret void
}

define void @test_eight_doubles() nounwind {
; LP64F-LABEL: test_eight_doubles:
; LP64F:       # %bb.0:
; LP64F-NEXT:    addi a0, zero, 1023
; LP64F-NEXT:    slli a0, a0, 52
; LP64F-NEXT:    addi a1, zero, 1
; LP64F-NEXT:    slli a1, a1, 62
; LP64F-NEXT:    addi a2, zero, 1025
; LP64F-NEXT:    slli a2, a2, 52
; LP64F-NEXT:    addi a3, zero, 513
; LP64F-NEXT:    slli a3, a3, 53
; LP64F-NEXT:    addi a4, zero, 1027
; LP64F-NEXT:    slli a4, a4, 52
; LP64F-NEXT:    addi a5, zero, 257
; LP64F-NEXT:    slli a5, a5, 54
; LP64F-NEXT:    addi a6, zero, 1029
; LP64F-NEXT:    slli a6, a6, 52
; LP64F-NEXT:    addi a7, zero, 515
; LP64F-NEXT:    slli a7, a7, 53
; LP64F-NEXT:    tail eight_doubles
;
; LP64D-LABEL: test_eight_doubles:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI16_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI16_0)
; LP64D-NEXT:    lui a1, %hi(.LCPI16_1)
; LP64D-NEXT:    addi a1, a1, %lo(.LCPI16_1)
; LP64D-NEXT:    lui a2, %hi(.LCPI16_2)
; LP64D-NEXT:    addi a2, a2, %lo(.LCPI16_2)
; LP64D-NEXT:    lui a3, %hi(.LCPI16_3)
; LP64D-NEXT:    addi a3, a3, %lo(.LCPI16_3)
; LP64D-NEXT:    lui a4, %hi(.LCPI16_4)
; LP64D-NEXT:    addi a4, a4, %lo(.LCPI16_4)
; LP64D-NEXT:    lui a5, %hi(.LCPI16_5)
; LP64D-NEXT:    addi a5, a5, %lo(.LCPI16_5)
; LP64D-NEXT:    fld fa0, 0(a5)
; LP64D-NEXT:    fld fa1, 0(a4)
; LP64D-NEXT:    fld fa2, 0(a3)
; LP64D-NEXT:    fld fa3, 0(a2)
; LP64D-NEXT:    fld fa4, 0(a1)
; LP64D-NEXT:    fld fa5, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI16_6)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI16_6)
; LP64D-NEXT:    fld fa6, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI16_7)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI16_7)
; LP64D-NEXT:    fld fa7, 0(a0)
; LP64D-NEXT:    tail eight_doubles
    tail call void @eight_doubles(double 1.0, double 2.0, double 4.0, double 8.0, double 16.0, double 32.0, double 64.0, double 128.0)
    ret void
}

define void @test_nine_doubles() nounwind {
; LP64F-LABEL: test_nine_doubles:
; LP64F:       # %bb.0:
; LP64F-NEXT:    addi sp, sp, -16
; LP64F-NEXT:    sd ra, 8(sp)
; LP64F-NEXT:    addi a0, zero, 1031
; LP64F-NEXT:    slli a0, a0, 52
; LP64F-NEXT:    sd a0, 0(sp)
; LP64F-NEXT:    addi a0, zero, 1023
; LP64F-NEXT:    slli a0, a0, 52
; LP64F-NEXT:    addi a1, zero, 1
; LP64F-NEXT:    slli a1, a1, 62
; LP64F-NEXT:    addi a2, zero, 1025
; LP64F-NEXT:    slli a2, a2, 52
; LP64F-NEXT:    addi a3, zero, 513
; LP64F-NEXT:    slli a3, a3, 53
; LP64F-NEXT:    addi a4, zero, 1027
; LP64F-NEXT:    slli a4, a4, 52
; LP64F-NEXT:    addi a5, zero, 257
; LP64F-NEXT:    slli a5, a5, 54
; LP64F-NEXT:    addi a6, zero, 1029
; LP64F-NEXT:    slli a6, a6, 52
; LP64F-NEXT:    addi a7, zero, 515
; LP64F-NEXT:    slli a7, a7, 53
; LP64F-NEXT:    call nine_doubles
; LP64F-NEXT:    ld ra, 8(sp)
; LP64F-NEXT:    addi sp, sp, 16
; LP64F-NEXT:    ret
;
; LP64D-LABEL: test_nine_doubles:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI17_0)
; LP64D-NEXT:    addi a6, a0, %lo(.LCPI17_0)
; LP64D-NEXT:    lui a1, %hi(.LCPI17_1)
; LP64D-NEXT:    addi a1, a1, %lo(.LCPI17_1)
; LP64D-NEXT:    lui a2, %hi(.LCPI17_2)
; LP64D-NEXT:    addi a2, a2, %lo(.LCPI17_2)
; LP64D-NEXT:    lui a3, %hi(.LCPI17_3)
; LP64D-NEXT:    addi a3, a3, %lo(.LCPI17_3)
; LP64D-NEXT:    lui a4, %hi(.LCPI17_4)
; LP64D-NEXT:    addi a4, a4, %lo(.LCPI17_4)
; LP64D-NEXT:    lui a5, %hi(.LCPI17_5)
; LP64D-NEXT:    addi a5, a5, %lo(.LCPI17_5)
; LP64D-NEXT:    lui a0, %hi(.LCPI17_6)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI17_6)
; LP64D-NEXT:    fld fa0, 0(a0)
; LP64D-NEXT:    fld fa1, 0(a5)
; LP64D-NEXT:    fld fa2, 0(a4)
; LP64D-NEXT:    fld fa3, 0(a3)
; LP64D-NEXT:    fld fa4, 0(a2)
; LP64D-NEXT:    fld fa5, 0(a1)
; LP64D-NEXT:    fld fa6, 0(a6)
; LP64D-NEXT:    lui a0, %hi(.LCPI17_7)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI17_7)
; LP64D-NEXT:    fld fa7, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI17_8)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI17_8)
; LP64D-NEXT:    fld ft0, 0(a0)
; LP64D-NEXT:    fmv.x.d a0, ft0
; LP64D-NEXT:    tail nine_doubles
    tail call void @nine_doubles(double 1.0, double 2.0, double 4.0, double 8.0, double 16.0, double 32.0, double 64.0, double 128.0, double 256.0)
    ret void
}

; -----------------------------------------------------------------------------
; A struct containing just one floating-point real is passed as though it were
; a standalone floating-point real.
; -----------------------------------------------------------------------------

%struct.SingleFloat = type { float }

declare void @single_float(%struct.SingleFloat);

define void @test_single_float() nounwind {
; LP64F-LABEL: test_single_float:
; LP64F:       # %bb.0: # %entry
; LP64F-NEXT:    lui a0, %hi(.LCPI18_0)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI18_0)
; LP64F-NEXT:    flw fa0, 0(a0)
; LP64F-NEXT:    tail single_float
;
; LP64D-LABEL: test_single_float:
; LP64D:       # %bb.0: # %entry
; LP64D-NEXT:    lui a0, %hi(.LCPI18_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI18_0)
; LP64D-NEXT:    flw fa0, 0(a0)
; LP64D-NEXT:    tail single_float
entry:
  tail call void @single_float(%struct.SingleFloat { float 1.0 })
  ret void
}

; -----------------------------------------------------------------------------
; A struct containing two floating point reals is passed in two floating-point
; registers if neither is more than FLEN and at least two floating point
; registers are available...
; -----------------------------------------------------------------------------

%struct.PairOfFloat = type { float, float }

declare void @pair_of_floats(%struct.PairOfFloat);

define void @test_pair_of_floats() nounwind {
; LP64F-LABEL: test_pair_of_floats:
; LP64F:       # %bb.0: # %entry
; LP64F-NEXT:    lui a0, %hi(.LCPI19_0)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI19_0)
; LP64F-NEXT:    flw fa0, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI19_1)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI19_1)
; LP64F-NEXT:    flw fa1, 0(a0)
; LP64F-NEXT:    tail pair_of_floats
;
; LP64D-LABEL: test_pair_of_floats:
; LP64D:       # %bb.0: # %entry
; LP64D-NEXT:    lui a0, %hi(.LCPI19_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI19_0)
; LP64D-NEXT:    flw fa0, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI19_1)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI19_1)
; LP64D-NEXT:    flw fa1, 0(a0)
; LP64D-NEXT:    tail pair_of_floats
entry:
  tail call void @pair_of_floats(%struct.PairOfFloat { float 1.0, float 2.0 })
  ret void
}

; ... the registers need not be an aligned pair ...

declare void @float_and_pair_of_floats(float, %struct.PairOfFloat);

define void @test_float_pair_of_floats() nounwind {
; LP64F-LABEL: test_float_pair_of_floats:
; LP64F:       # %bb.0: # %entry
; LP64F-NEXT:    lui a0, %hi(.LCPI20_0)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI20_0)
; LP64F-NEXT:    flw fa0, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI20_1)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI20_1)
; LP64F-NEXT:    flw fa1, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI20_2)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI20_2)
; LP64F-NEXT:    flw fa2, 0(a0)
; LP64F-NEXT:    tail float_and_pair_of_floats
;
; LP64D-LABEL: test_float_pair_of_floats:
; LP64D:       # %bb.0: # %entry
; LP64D-NEXT:    lui a0, %hi(.LCPI20_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI20_0)
; LP64D-NEXT:    flw fa0, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI20_1)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI20_1)
; LP64D-NEXT:    flw fa1, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI20_2)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI20_2)
; LP64D-NEXT:    flw fa2, 0(a0)
; LP64D-NEXT:    tail float_and_pair_of_floats
entry:
  tail call void @float_and_pair_of_floats(float 1.0, %struct.PairOfFloat { float 2.0, float 4.0 })
  ret void
}

; ... otherwise it is passed according the integer calling conversion

declare void @eight_floats_and_pair_of_floats(float, float, float, float, float, float, float, float, %struct.PairOfFloat);

define void @test_eight_float_pair_of_floats() nounwind {
; LP64F-LABEL: test_eight_float_pair_of_floats:
; LP64F:       # %bb.0: # %entry
; LP64F-NEXT:    lui a0, %hi(.LCPI21_0)
; LP64F-NEXT:    addi a6, a0, %lo(.LCPI21_0)
; LP64F-NEXT:    lui a1, %hi(.LCPI21_1)
; LP64F-NEXT:    addi a7, a1, %lo(.LCPI21_1)
; LP64F-NEXT:    lui a2, %hi(.LCPI21_2)
; LP64F-NEXT:    addi a2, a2, %lo(.LCPI21_2)
; LP64F-NEXT:    lui a3, %hi(.LCPI21_3)
; LP64F-NEXT:    addi a3, a3, %lo(.LCPI21_3)
; LP64F-NEXT:    lui a4, %hi(.LCPI21_4)
; LP64F-NEXT:    addi a4, a4, %lo(.LCPI21_4)
; LP64F-NEXT:    lui a5, %hi(.LCPI21_5)
; LP64F-NEXT:    addi a5, a5, %lo(.LCPI21_5)
; LP64F-NEXT:    lui a0, %hi(.LCPI21_6)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI21_6)
; LP64F-NEXT:    lui a1, %hi(.LCPI21_7)
; LP64F-NEXT:    addi a1, a1, %lo(.LCPI21_7)
; LP64F-NEXT:    flw fa0, 0(a1)
; LP64F-NEXT:    flw fa1, 0(a0)
; LP64F-NEXT:    flw fa2, 0(a5)
; LP64F-NEXT:    flw fa3, 0(a4)
; LP64F-NEXT:    flw fa4, 0(a3)
; LP64F-NEXT:    flw fa5, 0(a2)
; LP64F-NEXT:    flw fa6, 0(a7)
; LP64F-NEXT:    flw fa7, 0(a6)
; LP64F-NEXT:    lui a0, %hi(.LCPI21_8)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI21_8)
; LP64F-NEXT:    flw ft0, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI21_9)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI21_9)
; LP64F-NEXT:    flw ft1, 0(a0)
; LP64F-NEXT:    fmv.x.w a0, ft0
; LP64F-NEXT:    fmv.x.w a1, ft1
; LP64F-NEXT:    tail eight_floats_and_pair_of_floats
;
; LP64D-LABEL: test_eight_float_pair_of_floats:
; LP64D:       # %bb.0: # %entry
; LP64D-NEXT:    lui a0, %hi(.LCPI21_0)
; LP64D-NEXT:    addi a6, a0, %lo(.LCPI21_0)
; LP64D-NEXT:    lui a1, %hi(.LCPI21_1)
; LP64D-NEXT:    addi a7, a1, %lo(.LCPI21_1)
; LP64D-NEXT:    lui a2, %hi(.LCPI21_2)
; LP64D-NEXT:    addi a2, a2, %lo(.LCPI21_2)
; LP64D-NEXT:    lui a3, %hi(.LCPI21_3)
; LP64D-NEXT:    addi a3, a3, %lo(.LCPI21_3)
; LP64D-NEXT:    lui a4, %hi(.LCPI21_4)
; LP64D-NEXT:    addi a4, a4, %lo(.LCPI21_4)
; LP64D-NEXT:    lui a5, %hi(.LCPI21_5)
; LP64D-NEXT:    addi a5, a5, %lo(.LCPI21_5)
; LP64D-NEXT:    lui a0, %hi(.LCPI21_6)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI21_6)
; LP64D-NEXT:    lui a1, %hi(.LCPI21_7)
; LP64D-NEXT:    addi a1, a1, %lo(.LCPI21_7)
; LP64D-NEXT:    flw fa0, 0(a1)
; LP64D-NEXT:    flw fa1, 0(a0)
; LP64D-NEXT:    flw fa2, 0(a5)
; LP64D-NEXT:    flw fa3, 0(a4)
; LP64D-NEXT:    flw fa4, 0(a3)
; LP64D-NEXT:    flw fa5, 0(a2)
; LP64D-NEXT:    flw fa6, 0(a7)
; LP64D-NEXT:    flw fa7, 0(a6)
; LP64D-NEXT:    lui a0, %hi(.LCPI21_8)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI21_8)
; LP64D-NEXT:    flw ft0, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI21_9)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI21_9)
; LP64D-NEXT:    flw ft1, 0(a0)
; LP64D-NEXT:    fmv.x.w a0, ft0
; LP64D-NEXT:    fmv.x.w a1, ft1
; LP64D-NEXT:    tail eight_floats_and_pair_of_floats
entry:
  tail call void @eight_floats_and_pair_of_floats(float 1.0, float 2.0,  float 4.0,  float 8.0,
                                                  float 16.0, float 32.0, float 64.0, float 128.0,
                                                  %struct.PairOfFloat { float 256.0, float 512.0 })
  ret void
}

; -----------------------------------------------------------------------------
; A struct containing one floating point real and one integer
; is passed in a floating point register and an integer register...
; -----------------------------------------------------------------------------

declare void @float_and_i64(float, i64);
define void @test_float_and_i64() nounwind
; LP64F-LABEL: test_float_and_i64:
; LP64F:       # %bb.0:
; LP64F-NEXT:    lui a0, %hi(.LCPI22_0)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI22_0)
; LP64F-NEXT:    flw fa0, 0(a0)
; LP64F-NEXT:    addi a0, zero, 42
; LP64F-NEXT:    tail float_and_i64
;
; LP64D-LABEL: test_float_and_i64:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI22_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI22_0)
; LP64D-NEXT:    flw fa0, 0(a0)
; LP64D-NEXT:    addi a0, zero, 42
; LP64D-NEXT:    tail float_and_i64
{
    tail call void @float_and_i64(float 2.0, i64 42)
    ret void
}

declare void @double_and_i64(double, i64);
define void @test_double_and_i64() nounwind
; LP64F-LABEL: test_double_and_i64:
; LP64F:       # %bb.0:
; LP64F-NEXT:    addi a0, zero, 1
; LP64F-NEXT:    slli a0, a0, 62
; LP64F-NEXT:    addi a1, zero, 42
; LP64F-NEXT:    tail double_and_i64
;
; LP64D-LABEL: test_double_and_i64:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI23_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI23_0)
; LP64D-NEXT:    fld fa0, 0(a0)
; LP64D-NEXT:    addi a0, zero, 42
; LP64D-NEXT:    tail double_and_i64
{
    tail call void @double_and_i64(double 2.0, i64 42)
    ret void
}

; ... in either order.

declare void @i64_and_float(i64, float);
define void @test_i64_and_float() nounwind
; LP64F-LABEL: test_i64_and_float:
; LP64F:       # %bb.0:
; LP64F-NEXT:    lui a0, %hi(.LCPI24_0)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI24_0)
; LP64F-NEXT:    flw fa0, 0(a0)
; LP64F-NEXT:    addi a0, zero, 42
; LP64F-NEXT:    tail i64_and_float
;
; LP64D-LABEL: test_i64_and_float:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI24_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI24_0)
; LP64D-NEXT:    flw fa0, 0(a0)
; LP64D-NEXT:    addi a0, zero, 42
; LP64D-NEXT:    tail i64_and_float
{
    tail call void @i64_and_float(i64 42, float 2.0)
    ret void
}

declare void @i64_and_double(i64, double);
define void @test_i64_and_double() nounwind
; LP64F-LABEL: test_i64_and_double:
; LP64F:       # %bb.0:
; LP64F-NEXT:    addi a0, zero, 1
; LP64F-NEXT:    slli a1, a0, 62
; LP64F-NEXT:    addi a0, zero, 42
; LP64F-NEXT:    tail i64_and_double
;
; LP64D-LABEL: test_i64_and_double:
; LP64D:       # %bb.0:
; LP64D-NEXT:    lui a0, %hi(.LCPI25_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI25_0)
; LP64D-NEXT:    fld fa0, 0(a0)
; LP64D-NEXT:    addi a0, zero, 42
; LP64D-NEXT:    tail i64_and_double
{
    tail call void @i64_and_double(i64 42, double 2.0)
    ret void
}

; -----------------------------------------------------------------------------
; Variadic arguments are passed according to the integer calling conversion
; -----------------------------------------------------------------------------
declare void @variadic_function(i64 %X, ...);

define void @test_variadic_function_float() nounwind {
; LP64F-LABEL: test_variadic_function_float:
; LP64F:       # %bb.0:
; LP64F-NEXT:    addi sp, sp, -16
; LP64F-NEXT:    sd ra, 8(sp)
; LP64F-NEXT:    lui a0, %hi(.LCPI26_0)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI26_0)
; LP64F-NEXT:    lui a1, %hi(.LCPI26_1)
; LP64F-NEXT:    addi a1, a1, %lo(.LCPI26_1)
; LP64F-NEXT:    flw ft0, 0(a1)
; LP64F-NEXT:    flw ft1, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI26_2)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI26_2)
; LP64F-NEXT:    flw ft2, 0(a0)
; LP64F-NEXT:    lui a0, %hi(.LCPI26_3)
; LP64F-NEXT:    addi a0, a0, %lo(.LCPI26_3)
; LP64F-NEXT:    flw ft3, 0(a0)
; LP64F-NEXT:    addi a0, zero, 4
; LP64F-NEXT:    fmv.x.w a1, ft0
; LP64F-NEXT:    fmv.x.w a2, ft1
; LP64F-NEXT:    fmv.x.w a3, ft2
; LP64F-NEXT:    fmv.x.w a4, ft3
; LP64F-NEXT:    call variadic_function
; LP64F-NEXT:    ld ra, 8(sp)
; LP64F-NEXT:    addi sp, sp, 16
; LP64F-NEXT:    ret
;
; LP64D-LABEL: test_variadic_function_float:
; LP64D:       # %bb.0:
; LP64D-NEXT:    addi sp, sp, -16
; LP64D-NEXT:    sd ra, 8(sp)
; LP64D-NEXT:    lui a0, %hi(.LCPI26_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI26_0)
; LP64D-NEXT:    lui a1, %hi(.LCPI26_1)
; LP64D-NEXT:    addi a1, a1, %lo(.LCPI26_1)
; LP64D-NEXT:    flw ft0, 0(a1)
; LP64D-NEXT:    flw ft1, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI26_2)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI26_2)
; LP64D-NEXT:    flw ft2, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI26_3)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI26_3)
; LP64D-NEXT:    flw ft3, 0(a0)
; LP64D-NEXT:    addi a0, zero, 4
; LP64D-NEXT:    fmv.x.w a1, ft0
; LP64D-NEXT:    fmv.x.w a2, ft1
; LP64D-NEXT:    fmv.x.w a3, ft2
; LP64D-NEXT:    fmv.x.w a4, ft3
; LP64D-NEXT:    call variadic_function
; LP64D-NEXT:    ld ra, 8(sp)
; LP64D-NEXT:    addi sp, sp, 16
; LP64D-NEXT:    ret
    tail call void (i64, ...) @variadic_function(i64 4, float 1.0, float 2.0, float 4.0, float 8.0)
    ret void
}

define void @test_variadic_function_double() nounwind {
; LP64F-LABEL: test_variadic_function_double:
; LP64F:       # %bb.0:
; LP64F-NEXT:    addi sp, sp, -16
; LP64F-NEXT:    sd ra, 8(sp)
; LP64F-NEXT:    addi a0, zero, 1023
; LP64F-NEXT:    slli a1, a0, 52
; LP64F-NEXT:    addi a0, zero, 1
; LP64F-NEXT:    slli a2, a0, 62
; LP64F-NEXT:    addi a0, zero, 1025
; LP64F-NEXT:    slli a3, a0, 52
; LP64F-NEXT:    addi a0, zero, 513
; LP64F-NEXT:    slli a4, a0, 53
; LP64F-NEXT:    addi a0, zero, 4
; LP64F-NEXT:    call variadic_function
; LP64F-NEXT:    ld ra, 8(sp)
; LP64F-NEXT:    addi sp, sp, 16
; LP64F-NEXT:    ret
;
; LP64D-LABEL: test_variadic_function_double:
; LP64D:       # %bb.0:
; LP64D-NEXT:    addi sp, sp, -16
; LP64D-NEXT:    sd ra, 8(sp)
; LP64D-NEXT:    lui a0, %hi(.LCPI27_0)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI27_0)
; LP64D-NEXT:    lui a1, %hi(.LCPI27_1)
; LP64D-NEXT:    addi a1, a1, %lo(.LCPI27_1)
; LP64D-NEXT:    fld ft0, 0(a1)
; LP64D-NEXT:    fld ft1, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI27_2)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI27_2)
; LP64D-NEXT:    fld ft2, 0(a0)
; LP64D-NEXT:    lui a0, %hi(.LCPI27_3)
; LP64D-NEXT:    addi a0, a0, %lo(.LCPI27_3)
; LP64D-NEXT:    fld ft3, 0(a0)
; LP64D-NEXT:    addi a0, zero, 4
; LP64D-NEXT:    fmv.x.d a1, ft0
; LP64D-NEXT:    fmv.x.d a2, ft1
; LP64D-NEXT:    fmv.x.d a3, ft2
; LP64D-NEXT:    fmv.x.d a4, ft3
; LP64D-NEXT:    call variadic_function
; LP64D-NEXT:    ld ra, 8(sp)
; LP64D-NEXT:    addi sp, sp, 16
; LP64D-NEXT:    ret
    tail call void (i64, ...) @variadic_function(i64 4, double 1.0, double 2.0, double 4.0, double 8.0)
    ret void
}
