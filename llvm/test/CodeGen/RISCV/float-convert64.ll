; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+f,+d,+hard-float-double < %s | \
; RUN:     FileCheck %s

define dso_local float @u64tof32(i64 %x) nounwind {
; CHECK-LABEL: u64tof32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcvt.s.lu fa0, a0
; CHECK-NEXT:    ret
entry:
  %conv = uitofp i64 %x to float
  ret float %conv
}

define dso_local float @u32tof32(i32 signext %x) nounwind {
; CHECK-LABEL: u32tof32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lui a1, 0
; CHECK-NEXT:    sext.w a2, a1
; CHECK-NEXT:    slli a2, a2, 32
; CHECK-NEXT:    addiw a1, a1, -1
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    or a1, a2, a1
; CHECK-NEXT:    and a0, a0, a1
; CHECK-NEXT:    fcvt.s.lu fa0, a0
; CHECK-NEXT:    ret
entry:
  %conv = uitofp i32 %x to float
  ret float %conv
}

define dso_local double @u64tof64(i64 %x) nounwind {
; CHECK-LABEL: u64tof64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcvt.d.lu fa0, a0
; CHECK-NEXT:    ret
entry:
  %conv = uitofp i64 %x to double
  ret double %conv
}

define dso_local double @u32tof64(i32 signext %x) nounwind {
; CHECK-LABEL: u32tof64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lui a1, 0
; CHECK-NEXT:    sext.w a2, a1
; CHECK-NEXT:    slli a2, a2, 32
; CHECK-NEXT:    addiw a1, a1, -1
; CHECK-NEXT:    slli a1, a1, 32
; CHECK-NEXT:    srli a1, a1, 32
; CHECK-NEXT:    or a1, a2, a1
; CHECK-NEXT:    and a0, a0, a1
; CHECK-NEXT:    fcvt.d.lu fa0, a0
; CHECK-NEXT:    ret
entry:
  %conv = uitofp i32 %x to double
  ret double %conv
}

define dso_local float @s64tof32(i64 %x) nounwind {
; CHECK-LABEL: s64tof32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcvt.s.l fa0, a0
; CHECK-NEXT:    ret
entry:
  %conv = sitofp i64 %x to float
  ret float %conv
}

define dso_local float @s32tof32(i32 signext %x) nounwind {
; CHECK-LABEL: s32tof32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcvt.s.l fa0, a0
; CHECK-NEXT:    ret
entry:
  %conv = sitofp i32 %x to float
  ret float %conv
}

define dso_local double @s64tof64(i64 %x) nounwind {
; CHECK-LABEL: s64tof64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcvt.d.l fa0, a0
; CHECK-NEXT:    ret
entry:
  %conv = sitofp i64 %x to double
  ret double %conv
}

define dso_local double @s32tof64(i32 signext %x) nounwind {
; CHECK-LABEL: s32tof64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fcvt.d.l fa0, a0
; CHECK-NEXT:    ret
entry:
  %conv = sitofp i32 %x to double
  ret double %conv
}
