; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+m,+f,+d,+a,+c,+epi -verify-machineinstrs < %s \
; RUN:    | FileCheck %s

define <vscale x 1 x double> @add1(<vscale x 1 x double>, i64) {
; CHECK-LABEL: add1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lui a1, %hi(.LCPI0_0)
; CHECK-NEXT:    addi a1, a1, %lo(.LCPI0_0)
; CHECK-NEXT:    fld ft0, 0(a1)
; CHECK-NEXT:    vsetvli a1, a0, e64, m1
; CHECK-NEXT:    vfmv.v.f v0, ft0
; CHECK-NEXT:    vfadd.vv v16, v16, v0
; CHECK-NEXT:    ret
  %3 = call <vscale x 1 x double> @llvm.epi.vbroadcast.nxv1f64.f64(double 1.0, i64 %1)
  %4 = call <vscale x 1 x double> @llvm.epi.vfadd.nxv1f64.nxv1f64(<vscale x 1 x double> %0, <vscale x 1 x double> %3, i64 %1)
  ret <vscale x 1 x double> %4
}

declare <vscale x 1 x double> @llvm.epi.vbroadcast.nxv1f64.f64(double, i64)

declare <vscale x 1 x double> @llvm.epi.vfadd.nxv1f64.nxv1f64(<vscale x 1 x double>, <vscale x 1 x double>, i64)

define void @foo(double*) {
; CHECK-LABEL: foo:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi sp, sp, -32
; CHECK-NEXT:    sd ra, 24(sp)
; CHECK-NEXT:    sd s1, 16(sp)
; CHECK-NEXT:    sd s2, 8(sp)
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    .cfi_offset ra, -8
; CHECK-NEXT:    .cfi_offset s1, -16
; CHECK-NEXT:    .cfi_offset s2, -24
; CHECK-NEXT:    add s2, zero, a0
; CHECK-NEXT:    vsetvli s1, zero, e64, m1
; CHECK-NEXT:    vle.v v16, (a0)
; CHECK-NEXT:    srli a0, s1, 1
; CHECK-NEXT:    call add1
; CHECK-NEXT:    vsetvli a0, s1, e64, m1
; CHECK-NEXT:    vse.v v16, (s2)
; CHECK-NEXT:    ld s2, 8(sp)
; CHECK-NEXT:    ld s1, 16(sp)
; CHECK-NEXT:    ld ra, 24(sp)
; CHECK-NEXT:    addi sp, sp, 32
; CHECK-NEXT:    ret
  %2 = call i64 @llvm.epi.vsetvlmax(i64 3, i64 0)
  %3 = bitcast double* %0 to <vscale x 1 x double>*
  %4 = call <vscale x 1 x double> @llvm.epi.vload.nxv1f64(<vscale x 1 x double>* %3, i64 %2)
  %5 = lshr i64 %2, 1
  %6 = call <vscale x 1 x double> @add1(<vscale x 1 x double> %4, i64 %5)
  call void @llvm.epi.vstore.nxv1f64(<vscale x 1 x double> %6, <vscale x 1 x double>* %3, i64 %2)
  ret void
}

declare i64 @llvm.epi.vsetvlmax(i64, i64)

declare <vscale x 1 x double> @llvm.epi.vload.nxv1f64(<vscale x 1 x double>*, i64)

declare void @llvm.epi.vstore.nxv1f64(<vscale x 1 x double>, <vscale x 1 x double>*, i64)
