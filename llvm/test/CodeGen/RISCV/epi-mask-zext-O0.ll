; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple riscv64 -mattr +m,+a,+f,+d,+v -o - \
; RUN:     --verify-machineinstrs -O0 %s | FileCheck %s

define <vscale x 8 x i8> @foo_O0(<vscale x 8 x i1> %a) nounwind noinline optnone {
; CHECK-LABEL: foo_O0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi sp, sp, -32
; CHECK-NEXT:    sd ra, 24(sp)
; CHECK-NEXT:    sd s0, 16(sp)
; CHECK-NEXT:    addi s0, sp, 32
; CHECK-NEXT:    rdvlenb a0
; CHECK-NEXT:    sub sp, sp, a0
; CHECK-NEXT:    andi sp, sp, -16
; CHECK-NEXT:    sd sp, -32(s0)
; CHECK-NEXT:    vsetvli a0, zero, e8,m1
; CHECK-NEXT:    ld a0, -32(s0)
; CHECK-NEXT:    vse.v v0, (a0)
; CHECK-NEXT:    vsetvli a0, zero, e8,m1
; CHECK-NEXT:    ld a0, -32(s0)
; CHECK-NEXT:    vle.v v1, (a0)
; CHECK-NEXT:    vsetvli a0, zero, e8,m1
; CHECK-NEXT:    vmv.v.i v2, 1
; CHECK-NEXT:    vsetvli a0, zero, e8,m1
; CHECK-NEXT:    vand.vv v16, v1, v2
; CHECK-NEXT:    addi sp, s0, -32
; CHECK-NEXT:    ld s0, 16(sp)
; CHECK-NEXT:    ld ra, 24(sp)
; CHECK-NEXT:    addi sp, sp, 32
; CHECK-NEXT:    ret
entry:
  %a.addr = alloca <vscale x 8 x i8>, align 1
  %frommask = zext <vscale x 8 x i1> %a to <vscale x 8 x i8>
  store <vscale x 8 x i8> %frommask, <vscale x 8 x i8>* %a.addr, align 1
  %0 = load <vscale x 8 x i8>, <vscale x 8 x i8>* %a.addr, align 1
  %tomask = trunc <vscale x 8 x i8> %0 to <vscale x 8 x i1>
  %1 = zext <vscale x 8 x i1> %tomask to <vscale x 8 x i8>
  ret <vscale x 8 x i8> %1
}

define <vscale x 8 x i8> @foo(<vscale x 8 x i1> %a) nounwind {
; CHECK-LABEL: foo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi sp, sp, -32
; CHECK-NEXT:    sd ra, 24(sp)
; CHECK-NEXT:    sd s0, 16(sp)
; CHECK-NEXT:    addi s0, sp, 32
; CHECK-NEXT:    rdvlenb a0
; CHECK-NEXT:    sub sp, sp, a0
; CHECK-NEXT:    andi sp, sp, -16
; CHECK-NEXT:    sd sp, -32(s0)
; CHECK-NEXT:    vsetvli a0, zero, e8,m1
; CHECK-NEXT:    ld a0, -32(s0)
; CHECK-NEXT:    vse.v v0, (a0)
; CHECK-NEXT:    ld a0, -32(s0)
; CHECK-NEXT:    vle.v v1, (a0)
; CHECK-NEXT:    vmv.v.i v2, 1
; CHECK-NEXT:    vand.vv v16, v1, v2
; CHECK-NEXT:    addi sp, s0, -32
; CHECK-NEXT:    ld s0, 16(sp)
; CHECK-NEXT:    ld ra, 24(sp)
; CHECK-NEXT:    addi sp, sp, 32
; CHECK-NEXT:    ret
entry:
  %a.addr = alloca <vscale x 8 x i8>, align 1
  %frommask = zext <vscale x 8 x i1> %a to <vscale x 8 x i8>
  store <vscale x 8 x i8> %frommask, <vscale x 8 x i8>* %a.addr, align 1
  %0 = load <vscale x 8 x i8>, <vscale x 8 x i8>* %a.addr, align 1
  %tomask = trunc <vscale x 8 x i8> %0 to <vscale x 8 x i1>
  %1 = zext <vscale x 8 x i1> %tomask to <vscale x 8 x i8>
  ret <vscale x 8 x i8> %1
}
