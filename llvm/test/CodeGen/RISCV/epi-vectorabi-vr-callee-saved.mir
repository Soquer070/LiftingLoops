# NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 3
# RUN: llc -o - -mtriple riscv64 -mattr=+m,+a,+f,+d,+zepi \
# RUN:     -start-after=virtregrewriter -verify-machineinstrs -relocation-model=pic %s | FileCheck %s
--- |
  ; ModuleID = 'epi-vectorabi-vr-callee-saved.ll'
  source_filename = "/home/rferrer/PROVECTOR/provector-src/src/vecclonevp/musl_exp.c"
  target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n32:64-S128"
  target triple = "riscv64"

  %struct.exp_data = type { double, double, double, double, [4 x double], double, [5 x double], [256 x i64] }

  @__exp_data = dso_local local_unnamed_addr constant %struct.exp_data { double 0x40671547652B82FE, double 0x4338000000000000, double 0xBF762E42FEFA0000, double 0xBD0CF79ABC9E3B3A, [4 x double] [double 0x3FDFFFFFFFFFFDBD, double 0x3FC555555555543C, double 0x3FA55555CF172B91, double 0x3F81111167A4D017], double 0x42C8000000000000, [5 x double] [double 0x3FE62E42FEFA39EF, double 0x3FCEBFBDFF82C424, double 0x3FAC6B08D70CF4B5, double 0x3F83B2ABD24650CC, double 0x3F55D7E09B4E3A84], [256 x i64] [i64 0, i64 4607182418800017408, i64 4367149474599452526, i64 4607171688528556853, i64 -4868004084858692515, i64 4607161091040444513, i64 -4859280119576434991, i64 4607150627056680837, i64 4363093389540324883, i64 4607140297302181236, i64 -4860564323061625094, i64 4607130102505797342, i64 4350749156061923425, i64 4607120043400338376, i64 4364168240100004761, i64 4607110120722592643, i64 4366128403083131757, i64 4607100335213349135, i64 4363624214708482044, i64 4607090687617419255, i64 4341116261916187857, i64 4607081178683658658, i64 -4870076522866643445, i64 4607071809164989211, i64 -4857881712154133234, i64 4607062579818421073, i64 -4877256630102726059, i64 4607053491405074892, i64 -4858881367677209578, i64 4607044544690204128, i64 4359717415120819631, i64 4607035740443217489, i64 -4863857816615152824, i64 4607027079437701499, i64 -4859630355816238531, i64 4607018562451443178, i64 4362731899485115327, i64 4607010190266452853, i64 -4857455882053489882, i64 4607001963668987092, i64 4367063335334195040, i64 4606993883449571754, i64 -4859410923963139939, i64 4606985950403025181, i64 4362421515177083789, i64 4606978165328481494, i64 4359618604155798653, i64 4606970529029414038, i64 4365834109879625876, i64 4606963042313658936, i64 4361558225371547773, i64 4606955705993438783, i64 4359562691856033778, i64 4606948520885386461, i64 -4857492308587640738, i64 4606941487810569089, i64 4360319936817113905, i64 4606934607594512097, i64 -4882709470952570886, i64 4606927881067223440, i64 4362641697437125300, i64 4606921309063217931, i64 4354440509323660175, i64 4606914892421541718, i64 4360414030434708406, i64 4606908631985796885, i64 4361245865020257356, i64 4606902528604166193, i64 4363949802402347082, i64 4606896583129437951, i64 -4862018976549545212, i64 4606890796419031025, i64 -4858738662784151448, i64 4606885169335019979, i64 -4856841960950780530, i64 4606879702744160358, i64 -4867878926798276910, i64 4606874397517914103, i64 -4856823124960863467, i64 4606869254532475109, i64 4361066948569222253, i64 4606864274668794914, i64 -4858519367427004022, i64 4606859458812608540, i64 -4874962362796897957, i64 4606854807854460458, i64 -4864964451502548453, i64 4606850322689730711, i64 4342424336897059857, i64 4606846004218661165, i64 4365789078613288175, i64 4606841853346381911, i64 4354643160121541497, i64 4606837870982937808, i64 4365113450260533808, i64 4606834058043315166, i64 4356828907110576048, i64 4606830415447468583, i64 4364865165386375287, i64 4606826944120347917, i64 -4859502521842818162, i64 4606823644991925415, i64 -4861672301267803319, i64 4606820518997222978, i64 -4865894452217038753, i64 4606817567076339586, i64 -4862178651875353354, i64 4606814790174478863, i64 4364890759862540174, i64 4606812189241976794, i64 4358244976955136773, i64 4606809765234329597, i64 4364097860734309385, i64 4606807519112221737, i64 4338311716453074666, i64 4606805451841554103, i64 4365169902980743221, i64 4606803564393472328, i64 -4860258889723447649, i64 4606801857744395273, i64 -4860452975632495192, i64 4606800332876043653, i64 -4862669920490755666, i64 4606798990775468832, i64 -4858312122400614312, i64 4606797832435081765, i64 4347962289735735652, i64 4606796858852682099, i64 -4858341730713460184, i64 4606796071031487437, i64 -4870059510540748414, i64 4606795469980162751, i64 -4871936092595705362, i64 4606795056712849967, i64 -4863645441585018799, i64 4606794832249197700, i64 -4866104880896786737, i64 4606794797614391156, i64 -4861936742874514000, i64 4606794953839182196, i64 -4862171044651866486, i64 4606795301959919561, i64 4364160436192007379, i64 4606795843018579263, i64 -4865239048860621539, i64 4606796578062795143, i64 4365374511615819883, i64 4606797508145889586, i64 4352143969406577749, i64 4606798634326904418, i64 -4861457929465508030, i64 4606799957670631954, i64 -4858423338550479052, i64 4606801479247646227, i64 -4863783675556659426, i64 4606803200134334381, i64 -4858024654332078226, i64 4606805121412928237, i64 4364178698342926848, i64 4606807244171536025, i64 4363345029737015988, i64 4606809569504174299, i64 -4871286895867992065, i64 4606812098510800012, i64 4358348108421357380, i64 4606814832297342774, i64 -4858529541450220157, i64 4606817771975737286, i64 -4873552611666813399, i64 4606820918663955941, i64 -4869477542650660519, i64 4606824273486041615, i64 -4858747092350994006, i64 4606827837572140624, i64 -4862257653857481141, i64 4606831612058535866, i64 4355455812241575463, i64 4606835598087680144, i64 4354367543587795899, i64 4606839796808229667, i64 -4861700651175763357, i64 4606844209375077733, i64 4362612029712904661, i64 4606848836949388595, i64 -4858896013081134315, i64 4606853680698631517, i64 4364212552380330450, i64 4606858741796615000, i64 4360726356711135923, i64 4606864021423521215, i64 -4863078573502718540, i64 4606869520765940602, i64 4362891239881388935, i64 4606875241016906669, i64 -4859248142566958598, i64 4606881183375930982, i64 -4875775683326071110, i64 4606887349049038331, i64 -4859203616861915584, i64 4606893739248802106, i64 -4870406652589927628, i64 4606900355194379847, i64 -4858839866725070283, i64 4606907198111549002, i64 4356388038631218637, i64 4606914269232742866, i64 -4858893633017702228, i64 4606921569797086729, i64 4355946959017544883, i64 4606929101050434204, i64 4363674894410448276, i64 4606936864245403770, i64 4360857247493478828, i64 4606944860641415499, i64 4351547817417644647, i64 4606953091504727989, i64 4352565403421120872, i64 4606961558108475497, i64 -4863735759665056302, i64 4606970261732705274, i64 -4859474856892171665, i64 4606979203664415100, i64 -4859368956010059447, i64 4606988385197591026, i64 4356286533989107623, i64 4606997807633245319, i64 -4863164539274780145, i64 4607007472279454616, i64 4363524392198705836, i64 4607017380451398277, i64 4360674496013757259, i64 4607027533471396960, i64 -4863090309766824417, i64 4607037932668951391, i64 -4861307347717911095, i64 4607048579380781353, i64 4356306869484685523, i64 4607059474950864886, i64 4360546482996998769, i64 4607070620730477699, i64 -4859393813814996496, i64 4607082018078232794, i64 -4860036451210660739, i64 4607093668360120305, i64 4363640302291525640, i64 4607105572949547559, i64 4360658257139329842, i64 4607117733227379351, i64 4362409866909812206, i64 4607130150581978432, i64 -4859885672053611539, i64 4607142826409246228, i64 4357102052301720989, i64 4607155762112663768, i64 4346824392926350473, i64 4607168959103332849] }, align 8

  ; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none) uwtable vscale_range(1,1024)
  define dso_local epi_vectorcall <vscale x 1 x double> @_ZGVENk1v_musl_exp(<vscale x 1 x double> noundef %x, i32 zeroext %vl) local_unnamed_addr #0 {
  ; CHECK-LABEL: _ZGVENk1v_musl_exp:
  ; CHECK:       # %bb.0: # %entry
  ; CHECK-NEXT:    .cfi_def_cfa_offset 0
  ; CHECK-NEXT:    .cfi_offset v16, -64
  ; CHECK-NEXT:    .cfi_offset v24, -128
  ; CHECK-NEXT:    csrr a1, vlenb
  ; CHECK-NEXT:    slli a1, a1, 4
  ; CHECK-NEXT:    sub sp, sp, a1
  ; CHECK-NEXT:    .cfi_escape 0x0f, 0x0a, 0x72, 0x00, 0x11, 0x10, 0x92, 0xa2, 0x38, 0x00, 0x1e, 0x22 # sp + 16 * vlenb
  ; CHECK-NEXT:    csrr a1, vlenb
  ; CHECK-NEXT:    slli a1, a1, 3
  ; CHECK-NEXT:    add a1, a1, sp
  ; CHECK-NEXT:    vs8r.v v16, (a1) # Unknown-size Folded Spill
  ; CHECK-NEXT:    vs8r.v v24, (sp) # Unknown-size Folded Spill
  ; CHECK-NEXT:    addiw a1, a0, -1
  ; CHECK-NEXT:    vsetvli zero, a0, e32, mf2, ta, ma
  ; CHECK-NEXT:    vid.v v9
  ; CHECK-NEXT:    vmsleu.vx v14, v9, a1
  ; CHECK-NEXT:    li a1, 52
  ; CHECK-NEXT:    vnsrl.wx v9, v8, a1
  ; CHECK-NEXT:    li a1, 2047
  ; CHECK-NEXT:    vand.vx v19, v9, a1
  ; CHECK-NEXT:    li a2, -969
  ; CHECK-NEXT:    vadd.vx v9, v19, a2
  ; CHECK-NEXT:    li a2, 63
  ; CHECK-NEXT:    vmsltu.vx v20, v9, a2
  ; CHECK-NEXT:    vmandn.mm v12, v14, v20
  ; CHECK-NEXT:    li a2, 969
  ; CHECK-NEXT:    vmv1r.v v0, v12
  ; CHECK-NEXT:    vmsltu.vx v9, v19, a2, v0.t
  ; CHECK-NEXT:    vmand.mm v17, v12, v9
  ; CHECK-NEXT:    vmandn.mm v13, v12, v17
  ; CHECK-NEXT:    li a2, 1033
  ; CHECK-NEXT:    vmv1r.v v0, v13
  ; CHECK-NEXT:    vmsltu.vx v9, v19, a2, v0.t
  ; CHECK-NEXT:    vmand.mm v21, v13, v9
  ; CHECK-NEXT:    vmandn.mm v11, v13, v21
  ; CHECK-NEXT:    li a2, -1
  ; CHECK-NEXT:    slli a2, a2, 52
  ; CHECK-NEXT:    vsetvli zero, zero, e64, m1, ta, ma
  ; CHECK-NEXT:    vmv1r.v v0, v11
  ; CHECK-NEXT:    vmseq.vx v9, v8, a2, v0.t
  ; CHECK-NEXT:    vmand.mm v15, v11, v9
  ; CHECK-NEXT:    vmandn.mm v10, v11, v15
  ; CHECK-NEXT:    vsetvli zero, zero, e32, mf2, ta, ma
  ; CHECK-NEXT:    vmv1r.v v0, v10
  ; CHECK-NEXT:    vmseq.vx v9, v19, a1, v0.t
  ; CHECK-NEXT:    vmand.mm v18, v10, v9
  ; CHECK-NEXT:    vmandn.mm v9, v10, v18
  ; CHECK-NEXT:    vsetvli zero, zero, e64, m1, ta, ma
  ; CHECK-NEXT:    vmv1r.v v0, v9
  ; CHECK-NEXT:    vmsgt.vi v0, v8, -1, v0.t
  ; CHECK-NEXT:    vmand.mm v0, v9, v0
  ; CHECK-NEXT:    vsetvli a1, zero, e64, m1, ta, ma
  ; CHECK-NEXT:    vmv.v.i v16, 0
  ; CHECK-NEXT:  .Lpcrel_hi0:
  ; CHECK-NEXT:    auipc a1, %pcrel_hi(.LCPI0_0)
  ; CHECK-NEXT:    fld fa4, %pcrel_lo(.Lpcrel_hi0)(a1)
  ; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, ma
  ; CHECK-NEXT:  .Lpcrel_hi1:
  ; CHECK-NEXT:    auipc a1, %pcrel_hi(.LCPI0_1)
  ; CHECK-NEXT:    fld fa5, %pcrel_lo(.Lpcrel_hi1)(a1)
  ; CHECK-NEXT:    vfmerge.vfm v16, v16, fa4, v0
  ; CHECK-NEXT:    vmand.mm v10, v10, v18
  ; CHECK-NEXT:    vmand.mm v12, v12, v17
  ; CHECK-NEXT:    vmv.v.v v0, v10
  ; CHECK-NEXT:    vfadd.vf v17, v8, fa5, v0.t
  ; CHECK-NEXT:    vmv.v.v v0, v12
  ; CHECK-NEXT:    vfadd.vf v18, v8, fa5, v0.t
  ; CHECK-NEXT:    vmand.mm v12, v14, v20
  ; CHECK-NEXT:    vmand.mm v0, v13, v21
  ; CHECK-NEXT:    vsetvli zero, zero, e32, mf2, ta, ma
  ; CHECK-NEXT:    vmerge.vim v14, v19, 0, v0
  ; CHECK-NEXT:  .Lpcrel_hi2:
  ; CHECK-NEXT:    auipc a1, %pcrel_hi(.LCPI0_2)
  ; CHECK-NEXT:    fld fa4, %pcrel_lo(.Lpcrel_hi2)(a1)
  ; CHECK-NEXT:  .Lpcrel_hi3:
  ; CHECK-NEXT:    auipc a1, %pcrel_hi(.LCPI0_3)
  ; CHECK-NEXT:    fld fa3, %pcrel_lo(.Lpcrel_hi3)(a1)
  ; CHECK-NEXT:    vmor.mm v12, v0, v12
  ; CHECK-NEXT:    vsetvli zero, zero, e64, m1, ta, ma
  ; CHECK-NEXT:    vmv1r.v v0, v12
  ; CHECK-NEXT:    vfmul.vf v13, v8, fa4, v0.t
  ; CHECK-NEXT:    vmv1r.v v0, v12
  ; CHECK-NEXT:    vfadd.vf v13, v13, fa3, v0.t
  ; CHECK-NEXT:  .Lpcrel_hi4:
  ; CHECK-NEXT:    auipc a1, %pcrel_hi(.LCPI0_4)
  ; CHECK-NEXT:    fld fa4, %pcrel_lo(.Lpcrel_hi4)(a1)
  ; CHECK-NEXT:  .Lpcrel_hi5:
  ; CHECK-NEXT:    auipc a1, %pcrel_hi(.LCPI0_5)
  ; CHECK-NEXT:    fld fa3, %pcrel_lo(.Lpcrel_hi5)(a1)
  ; CHECK-NEXT:  .Lpcrel_hi6:
  ; CHECK-NEXT:    auipc a1, %pcrel_hi(.LCPI0_6)
  ; CHECK-NEXT:    fld fa2, %pcrel_lo(.Lpcrel_hi6)(a1)
  ; CHECK-NEXT:    vfadd.vf v19, v13, fa4, v0.t
  ; CHECK-NEXT:    vmv.v.v v20, v19
  ; CHECK-NEXT:    vfmadd.vf v20, fa3, v8, v0.t
  ; CHECK-NEXT:    vfmadd.vf v19, fa2, v20, v0.t
  ; CHECK-NEXT:    vsll.vi v8, v13, 1, v0.t
  ; CHECK-NEXT:    li a1, 254
  ; CHECK-NEXT:    vand.vx v8, v8, a1, v0.t
  ; CHECK-NEXT:    li a1, 45
  ; CHECK-NEXT:    vsll.vx v20, v13, a1, v0.t
  ; CHECK-NEXT:    vsll.vi v0, v8, 3
  ; CHECK-NEXT:    li a1, 112
  ; CHECK-NEXT:    vadd.vx v21, v0, a1
  ; CHECK-NEXT:  .Lpcrel_hi7:
  ; CHECK-NEXT:    auipc a2, %pcrel_hi(__exp_data)
  ; CHECK-NEXT:    addi a2, a2, %pcrel_lo(.Lpcrel_hi7)
  ; CHECK-NEXT:    vmv1r.v v0, v12
  ; CHECK-NEXT:    vluxei64.v v21, (a2), v21, v0.t
  ; CHECK-NEXT:    vor.vi v8, v8, 1, v0.t
  ; CHECK-NEXT:    vsll.vi v8, v8, 3
  ; CHECK-NEXT:    vadd.vx v8, v8, a1
  ; CHECK-NEXT:    vluxei64.v v8, (a2), v8, v0.t
  ; CHECK-NEXT:    vadd.vv v20, v8, v20, v0.t
  ; CHECK-NEXT:    vfmul.vv v8, v19, v19, v0.t
  ; CHECK-NEXT:    vfadd.vv v21, v19, v21, v0.t
  ; CHECK-NEXT:  .Lpcrel_hi8:
  ; CHECK-NEXT:    auipc a1, %pcrel_hi(.LCPI0_7)
  ; CHECK-NEXT:    addi a1, a1, %pcrel_lo(.Lpcrel_hi8)
  ; CHECK-NEXT:    vsetvli a2, zero, e64, m1, ta, ma
  ; CHECK-NEXT:    vlse64.v v22, (a1), zero
  ; CHECK-NEXT:  .Lpcrel_hi9:
  ; CHECK-NEXT:    auipc a1, %pcrel_hi(.LCPI0_8)
  ; CHECK-NEXT:    fld fa4, %pcrel_lo(.Lpcrel_hi9)(a1)
  ; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, ma
  ; CHECK-NEXT:    vmv1r.v v23, v19
  ; CHECK-NEXT:    vfmadd.vf v23, fa4, v22, v0.t
  ; CHECK-NEXT:    vfmadd.vv v23, v8, v21, v0.t
  ; CHECK-NEXT:    vfmul.vv v8, v8, v8, v0.t
  ; CHECK-NEXT:  .Lpcrel_hi10:
  ; CHECK-NEXT:    auipc a1, %pcrel_hi(.LCPI0_9)
  ; CHECK-NEXT:    addi a1, a1, %pcrel_lo(.Lpcrel_hi10)
  ; CHECK-NEXT:    vsetvli a2, zero, e64, m1, ta, ma
  ; CHECK-NEXT:    vlse64.v v21, (a1), zero
  ; CHECK-NEXT:  .Lpcrel_hi11:
  ; CHECK-NEXT:    auipc a1, %pcrel_hi(.LCPI0_10)
  ; CHECK-NEXT:    fld fa4, %pcrel_lo(.Lpcrel_hi11)(a1)
  ; CHECK-NEXT:    vsetvli zero, a0, e64, m1, ta, ma
  ; CHECK-NEXT:    vfmadd.vf v19, fa4, v21, v0.t
  ; CHECK-NEXT:    vfmadd.vv v19, v8, v23, v0.t
  ; CHECK-NEXT:    vsetvli zero, zero, e32, mf2, ta, ma
  ; CHECK-NEXT:    vmseq.vi v8, v14, 0, v0.t
  ; CHECK-NEXT:    vmand.mm v14, v12, v8
  ; CHECK-NEXT:    vmandn.mm v8, v12, v14
  ; CHECK-NEXT:    vsetvli zero, zero, e64, m1, ta, ma
  ; CHECK-NEXT:    vmv.v.v v21, v19
  ; CHECK-NEXT:    vmv1r.v v0, v8
  ; CHECK-NEXT:    vfmadd.vv v21, v20, v20, v0.t
  ; CHECK-NEXT:    vmand.mm v12, v12, v14
  ; CHECK-NEXT:    li a0, 1
  ; CHECK-NEXT:    slli a0, a0, 31
  ; CHECK-NEXT:    vmv.v.v v0, v12
  ; CHECK-NEXT:    vand.vx v13, v13, a0, v0.t
  ; CHECK-NEXT:    vmseq.vi v13, v13, 0, v0.t
  ; CHECK-NEXT:    vmand.mm v22, v12, v13
  ; CHECK-NEXT:    vmandn.mm v13, v12, v22
  ; CHECK-NEXT:    li a0, 511
  ; CHECK-NEXT:    slli a0, a0, 53
  ; CHECK-NEXT:    vmv.v.v v0, v13
  ; CHECK-NEXT:    vadd.vx v23, v20, a0, v0.t
  ; CHECK-NEXT:    vmv.v.v v24, v19
  ; CHECK-NEXT:    vfmadd.vv v24, v23, v23, v0.t
  ; CHECK-NEXT:    vmflt.vf v14, v24, fa5, v0.t
  ; CHECK-NEXT:    vmand.mm v25, v13, v14
  ; CHECK-NEXT:    vmand.mm v14, v13, v25
  ; CHECK-NEXT:    vmv.v.v v0, v14
  ; CHECK-NEXT:    vfsub.vv v26, v23, v24, v0.t
  ; CHECK-NEXT:    vmv.v.v v27, v19
  ; CHECK-NEXT:    vfmadd.vv v27, v23, v26, v0.t
  ; CHECK-NEXT:    vfadd.vf v23, v24, fa5, v0.t
  ; CHECK-NEXT:    vfrsub.vf v26, v23, fa5, v0.t
  ; CHECK-NEXT:  .Lpcrel_hi12:
  ; CHECK-NEXT:    auipc a0, %pcrel_hi(.LCPI0_11)
  ; CHECK-NEXT:    fld fa5, %pcrel_lo(.Lpcrel_hi12)(a0)
  ; CHECK-NEXT:    vfadd.vv v26, v24, v26, v0.t
  ; CHECK-NEXT:    vfadd.vv v26, v27, v26, v0.t
  ; CHECK-NEXT:    vfadd.vv v23, v23, v26, v0.t
  ; CHECK-NEXT:    vfadd.vf v23, v23, fa5, v0.t
  ; CHECK-NEXT:    fmv.d.x fa5, zero
  ; CHECK-NEXT:    vmfeq.vf v0, v23, fa5, v0.t
  ; CHECK-NEXT:    vmand.mm v0, v14, v0
  ; CHECK-NEXT:    vmerge.vim v23, v23, 0, v0
  ; CHECK-NEXT:  .Lpcrel_hi13:
  ; CHECK-NEXT:    auipc a0, %pcrel_hi(.LCPI0_12)
  ; CHECK-NEXT:    fld fa5, %pcrel_lo(.Lpcrel_hi13)(a0)
  ; CHECK-NEXT:    vmandn.mm v0, v13, v25
  ; CHECK-NEXT:    vmor.mm v13, v14, v0
  ; CHECK-NEXT:    vmerge.vvm v14, v23, v24, v0
  ; CHECK-NEXT:    vmv.v.v v0, v13
  ; CHECK-NEXT:    vfmul.vf v14, v14, fa5, v0.t
  ; CHECK-NEXT:    vmand.mm v12, v12, v22
  ; CHECK-NEXT:    li a0, -1009
  ; CHECK-NEXT:  .Lpcrel_hi14:
  ; CHECK-NEXT:    auipc a1, %pcrel_hi(.LCPI0_13)
  ; CHECK-NEXT:    fld fa5, %pcrel_lo(.Lpcrel_hi14)(a1)
  ; CHECK-NEXT:    slli a0, a0, 52
  ; CHECK-NEXT:    vmv.v.v v0, v12
  ; CHECK-NEXT:    vadd.vx v20, v20, a0, v0.t
  ; CHECK-NEXT:    vfmadd.vv v19, v20, v20, v0.t
  ; CHECK-NEXT:    vfmul.vf v19, v19, fa5, v0.t
  ; CHECK-NEXT:    vmand.mm v11, v11, v15
  ; CHECK-NEXT:    vmv1r.v v0, v10
  ; CHECK-NEXT:    vmerge.vvm v10, v18, v17, v0
  ; CHECK-NEXT:    vmv1r.v v0, v8
  ; CHECK-NEXT:    vmerge.vvm v8, v10, v21, v0
  ; CHECK-NEXT:    vmv.v.v v0, v11
  ; CHECK-NEXT:    vmerge.vim v8, v8, 0, v0
  ; CHECK-NEXT:    vmv.v.v v0, v12
  ; CHECK-NEXT:    vmerge.vvm v8, v8, v19, v0
  ; CHECK-NEXT:    vmv.v.v v0, v13
  ; CHECK-NEXT:    vmerge.vvm v8, v8, v14, v0
  ; CHECK-NEXT:    vmv1r.v v0, v9
  ; CHECK-NEXT:    vmerge.vvm v8, v8, v16, v0
  ; CHECK-NEXT:    csrr a0, vlenb
  ; CHECK-NEXT:    slli a0, a0, 3
  ; CHECK-NEXT:    add a0, a0, sp
  ; CHECK-NEXT:    vl8r.v v16, (a0) # Unknown-size Folded Reload
  ; CHECK-NEXT:    vl8r.v v24, (sp) # Unknown-size Folded Reload
  ; CHECK-NEXT:    csrr a0, vlenb
  ; CHECK-NEXT:    slli a0, a0, 4
  ; CHECK-NEXT:    add sp, sp, a0
  ; CHECK-NEXT:    ret
  entry:
    %trip.count.minus.1 = add i32 %vl, -1
    %broadcast.splatinsert = insertelement <vscale x 1 x i32> poison, i32 %trip.count.minus.1, i64 0
    %broadcast.splat = shufflevector <vscale x 1 x i32> %broadcast.splatinsert, <vscale x 1 x i32> poison, <vscale x 1 x i32> zeroinitializer
    %vp.stepvector = tail call <vscale x 1 x i32> @llvm.experimental.vp.stepvector.nxv1i32(<vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.icmp.ule = tail call <vscale x 1 x i1> @llvm.vp.icmp.nxv1i32(<vscale x 1 x i32> %vp.stepvector, <vscale x 1 x i32> %broadcast.splat, metadata !"ule", <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %0 = bitcast <vscale x 1 x double> %x to <vscale x 1 x i64>
    %vp.op = tail call <vscale x 1 x i64> @llvm.vp.lshr.nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64> shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 52, i64 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.cast = tail call <vscale x 1 x i32> @llvm.vp.trunc.nxv1i32.nxv1i64(<vscale x 1 x i64> %vp.op, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.op13 = tail call <vscale x 1 x i32> @llvm.vp.and.nxv1i32(<vscale x 1 x i32> %vp.cast, <vscale x 1 x i32> shufflevector (<vscale x 1 x i32> insertelement (<vscale x 1 x i32> poison, i32 2047, i64 0), <vscale x 1 x i32> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.op14 = tail call <vscale x 1 x i32> @llvm.vp.add.nxv1i32(<vscale x 1 x i32> %vp.op13, <vscale x 1 x i32> shufflevector (<vscale x 1 x i32> insertelement (<vscale x 1 x i32> poison, i32 -969, i64 0), <vscale x 1 x i32> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.op.icmp = tail call <vscale x 1 x i1> @llvm.vp.icmp.nxv1i32(<vscale x 1 x i32> %vp.op14, <vscale x 1 x i32> shufflevector (<vscale x 1 x i32> insertelement (<vscale x 1 x i32> poison, i32 63, i64 0), <vscale x 1 x i32> poison, <vscale x 1 x i32> zeroinitializer), metadata !"ult", <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.mask.not = tail call <vscale x 1 x i1> @llvm.vp.xor.nxv1i1(<vscale x 1 x i1> %vp.op.icmp, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.mask.select = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.icmp.ule, <vscale x 1 x i1> %vp.mask.not, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.op.icmp15 = tail call <vscale x 1 x i1> @llvm.vp.icmp.nxv1i32(<vscale x 1 x i32> %vp.op13, <vscale x 1 x i32> shufflevector (<vscale x 1 x i32> insertelement (<vscale x 1 x i32> poison, i32 969, i64 0), <vscale x 1 x i32> poison, <vscale x 1 x i32> zeroinitializer), metadata !"ult", <vscale x 1 x i1> %vp.mask.select, i32 %vl)
    %vp.op.select = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select, <vscale x 1 x i1> %vp.op.icmp15, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.mask.not16 = tail call <vscale x 1 x i1> @llvm.vp.xor.nxv1i1(<vscale x 1 x i1> %vp.op.select, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.mask.select17 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select, <vscale x 1 x i1> %vp.mask.not16, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.op.icmp18 = tail call <vscale x 1 x i1> @llvm.vp.icmp.nxv1i32(<vscale x 1 x i32> %vp.op13, <vscale x 1 x i32> shufflevector (<vscale x 1 x i32> insertelement (<vscale x 1 x i32> poison, i32 1033, i64 0), <vscale x 1 x i32> poison, <vscale x 1 x i32> zeroinitializer), metadata !"ult", <vscale x 1 x i1> %vp.mask.select17, i32 %vl)
    %vp.op.select19 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select17, <vscale x 1 x i1> %vp.op.icmp18, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.mask.not20 = tail call <vscale x 1 x i1> @llvm.vp.xor.nxv1i1(<vscale x 1 x i1> %vp.op.select19, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.mask.select21 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select17, <vscale x 1 x i1> %vp.mask.not20, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.op.icmp22 = tail call <vscale x 1 x i1> @llvm.vp.icmp.nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64> shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 -4503599627370496, i64 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer), metadata !"eq", <vscale x 1 x i1> %vp.mask.select21, i32 %vl)
    %vp.op.select23 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select21, <vscale x 1 x i1> %vp.op.icmp22, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.mask.not24 = tail call <vscale x 1 x i1> @llvm.vp.xor.nxv1i1(<vscale x 1 x i1> %vp.op.select23, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.mask.select25 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select21, <vscale x 1 x i1> %vp.mask.not24, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.op.icmp26 = tail call <vscale x 1 x i1> @llvm.vp.icmp.nxv1i32(<vscale x 1 x i32> %vp.op13, <vscale x 1 x i32> shufflevector (<vscale x 1 x i32> insertelement (<vscale x 1 x i32> poison, i32 2047, i64 0), <vscale x 1 x i32> poison, <vscale x 1 x i32> zeroinitializer), metadata !"eq", <vscale x 1 x i1> %vp.mask.select25, i32 %vl)
    %vp.op.select27 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select25, <vscale x 1 x i1> %vp.op.icmp26, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.mask.not28 = tail call <vscale x 1 x i1> @llvm.vp.xor.nxv1i1(<vscale x 1 x i1> %vp.op.select27, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.mask.select29 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select25, <vscale x 1 x i1> %vp.mask.not28, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.op.icmp30 = tail call <vscale x 1 x i1> @llvm.vp.icmp.nxv1i64(<vscale x 1 x i64> %0, <vscale x 1 x i64> shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 -1, i64 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer), metadata !"sgt", <vscale x 1 x i1> %vp.mask.select29, i32 %vl)
    %vp.op.select31 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select29, <vscale x 1 x i1> %vp.op.icmp30, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.select = tail call <vscale x 1 x double> @llvm.vp.select.nxv1f64(<vscale x 1 x i1> %vp.op.select31, <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 0x7FF0000000000000, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x double> zeroinitializer, i32 %vl)
    %vp.mask.select32 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select25, <vscale x 1 x i1> %vp.op.select27, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.op34 = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> %x, <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 1.000000e+00, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %vp.mask.select32, i32 %vl)
    %vp.mask.select35 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select, <vscale x 1 x i1> %vp.op.select, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.op37 = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> %x, <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 1.000000e+00, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %vp.mask.select35, i32 %vl)
    %vp.mask.select38 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.icmp.ule, <vscale x 1 x i1> %vp.op.icmp, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.mask.select39 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select17, <vscale x 1 x i1> %vp.op.select19, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.predphi = tail call <vscale x 1 x i32> @llvm.vp.select.nxv1i32(<vscale x 1 x i1> %vp.mask.select39, <vscale x 1 x i32> zeroinitializer, <vscale x 1 x i32> %vp.op13, i32 %vl)
    %vp.mask.or = tail call <vscale x 1 x i1> @llvm.vp.or.nxv1i1(<vscale x 1 x i1> %vp.mask.select39, <vscale x 1 x i1> %vp.mask.select38, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.op41 = tail call <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double> %x, <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 0x40671547652B82FE, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %vp.mask.or, i32 %vl)
    %vp.op42 = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> %vp.op41, <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 0x4338000000000000, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %vp.mask.or, i32 %vl)
    %1 = bitcast <vscale x 1 x double> %vp.op42 to <vscale x 1 x i64>
    %vp.op43 = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> %vp.op42, <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 0xC338000000000000, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %vp.mask.or, i32 %vl)
    %2 = tail call <vscale x 1 x double> @llvm.vp.fmuladd.nxv1f64(<vscale x 1 x double> %vp.op43, <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 0xBF762E42FEFA0000, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x double> %x, <vscale x 1 x i1> %vp.mask.or, i32 %vl)
    %3 = tail call <vscale x 1 x double> @llvm.vp.fmuladd.nxv1f64(<vscale x 1 x double> %vp.op43, <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 0xBD0CF79ABC9E3B3A, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x double> %2, <vscale x 1 x i1> %vp.mask.or, i32 %vl)
    %vp.op45 = tail call <vscale x 1 x i64> @llvm.vp.shl.nxv1i64(<vscale x 1 x i64> %1, <vscale x 1 x i64> shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 1, i64 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %vp.mask.or, i32 %vl)
    %vp.op46 = tail call <vscale x 1 x i64> @llvm.vp.and.nxv1i64(<vscale x 1 x i64> %vp.op45, <vscale x 1 x i64> shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 254, i64 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %vp.mask.or, i32 %vl)
    %vp.op47 = tail call <vscale x 1 x i64> @llvm.vp.shl.nxv1i64(<vscale x 1 x i64> %1, <vscale x 1 x i64> shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 45, i64 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %vp.mask.or, i32 %vl)
    %4 = tail call <vscale x 1 x i64> @llvm.vp.shl.nxv1i64(<vscale x 1 x i64> %vp.op46, <vscale x 1 x i64> shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 3, i64 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %5 = tail call <vscale x 1 x i64> @llvm.vp.add.nxv1i64(<vscale x 1 x i64> shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 112, i64 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i64> %4, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %6 = tail call <vscale x 1 x i64> @llvm.vp.ptrtoint.nxv1i64.nxv1p0(<vscale x 1 x ptr> shufflevector (<vscale x 1 x ptr> insertelement (<vscale x 1 x ptr> poison, ptr @__exp_data, i64 0), <vscale x 1 x ptr> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %7 = tail call <vscale x 1 x i64> @llvm.vp.add.nxv1i64(<vscale x 1 x i64> %6, <vscale x 1 x i64> %5, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %8 = tail call <vscale x 1 x ptr> @llvm.vp.inttoptr.nxv1p0.nxv1i64(<vscale x 1 x i64> %7, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.gather = tail call <vscale x 1 x double> @llvm.vp.gather.nxv1f64.nxv1p0(<vscale x 1 x ptr> %8, <vscale x 1 x i1> %vp.mask.or, i32 %vl), !tbaa !7
    %vp.op48 = tail call <vscale x 1 x i64> @llvm.vp.or.nxv1i64(<vscale x 1 x i64> %vp.op46, <vscale x 1 x i64> shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 1, i64 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %vp.mask.or, i32 %vl)
    %9 = tail call <vscale x 1 x i64> @llvm.vp.shl.nxv1i64(<vscale x 1 x i64> %vp.op48, <vscale x 1 x i64> shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 3, i64 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %10 = tail call <vscale x 1 x i64> @llvm.vp.add.nxv1i64(<vscale x 1 x i64> shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 112, i64 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i64> %9, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %11 = tail call <vscale x 1 x i64> @llvm.vp.add.nxv1i64(<vscale x 1 x i64> %6, <vscale x 1 x i64> %10, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %12 = tail call <vscale x 1 x ptr> @llvm.vp.inttoptr.nxv1p0.nxv1i64(<vscale x 1 x i64> %11, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.gather49 = tail call <vscale x 1 x i64> @llvm.vp.gather.nxv1i64.nxv1p0(<vscale x 1 x ptr> %12, <vscale x 1 x i1> %vp.mask.or, i32 %vl), !tbaa !7
    %vp.op50 = tail call <vscale x 1 x i64> @llvm.vp.add.nxv1i64(<vscale x 1 x i64> %vp.gather49, <vscale x 1 x i64> %vp.op47, <vscale x 1 x i1> %vp.mask.or, i32 %vl)
    %vp.op51 = tail call <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double> %3, <vscale x 1 x double> %3, <vscale x 1 x i1> %vp.mask.or, i32 %vl)
    %vp.op52 = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> %3, <vscale x 1 x double> %vp.gather, <vscale x 1 x i1> %vp.mask.or, i32 %vl)
    %13 = tail call <vscale x 1 x double> @llvm.vp.fmuladd.nxv1f64(<vscale x 1 x double> %3, <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 0x3FC555555555543C, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 0x3FDFFFFFFFFFFDBD, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %vp.mask.or, i32 %vl)
    %14 = tail call <vscale x 1 x double> @llvm.vp.fmuladd.nxv1f64(<vscale x 1 x double> %vp.op51, <vscale x 1 x double> %13, <vscale x 1 x double> %vp.op52, <vscale x 1 x i1> %vp.mask.or, i32 %vl)
    %vp.op53 = tail call <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double> %vp.op51, <vscale x 1 x double> %vp.op51, <vscale x 1 x i1> %vp.mask.or, i32 %vl)
    %15 = tail call <vscale x 1 x double> @llvm.vp.fmuladd.nxv1f64(<vscale x 1 x double> %3, <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 0x3F81111167A4D017, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 0x3FA55555CF172B91, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %vp.mask.or, i32 %vl)
    %16 = tail call <vscale x 1 x double> @llvm.vp.fmuladd.nxv1f64(<vscale x 1 x double> %vp.op53, <vscale x 1 x double> %15, <vscale x 1 x double> %14, <vscale x 1 x i1> %vp.mask.or, i32 %vl)
    %vp.op.icmp54 = tail call <vscale x 1 x i1> @llvm.vp.icmp.nxv1i32(<vscale x 1 x i32> %vp.predphi, <vscale x 1 x i32> zeroinitializer, metadata !"eq", <vscale x 1 x i1> %vp.mask.or, i32 %vl)
    %vp.op.select55 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.or, <vscale x 1 x i1> %vp.op.icmp54, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %17 = bitcast <vscale x 1 x i64> %vp.op50 to <vscale x 1 x double>
    %vp.mask.not56 = tail call <vscale x 1 x i1> @llvm.vp.xor.nxv1i1(<vscale x 1 x i1> %vp.op.select55, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.mask.select57 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.or, <vscale x 1 x i1> %vp.mask.not56, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %18 = tail call <vscale x 1 x double> @llvm.vp.fmuladd.nxv1f64(<vscale x 1 x double> %17, <vscale x 1 x double> %16, <vscale x 1 x double> %17, <vscale x 1 x i1> %vp.mask.select57, i32 %vl)
    %vp.mask.select58 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.or, <vscale x 1 x i1> %vp.op.select55, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.op59 = tail call <vscale x 1 x i64> @llvm.vp.and.nxv1i64(<vscale x 1 x i64> %1, <vscale x 1 x i64> shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 2147483648, i64 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %vp.mask.select58, i32 %vl)
    %vp.op.icmp60 = tail call <vscale x 1 x i1> @llvm.vp.icmp.nxv1i64(<vscale x 1 x i64> %vp.op59, <vscale x 1 x i64> zeroinitializer, metadata !"eq", <vscale x 1 x i1> %vp.mask.select58, i32 %vl)
    %vp.op.select61 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select58, <vscale x 1 x i1> %vp.op.icmp60, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.mask.not62 = tail call <vscale x 1 x i1> @llvm.vp.xor.nxv1i1(<vscale x 1 x i1> %vp.op.select61, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.mask.select63 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select58, <vscale x 1 x i1> %vp.mask.not62, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.op64 = tail call <vscale x 1 x i64> @llvm.vp.add.nxv1i64(<vscale x 1 x i64> %vp.op50, <vscale x 1 x i64> shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 4602678819172646912, i64 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %vp.mask.select63, i32 %vl)
    %19 = bitcast <vscale x 1 x i64> %vp.op64 to <vscale x 1 x double>
    %20 = tail call <vscale x 1 x double> @llvm.vp.fmuladd.nxv1f64(<vscale x 1 x double> %19, <vscale x 1 x double> %16, <vscale x 1 x double> %19, <vscale x 1 x i1> %vp.mask.select63, i32 %vl)
    %vp.op.fcmp = tail call <vscale x 1 x i1> @llvm.vp.fcmp.nxv1f64(<vscale x 1 x double> %20, <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 1.000000e+00, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), metadata !"olt", <vscale x 1 x i1> %vp.mask.select63, i32 %vl)
    %vp.op.select65 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select63, <vscale x 1 x i1> %vp.op.fcmp, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.mask.select66 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select63, <vscale x 1 x i1> %vp.op.select65, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.op67 = tail call <vscale x 1 x double> @llvm.vp.fsub.nxv1f64(<vscale x 1 x double> %19, <vscale x 1 x double> %20, <vscale x 1 x i1> %vp.mask.select66, i32 %vl)
    %21 = tail call <vscale x 1 x double> @llvm.vp.fmuladd.nxv1f64(<vscale x 1 x double> %19, <vscale x 1 x double> %16, <vscale x 1 x double> %vp.op67, <vscale x 1 x i1> %vp.mask.select66, i32 %vl)
    %vp.op68 = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> %20, <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 1.000000e+00, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %vp.mask.select66, i32 %vl)
    %vp.op69 = tail call <vscale x 1 x double> @llvm.vp.fsub.nxv1f64(<vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 1.000000e+00, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x double> %vp.op68, <vscale x 1 x i1> %vp.mask.select66, i32 %vl)
    %vp.op70 = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> %20, <vscale x 1 x double> %vp.op69, <vscale x 1 x i1> %vp.mask.select66, i32 %vl)
    %vp.op71 = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> %21, <vscale x 1 x double> %vp.op70, <vscale x 1 x i1> %vp.mask.select66, i32 %vl)
    %vp.op72 = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> %vp.op68, <vscale x 1 x double> %vp.op71, <vscale x 1 x i1> %vp.mask.select66, i32 %vl)
    %vp.op73 = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> %vp.op72, <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double -1.000000e+00, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %vp.mask.select66, i32 %vl)
    %vp.op.fcmp74 = tail call <vscale x 1 x i1> @llvm.vp.fcmp.nxv1f64(<vscale x 1 x double> %vp.op73, <vscale x 1 x double> zeroinitializer, metadata !"oeq", <vscale x 1 x i1> %vp.mask.select66, i32 %vl)
    %vp.op.select75 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select66, <vscale x 1 x i1> %vp.op.fcmp74, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.select76 = tail call <vscale x 1 x double> @llvm.vp.select.nxv1f64(<vscale x 1 x i1> %vp.op.select75, <vscale x 1 x double> zeroinitializer, <vscale x 1 x double> %vp.op73, i32 %vl)
    %vp.mask.not77 = tail call <vscale x 1 x i1> @llvm.vp.xor.nxv1i1(<vscale x 1 x i1> %vp.op.select65, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.mask.select78 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select63, <vscale x 1 x i1> %vp.mask.not77, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.predphi79 = tail call <vscale x 1 x double> @llvm.vp.select.nxv1f64(<vscale x 1 x i1> %vp.mask.select78, <vscale x 1 x double> %20, <vscale x 1 x double> %vp.select76, i32 %vl)
    %vp.mask.or80 = tail call <vscale x 1 x i1> @llvm.vp.or.nxv1i1(<vscale x 1 x i1> %vp.mask.select66, <vscale x 1 x i1> %vp.mask.select78, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.op81 = tail call <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double> %vp.predphi79, <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 0x10000000000000, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %vp.mask.or80, i32 %vl)
    %vp.mask.select82 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select58, <vscale x 1 x i1> %vp.op.select61, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.op83 = tail call <vscale x 1 x i64> @llvm.vp.add.nxv1i64(<vscale x 1 x i64> %vp.op50, <vscale x 1 x i64> shufflevector (<vscale x 1 x i64> insertelement (<vscale x 1 x i64> poison, i64 -4544132024016830464, i64 0), <vscale x 1 x i64> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %vp.mask.select82, i32 %vl)
    %22 = bitcast <vscale x 1 x i64> %vp.op83 to <vscale x 1 x double>
    %23 = tail call <vscale x 1 x double> @llvm.vp.fmuladd.nxv1f64(<vscale x 1 x double> %22, <vscale x 1 x double> %16, <vscale x 1 x double> %22, <vscale x 1 x i1> %vp.mask.select82, i32 %vl)
    %vp.op84 = tail call <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double> %23, <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 0x7F00000000000000, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %vp.mask.select82, i32 %vl)
    %vp.mask.select85 = tail call <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1> %vp.mask.select21, <vscale x 1 x i1> %vp.op.select23, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %vl)
    %vp.predphi86 = tail call <vscale x 1 x double> @llvm.vp.select.nxv1f64(<vscale x 1 x i1> %vp.mask.select32, <vscale x 1 x double> %vp.op34, <vscale x 1 x double> %vp.op37, i32 %vl)
    %vp.predphi87 = tail call <vscale x 1 x double> @llvm.vp.select.nxv1f64(<vscale x 1 x i1> %vp.mask.select57, <vscale x 1 x double> %18, <vscale x 1 x double> %vp.predphi86, i32 %vl)
    %vp.predphi88 = tail call <vscale x 1 x double> @llvm.vp.select.nxv1f64(<vscale x 1 x i1> %vp.mask.select85, <vscale x 1 x double> zeroinitializer, <vscale x 1 x double> %vp.predphi87, i32 %vl)
    %vp.predphi89 = tail call <vscale x 1 x double> @llvm.vp.select.nxv1f64(<vscale x 1 x i1> %vp.mask.select82, <vscale x 1 x double> %vp.op84, <vscale x 1 x double> %vp.predphi88, i32 %vl)
    %vp.predphi90 = tail call <vscale x 1 x double> @llvm.vp.select.nxv1f64(<vscale x 1 x i1> %vp.mask.or80, <vscale x 1 x double> %vp.op81, <vscale x 1 x double> %vp.predphi89, i32 %vl)
    %vp.predphi91 = tail call <vscale x 1 x double> @llvm.vp.select.nxv1f64(<vscale x 1 x i1> %vp.mask.select29, <vscale x 1 x double> %vp.select, <vscale x 1 x double> %vp.predphi90, i32 %vl)
    ret <vscale x 1 x double> %vp.predphi91
  }

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare i32 @llvm.vscale.i32() #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
  declare void @llvm.assume(i1 noundef) #2

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x i32> @llvm.experimental.vp.stepvector.nxv1i32(<vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x i1> @llvm.vp.icmp.nxv1i32(<vscale x 1 x i32>, <vscale x 1 x i32>, metadata, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x i64> @llvm.vp.lshr.nxv1i64(<vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x i32> @llvm.vp.trunc.nxv1i32.nxv1i64(<vscale x 1 x i64>, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x i32> @llvm.vp.and.nxv1i32(<vscale x 1 x i32>, <vscale x 1 x i32>, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x i32> @llvm.vp.add.nxv1i32(<vscale x 1 x i32>, <vscale x 1 x i32>, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x i1> @llvm.vp.xor.nxv1i1(<vscale x 1 x i1>, <vscale x 1 x i1>, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x i1> @llvm.vp.and.nxv1i1(<vscale x 1 x i1>, <vscale x 1 x i1>, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x i1> @llvm.vp.icmp.nxv1i64(<vscale x 1 x i64>, <vscale x 1 x i64>, metadata, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x double> @llvm.vp.select.nxv1f64(<vscale x 1 x i1>, <vscale x 1 x double>, <vscale x 1 x double>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x i32> @llvm.vp.select.nxv1i32(<vscale x 1 x i1>, <vscale x 1 x i32>, <vscale x 1 x i32>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x i1> @llvm.vp.or.nxv1i1(<vscale x 1 x i1>, <vscale x 1 x i1>, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x double> @llvm.vp.fmuladd.nxv1f64(<vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x i64> @llvm.vp.shl.nxv1i64(<vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x i64> @llvm.vp.and.nxv1i64(<vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(read)
  declare <vscale x 1 x double> @llvm.vp.gather.nxv1f64.nxv1p0(<vscale x 1 x ptr>, <vscale x 1 x i1>, i32) #3

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x i64> @llvm.vp.or.nxv1i64(<vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(read)
  declare <vscale x 1 x i64> @llvm.vp.gather.nxv1i64.nxv1p0(<vscale x 1 x ptr>, <vscale x 1 x i1>, i32) #3

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x i64> @llvm.vp.add.nxv1i64(<vscale x 1 x i64>, <vscale x 1 x i64>, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x i1> @llvm.vp.fcmp.nxv1f64(<vscale x 1 x double>, <vscale x 1 x double>, metadata, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x double> @llvm.vp.fsub.nxv1f64(<vscale x 1 x double>, <vscale x 1 x double>, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x i64> @llvm.vp.ptrtoint.nxv1i64.nxv1p0(<vscale x 1 x ptr>, <vscale x 1 x i1>, i32) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <vscale x 1 x ptr> @llvm.vp.inttoptr.nxv1p0.nxv1i64(<vscale x 1 x i64>, <vscale x 1 x i1>, i32) #1

  attributes #0 = { mustprogress nofree nosync nounwind willreturn memory(none) uwtable vscale_range(1,1024) "_ZGVENk1v_musl_exp" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+c,+d,+f,+m,+zepi,+zicsr,+zve32f,+zve32x,+zve64d,+zve64f,+zve64x,+zvl32b,+zvl64b,-e,-experimental-smaia,-experimental-ssaia,-experimental-zca,-experimental-zcb,-experimental-zcd,-experimental-zcf,-experimental-zcmp,-experimental-zcmt,-experimental-zfa,-experimental-zicond,-experimental-zihintntl,-experimental-ztso,-experimental-zvbb,-experimental-zvbc,-experimental-zvfh,-experimental-zvkg,-experimental-zvkn,-experimental-zvkned,-experimental-zvkng,-experimental-zvknha,-experimental-zvknhb,-experimental-zvks,-experimental-zvksed,-experimental-zvksg,-experimental-zvksh,-experimental-zvkt,-h,-relax,-save-restore,-svinval,-svnapot,-svpbmt,-v,-xsfvcp,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zdinx,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zicbom,-zicbop,-zicboz,-zicntr,-zifencei,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl4096b,-zvl512b,-zvl65536b,-zvl8192b,+m,+a,+f,+d,+zepi,+m,+a,+f,+d,+zepi,+m,+a,+f,+d,+zepi,+m,+a,+f,+d,+zepi" }
  attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) "target-features"="+m,+a,+f,+d,+zepi" }
  attributes #2 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) "target-features"="+m,+a,+f,+d,+zepi" }
  attributes #3 = { nocallback nofree nosync nounwind willreturn memory(read) "target-features"="+m,+a,+f,+d,+zepi" }

  !llvm.module.flags = !{!0, !1, !2, !3, !4, !5}
  !llvm.ident = !{!6}

  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 1, !"target-abi", !"lp64d"}
  !2 = !{i32 8, !"PIC Level", i32 2}
  !3 = !{i32 7, !"PIE Level", i32 2}
  !4 = !{i32 7, !"uwtable", i32 2}
  !5 = !{i32 8, !"SmallDataLimit", i32 8}
  !6 = !{!"clang version 17.0.0"}
  !7 = !{!8, !8, i64 0}
  !8 = !{!"long", !9, i64 0}
  !9 = !{!"omnipotent char", !10, i64 0}
  !10 = !{!"Simple C/C++ TBAA"}

...
---
name:            _ZGVENk1v_musl_exp
alignment:       2
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$v8', virtual-reg: '' }
  - { reg: '$x10', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:
  - id:              0
    value:           double 0x7FF0000000000000
    alignment:       8
    isTargetSpecific: false
  - id:              1
    value:           'double 1.000000e+00'
    alignment:       8
    isTargetSpecific: false
  - id:              2
    value:           double 0x40671547652B82FE
    alignment:       8
    isTargetSpecific: false
  - id:              3
    value:           double 0x4338000000000000
    alignment:       8
    isTargetSpecific: false
  - id:              4
    value:           double 0xC338000000000000
    alignment:       8
    isTargetSpecific: false
  - id:              5
    value:           double 0xBF762E42FEFA0000
    alignment:       8
    isTargetSpecific: false
  - id:              6
    value:           double 0xBD0CF79ABC9E3B3A
    alignment:       8
    isTargetSpecific: false
  - id:              7
    value:           double 0x3FDFFFFFFFFFFDBD
    alignment:       8
    isTargetSpecific: false
  - id:              8
    value:           double 0x3FC555555555543C
    alignment:       8
    isTargetSpecific: false
  - id:              9
    value:           double 0x3FA55555CF172B91
    alignment:       8
    isTargetSpecific: false
  - id:              10
    value:           double 0x3F81111167A4D017
    alignment:       8
    isTargetSpecific: false
  - id:              11
    value:           'double -1.000000e+00'
    alignment:       8
    isTargetSpecific: false
  - id:              12
    value:           double 0x10000000000000
    alignment:       8
    isTargetSpecific: false
  - id:              13
    value:           double 0x7F00000000000000
    alignment:       8
    isTargetSpecific: false
machineFunctionInfo:
  varArgsFrameIndex: 0
  varArgsSaveSize: 0
body:             |
  bb.0.entry:
    liveins: $v8, $x10

    renamable $x11 = ADDIW renamable $x10, -1
    dead $x0 = PseudoVSETVLI renamable $x10, 215 /* e32, mf2, ta, ma */, implicit-def $vl, implicit-def $vtype
    renamable $v9 = PseudoVID_V_MF2 undef renamable $v9, $noreg, 5 /* e32 */, 1 /* ta, mu */, implicit $vl, implicit $vtype
    renamable $v14 = PseudoVMSLEU_VX_MF2 killed renamable $v9, killed renamable $x11, $noreg, 5 /* e32 */, implicit $vl, implicit $vtype
    renamable $x11 = ADDI $x0, 52
    renamable $v9 = PseudoVNSRL_WX_MF2 undef renamable $v9, renamable $v8, killed renamable $x11, $noreg, 5 /* e32 */, 0 /* tu, mu */, implicit $vl, implicit $vtype
    renamable $x11 = ADDI $x0, 2047
    renamable $v19 = PseudoVAND_VX_MF2 undef renamable $v19, killed renamable $v9, renamable $x11, $noreg, 5 /* e32 */, 1 /* ta, mu */, implicit $vl, implicit $vtype
    renamable $x12 = ADDI $x0, -969
    renamable $v9 = PseudoVADD_VX_MF2 undef renamable $v9, renamable $v19, killed renamable $x12, $noreg, 5 /* e32 */, 1 /* ta, mu */, implicit $vl, implicit $vtype
    renamable $x12 = ADDI $x0, 63
    renamable $v20 = PseudoVMSLTU_VX_MF2 killed renamable $v9, killed renamable $x12, $noreg, 5 /* e32 */, implicit $vl, implicit $vtype
    renamable $v12 = PseudoVMANDN_MM_MF8 renamable $v14, renamable $v20, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    renamable $x12 = ADDI $x0, 969
    $v0 = COPY renamable $v12
    renamable $v9 = PseudoVMSLTU_VX_MF2_MASK undef renamable $v9, renamable $v19, killed renamable $x12, $v0, $noreg, 5 /* e32 */, implicit $vl, implicit $vtype
    renamable $v17 = PseudoVMAND_MM_MF8 renamable $v12, killed renamable $v9, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    renamable $v13 = PseudoVMANDN_MM_MF8 renamable $v12, renamable $v17, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    renamable $x12 = ADDI $x0, 1033
    $v0 = COPY renamable $v13
    renamable $v9 = PseudoVMSLTU_VX_MF2_MASK undef renamable $v9, renamable $v19, killed renamable $x12, $v0, $noreg, 5 /* e32 */, implicit $vl, implicit $vtype
    renamable $v21 = PseudoVMAND_MM_MF8 renamable $v13, killed renamable $v9, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    renamable $v11 = PseudoVMANDN_MM_MF8 renamable $v13, renamable $v21, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    renamable $x12 = ADDI $x0, -1
    renamable $x12 = SLLI killed renamable $x12, 52
    dead $x0 = PseudoVSETVLIX0 killed $x0, 216 /* e64, m1, ta, ma */, implicit-def $vl, implicit-def $vtype, implicit $vl
    $v0 = COPY renamable $v11
    renamable $v9 = PseudoVMSEQ_VX_M1_MASK undef renamable $v9, renamable $v8, killed renamable $x12, $v0, $noreg, 6 /* e64 */, implicit $vl, implicit $vtype
    renamable $v15 = PseudoVMAND_MM_MF8 renamable $v11, killed renamable $v9, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    renamable $v10 = PseudoVMANDN_MM_MF8 renamable $v11, renamable $v15, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    dead $x0 = PseudoVSETVLIX0 killed $x0, 215 /* e32, mf2, ta, ma */, implicit-def $vl, implicit-def $vtype, implicit $vl
    $v0 = COPY renamable $v10
    renamable $v9 = PseudoVMSEQ_VX_MF2_MASK undef renamable $v9, renamable $v19, killed renamable $x11, $v0, $noreg, 5 /* e32 */, implicit $vl, implicit $vtype
    renamable $v18 = PseudoVMAND_MM_MF8 renamable $v10, killed renamable $v9, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    renamable $v9 = PseudoVMANDN_MM_MF8 renamable $v10, renamable $v18, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    dead $x0 = PseudoVSETVLIX0 killed $x0, 216 /* e64, m1, ta, ma */, implicit-def $vl, implicit-def $vtype, implicit $vl
    $v0 = COPY renamable $v9
    renamable $v0 = PseudoVMSGT_VI_M1_MASK undef renamable $v0, renamable $v8, -1, $v0, $noreg, 6 /* e64 */, implicit $vl, implicit $vtype
    renamable $v0 = PseudoVMAND_MM_MF8 renamable $v9, killed renamable $v0, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    dead renamable $x11 = PseudoVSETVLIX0 $x0, 216 /* e64, m1, ta, ma */, implicit-def $vl, implicit-def $vtype
    renamable $v16 = PseudoVMV_V_I_M1 undef renamable $v16, 0, -1, 6 /* e64 */, 0 /* tu, mu */, implicit $vl, implicit $vtype
    renamable $x11 = AUIPC target-flags(riscv-pcrel-hi) %const.0, pre-instr-symbol <mcsymbol .Lpcrel_hi0>
    renamable $f14_d = FLD killed renamable $x11, target-flags(riscv-pcrel-lo) <mcsymbol .Lpcrel_hi0> :: (load (s64) from constant-pool)
    dead $x0 = PseudoVSETVLI renamable $x10, 216 /* e64, m1, ta, ma */, implicit-def $vl, implicit-def $vtype
    renamable $x11 = AUIPC target-flags(riscv-pcrel-hi) %const.1, pre-instr-symbol <mcsymbol .Lpcrel_hi1>
    renamable $f15_d = FLD killed renamable $x11, target-flags(riscv-pcrel-lo) <mcsymbol .Lpcrel_hi1> :: (load (s64) from constant-pool)
    renamable $v16 = PseudoVFMERGE_VF64M_M1_TU undef renamable $v16, killed renamable $v16, killed renamable $f14_d, $v0, $noreg, 6 /* e64 */, implicit $vl, implicit $vtype
    renamable $v10 = PseudoVMAND_MM_MF8 killed renamable $v10, killed renamable $v18, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    renamable $v12 = PseudoVMAND_MM_MF8 killed renamable $v12, killed renamable $v17, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v10
    renamable $v17 = nofpexcept PseudoVFADD_VF64_M1_MASK undef renamable $v17, renamable $v8, renamable $f15_d, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $frm, implicit $vl, implicit $vtype
    $v0 = COPY killed renamable $v12
    renamable $v18 = nofpexcept PseudoVFADD_VF64_M1_MASK undef renamable $v18, renamable $v8, renamable $f15_d, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $frm, implicit $vl, implicit $vtype
    renamable $v12 = PseudoVMAND_MM_MF8 killed renamable $v14, killed renamable $v20, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    renamable $v0 = PseudoVMAND_MM_MF8 killed renamable $v13, killed renamable $v21, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    dead $x0 = PseudoVSETVLIX0 killed $x0, 215 /* e32, mf2, ta, ma */, implicit-def $vl, implicit-def $vtype, implicit $vl
    renamable $v14 = PseudoVMERGE_VIM_MF2_TU undef renamable $v14, killed renamable $v19, 0, $v0, $noreg, 5 /* e32 */, implicit $vl, implicit $vtype
    renamable $x11 = AUIPC target-flags(riscv-pcrel-hi) %const.2, pre-instr-symbol <mcsymbol .Lpcrel_hi2>
    renamable $f14_d = FLD killed renamable $x11, target-flags(riscv-pcrel-lo) <mcsymbol .Lpcrel_hi2> :: (load (s64) from constant-pool)
    renamable $x11 = AUIPC target-flags(riscv-pcrel-hi) %const.3, pre-instr-symbol <mcsymbol .Lpcrel_hi3>
    renamable $f13_d = FLD killed renamable $x11, target-flags(riscv-pcrel-lo) <mcsymbol .Lpcrel_hi3> :: (load (s64) from constant-pool)
    renamable $v12 = PseudoVMOR_MM_MF8 killed renamable $v0, killed renamable $v12, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    dead $x0 = PseudoVSETVLIX0 $x0, 216 /* e64, m1, ta, ma */, implicit-def $vl, implicit-def $vtype, implicit $vl
    $v0 = COPY renamable $v12
    renamable $v13 = nofpexcept PseudoVFMUL_VF64_M1_MASK undef renamable $v13, renamable $v8, killed renamable $f14_d, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $frm, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v12
    renamable $v13 = nofpexcept PseudoVFADD_VF64_M1_MASK undef renamable $v13, killed renamable $v13, killed renamable $f13_d, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $frm, implicit $vl, implicit $vtype
    renamable $x11 = AUIPC target-flags(riscv-pcrel-hi) %const.4, pre-instr-symbol <mcsymbol .Lpcrel_hi4>
    renamable $f14_d = FLD killed renamable $x11, target-flags(riscv-pcrel-lo) <mcsymbol .Lpcrel_hi4> :: (load (s64) from constant-pool)
    renamable $x11 = AUIPC target-flags(riscv-pcrel-hi) %const.5, pre-instr-symbol <mcsymbol .Lpcrel_hi5>
    renamable $f13_d = FLD killed renamable $x11, target-flags(riscv-pcrel-lo) <mcsymbol .Lpcrel_hi5> :: (load (s64) from constant-pool)
    renamable $x11 = AUIPC target-flags(riscv-pcrel-hi) %const.6, pre-instr-symbol <mcsymbol .Lpcrel_hi6>
    renamable $f12_d = FLD killed renamable $x11, target-flags(riscv-pcrel-lo) <mcsymbol .Lpcrel_hi6> :: (load (s64) from constant-pool)
    $v0 = COPY renamable $v12
    renamable $v19 = nofpexcept PseudoVFADD_VF64_M1_MASK undef renamable $v19, renamable $v13, killed renamable $f14_d, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $frm, implicit $vl, implicit $vtype
    renamable $v20 = COPY renamable $v19
    $v0 = COPY renamable $v12
    renamable $v20 = nofpexcept PseudoVFMADD_VF64_M1_MASK killed renamable $v20, killed renamable $f13_d, killed renamable $v8, $v0, $noreg, 6 /* e64 */, 3 /* ta, ma */, implicit $frm, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v12
    renamable $v19 = nofpexcept PseudoVFMADD_VF64_M1_MASK killed renamable $v19, killed renamable $f12_d, killed renamable $v20, $v0, $noreg, 6 /* e64 */, 3 /* ta, ma */, implicit $frm, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v12
    renamable $v8 = PseudoVSLL_VI_M1_MASK undef renamable $v8, renamable $v13, 1, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $vl, implicit $vtype
    renamable $x11 = ADDI $x0, 254
    $v0 = COPY renamable $v12
    renamable $v8 = PseudoVAND_VX_M1_MASK undef renamable $v8, killed renamable $v8, killed renamable $x11, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $vl, implicit $vtype
    renamable $x11 = ADDI $x0, 45
    $v0 = COPY renamable $v12
    renamable $v20 = PseudoVSLL_VX_M1_MASK undef renamable $v20, renamable $v13, killed renamable $x11, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $vl, implicit $vtype
    renamable $v0 = PseudoVSLL_VI_M1 undef renamable $v0, renamable $v8, 3, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $vl, implicit $vtype
    renamable $x11 = ADDI $x0, 112
    renamable $v21 = PseudoVADD_VX_M1 undef renamable $v21, killed renamable $v0, renamable $x11, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $vl, implicit $vtype
    renamable $x12 = AUIPC target-flags(riscv-pcrel-hi) @__exp_data, pre-instr-symbol <mcsymbol .Lpcrel_hi7>
    renamable $x12 = ADDI killed renamable $x12, target-flags(riscv-pcrel-lo) <mcsymbol .Lpcrel_hi7>
    $v0 = COPY renamable $v12
    renamable $v21 = PseudoVLUXEI64_V_M1_M1_MASK undef renamable $v21, renamable $x12, killed renamable $v21, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $vl, implicit $vtype :: (load unknown-size, align 8, !tbaa !7)
    $v0 = COPY renamable $v12
    renamable $v8 = PseudoVOR_VI_M1_MASK undef renamable $v8, killed renamable $v8, 1, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $vl, implicit $vtype
    renamable $v8 = PseudoVSLL_VI_M1 undef renamable $v8, killed renamable $v8, 3, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $vl, implicit $vtype
    renamable $v8 = PseudoVADD_VX_M1 undef renamable $v8, killed renamable $v8, killed renamable $x11, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v12
    renamable $v8 = PseudoVLUXEI64_V_M1_M1_MASK undef renamable $v8, killed renamable $x12, killed renamable $v8, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $vl, implicit $vtype :: (load unknown-size, align 8, !tbaa !7)
    $v0 = COPY renamable $v12
    renamable $v20 = PseudoVADD_VV_M1_MASK undef renamable $v20, killed renamable $v8, killed renamable $v20, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v12
    renamable $v8 = nofpexcept PseudoVFMUL_VV_M1_MASK undef renamable $v8, renamable $v19, renamable $v19, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $frm, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v12
    renamable $v21 = nofpexcept PseudoVFADD_VV_M1_MASK undef renamable $v21, renamable $v19, killed renamable $v21, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $frm, implicit $vl, implicit $vtype
    renamable $x11 = AUIPC target-flags(riscv-pcrel-hi) %const.7, pre-instr-symbol <mcsymbol .Lpcrel_hi8>
    renamable $x11 = ADDI killed renamable $x11, target-flags(riscv-pcrel-lo) <mcsymbol .Lpcrel_hi8>
    dead renamable $x12 = PseudoVSETVLIX0 $x0, 216 /* e64, m1, ta, ma */, implicit-def $vl, implicit-def $vtype
    renamable $v22 = PseudoVLSE64_V_M1 undef renamable $v22, killed renamable $x11, $x0, -1, 6 /* e64 */, 3 /* ta, ma */, implicit $vl, implicit $vtype :: (load (s64) from constant-pool)
    renamable $x11 = AUIPC target-flags(riscv-pcrel-hi) %const.8, pre-instr-symbol <mcsymbol .Lpcrel_hi9>
    renamable $f14_d = FLD killed renamable $x11, target-flags(riscv-pcrel-lo) <mcsymbol .Lpcrel_hi9> :: (load (s64) from constant-pool)
    dead $x0 = PseudoVSETVLI renamable $x10, 216 /* e64, m1, ta, ma */, implicit-def $vl, implicit-def $vtype
    renamable $v23 = COPY renamable $v19
    $v0 = COPY renamable $v12
    renamable $v23 = nofpexcept PseudoVFMADD_VF64_M1_MASK killed renamable $v23, killed renamable $f14_d, killed renamable $v22, $v0, $noreg, 6 /* e64 */, 3 /* ta, ma */, implicit $frm, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v12
    renamable $v23 = nofpexcept PseudoVFMADD_VV_M1_MASK killed renamable $v23, renamable $v8, killed renamable $v21, $v0, $noreg, 6 /* e64 */, 3 /* ta, ma */, implicit $frm, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v12
    renamable $v8 = nofpexcept PseudoVFMUL_VV_M1_MASK undef renamable $v8, killed renamable $v8, renamable $v8, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $frm, implicit $vl, implicit $vtype
    renamable $x11 = AUIPC target-flags(riscv-pcrel-hi) %const.9, pre-instr-symbol <mcsymbol .Lpcrel_hi10>
    renamable $x11 = ADDI killed renamable $x11, target-flags(riscv-pcrel-lo) <mcsymbol .Lpcrel_hi10>
    dead renamable $x12 = PseudoVSETVLIX0 $x0, 216 /* e64, m1, ta, ma */, implicit-def $vl, implicit-def $vtype
    renamable $v21 = PseudoVLSE64_V_M1 undef renamable $v21, killed renamable $x11, $x0, -1, 6 /* e64 */, 3 /* ta, ma */, implicit $vl, implicit $vtype :: (load (s64) from constant-pool)
    renamable $x11 = AUIPC target-flags(riscv-pcrel-hi) %const.10, pre-instr-symbol <mcsymbol .Lpcrel_hi11>
    renamable $f14_d = FLD killed renamable $x11, target-flags(riscv-pcrel-lo) <mcsymbol .Lpcrel_hi11> :: (load (s64) from constant-pool)
    dead $x0 = PseudoVSETVLI killed renamable $x10, 216 /* e64, m1, ta, ma */, implicit-def $vl, implicit-def $vtype
    $v0 = COPY renamable $v12
    renamable $v19 = nofpexcept PseudoVFMADD_VF64_M1_MASK killed renamable $v19, killed renamable $f14_d, killed renamable $v21, $v0, $noreg, 6 /* e64 */, 3 /* ta, ma */, implicit $frm, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v12
    renamable $v19 = nofpexcept PseudoVFMADD_VV_M1_MASK killed renamable $v19, killed renamable $v8, killed renamable $v23, $v0, $noreg, 6 /* e64 */, 3 /* ta, ma */, implicit $frm, implicit $vl, implicit $vtype
    dead $x0 = PseudoVSETVLIX0 killed $x0, 215 /* e32, mf2, ta, ma */, implicit-def $vl, implicit-def $vtype, implicit $vl
    $v0 = COPY renamable $v12
    renamable $v8 = PseudoVMSEQ_VI_MF2_MASK undef renamable $v8, killed renamable $v14, 0, $v0, $noreg, 5 /* e32 */, implicit $vl, implicit $vtype
    renamable $v14 = PseudoVMAND_MM_MF8 renamable $v12, killed renamable $v8, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    renamable $v8 = PseudoVMANDN_MM_MF8 renamable $v12, renamable $v14, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    dead $x0 = PseudoVSETVLIX0 killed $x0, 216 /* e64, m1, ta, ma */, implicit-def $vl, implicit-def $vtype, implicit $vl
    renamable $v21 = COPY renamable $v19
    $v0 = COPY renamable $v8
    renamable $v21 = nofpexcept PseudoVFMADD_VV_M1_MASK killed renamable $v21, renamable $v20, renamable $v20, $v0, $noreg, 6 /* e64 */, 3 /* ta, ma */, implicit $frm, implicit $vl, implicit $vtype
    renamable $v12 = PseudoVMAND_MM_MF8 killed renamable $v12, killed renamable $v14, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    renamable $x10 = ADDI $x0, 1
    renamable $x10 = SLLI killed renamable $x10, 31
    $v0 = COPY renamable $v12
    renamable $v13 = PseudoVAND_VX_M1_MASK undef renamable $v13, killed renamable $v13, killed renamable $x10, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v12
    renamable $v13 = PseudoVMSEQ_VI_M1_MASK undef renamable $v13, killed renamable $v13, 0, $v0, $noreg, 6 /* e64 */, implicit $vl, implicit $vtype
    renamable $v22 = PseudoVMAND_MM_MF8 renamable $v12, killed renamable $v13, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    renamable $v13 = PseudoVMANDN_MM_MF8 renamable $v12, renamable $v22, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    renamable $x10 = ADDI $x0, 511
    renamable $x10 = SLLI killed renamable $x10, 53
    $v0 = COPY renamable $v13
    renamable $v23 = PseudoVADD_VX_M1_MASK undef renamable $v23, renamable $v20, killed renamable $x10, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $vl, implicit $vtype
    renamable $v24 = COPY renamable $v19
    $v0 = COPY renamable $v13
    renamable $v24 = nofpexcept PseudoVFMADD_VV_M1_MASK killed renamable $v24, renamable $v23, renamable $v23, $v0, $noreg, 6 /* e64 */, 3 /* ta, ma */, implicit $frm, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v13
    renamable $v14 = nofpexcept PseudoVMFLT_VF64_M1_MASK undef renamable $v14, renamable $v24, renamable $f15_d, $v0, $noreg, 6 /* e64 */, implicit $vl, implicit $vtype
    renamable $v25 = PseudoVMAND_MM_MF8 renamable $v13, killed renamable $v14, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    renamable $v14 = PseudoVMAND_MM_MF8 renamable $v13, renamable $v25, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v14
    renamable $v26 = nofpexcept PseudoVFSUB_VV_M1_MASK undef renamable $v26, renamable $v23, renamable $v24, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $frm, implicit $vl, implicit $vtype
    renamable $v27 = COPY renamable $v19
    $v0 = COPY renamable $v14
    renamable $v27 = nofpexcept PseudoVFMADD_VV_M1_MASK killed renamable $v27, killed renamable $v23, killed renamable $v26, $v0, $noreg, 6 /* e64 */, 3 /* ta, ma */, implicit $frm, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v14
    renamable $v23 = nofpexcept PseudoVFADD_VF64_M1_MASK undef renamable $v23, renamable $v24, renamable $f15_d, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $frm, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v14
    renamable $v26 = nofpexcept PseudoVFRSUB_VF64_M1_MASK undef renamable $v26, renamable $v23, killed renamable $f15_d, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $frm, implicit $vl, implicit $vtype
    renamable $x10 = AUIPC target-flags(riscv-pcrel-hi) %const.11, pre-instr-symbol <mcsymbol .Lpcrel_hi12>
    renamable $f15_d = FLD killed renamable $x10, target-flags(riscv-pcrel-lo) <mcsymbol .Lpcrel_hi12> :: (load (s64) from constant-pool)
    $v0 = COPY renamable $v14
    renamable $v26 = nofpexcept PseudoVFADD_VV_M1_MASK undef renamable $v26, renamable $v24, killed renamable $v26, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $frm, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v14
    renamable $v26 = nofpexcept PseudoVFADD_VV_M1_MASK undef renamable $v26, killed renamable $v27, killed renamable $v26, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $frm, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v14
    renamable $v23 = nofpexcept PseudoVFADD_VV_M1_MASK undef renamable $v23, killed renamable $v23, killed renamable $v26, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $frm, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v14
    renamable $v23 = nofpexcept PseudoVFADD_VF64_M1_MASK undef renamable $v23, killed renamable $v23, killed renamable $f15_d, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $frm, implicit $vl, implicit $vtype
    renamable $f15_d = FMV_D_X $x0
    $v0 = COPY renamable $v14
    renamable $v0 = nofpexcept PseudoVMFEQ_VF64_M1_MASK undef renamable $v0, renamable $v23, killed renamable $f15_d, $v0, $noreg, 6 /* e64 */, implicit $vl, implicit $vtype
    renamable $v0 = PseudoVMAND_MM_MF8 renamable $v14, killed renamable $v0, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    renamable $v23 = PseudoVMERGE_VIM_M1_TU undef renamable $v23, killed renamable $v23, 0, $v0, $noreg, 6 /* e64 */, implicit $vl, implicit $vtype
    renamable $x10 = AUIPC target-flags(riscv-pcrel-hi) %const.12, pre-instr-symbol <mcsymbol .Lpcrel_hi13>
    renamable $f15_d = FLD killed renamable $x10, target-flags(riscv-pcrel-lo) <mcsymbol .Lpcrel_hi13> :: (load (s64) from constant-pool)
    renamable $v0 = PseudoVMANDN_MM_MF8 killed renamable $v13, killed renamable $v25, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    renamable $v13 = PseudoVMOR_MM_MF8 killed renamable $v14, renamable $v0, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    renamable $v14 = PseudoVMERGE_VVM_M1_TU undef renamable $v14, killed renamable $v23, killed renamable $v24, $v0, $noreg, 6 /* e64 */, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v13
    renamable $v14 = nofpexcept PseudoVFMUL_VF64_M1_MASK undef renamable $v14, killed renamable $v14, killed renamable $f15_d, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $frm, implicit $vl, implicit $vtype
    renamable $v12 = PseudoVMAND_MM_MF8 killed renamable $v12, killed renamable $v22, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    renamable $x10 = ADDI $x0, -1009
    renamable $x11 = AUIPC target-flags(riscv-pcrel-hi) %const.13, pre-instr-symbol <mcsymbol .Lpcrel_hi14>
    renamable $f15_d = FLD killed renamable $x11, target-flags(riscv-pcrel-lo) <mcsymbol .Lpcrel_hi14> :: (load (s64) from constant-pool)
    renamable $x10 = SLLI killed renamable $x10, 52
    $v0 = COPY renamable $v12
    renamable $v20 = PseudoVADD_VX_M1_MASK undef renamable $v20, killed renamable $v20, killed renamable $x10, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v12
    renamable $v19 = nofpexcept PseudoVFMADD_VV_M1_MASK killed renamable $v19, killed renamable $v20, renamable $v20, $v0, $noreg, 6 /* e64 */, 3 /* ta, ma */, implicit $frm, implicit $vl, implicit $vtype
    $v0 = COPY renamable $v12
    renamable $v19 = nofpexcept PseudoVFMUL_VF64_M1_MASK undef renamable $v19, killed renamable $v19, killed renamable $f15_d, $v0, $noreg, 6 /* e64 */, 1 /* ta, mu */, implicit $frm, implicit $vl, implicit $vtype
    renamable $v11 = PseudoVMAND_MM_MF8 killed renamable $v11, killed renamable $v15, $noreg, 0 /* e8 */, implicit $vl, implicit $vtype
    $v0 = COPY killed renamable $v10
    renamable $v10 = PseudoVMERGE_VVM_M1_TU undef renamable $v10, killed renamable $v18, killed renamable $v17, $v0, $noreg, 6 /* e64 */, implicit $vl, implicit $vtype
    $v0 = COPY killed renamable $v8
    renamable $v8 = PseudoVMERGE_VVM_M1_TU undef renamable $v8, killed renamable $v10, killed renamable $v21, $v0, $noreg, 6 /* e64 */, implicit $vl, implicit $vtype
    $v0 = COPY killed renamable $v11
    renamable $v8 = PseudoVMERGE_VIM_M1_TU undef renamable $v8, killed renamable $v8, 0, $v0, $noreg, 6 /* e64 */, implicit $vl, implicit $vtype
    $v0 = COPY killed renamable $v12
    renamable $v8 = PseudoVMERGE_VVM_M1_TU undef renamable $v8, killed renamable $v8, killed renamable $v19, $v0, $noreg, 6 /* e64 */, implicit $vl, implicit $vtype
    $v0 = COPY killed renamable $v13
    renamable $v8 = PseudoVMERGE_VVM_M1_TU undef renamable $v8, killed renamable $v8, killed renamable $v14, $v0, $noreg, 6 /* e64 */, implicit $vl, implicit $vtype
    $v0 = COPY killed renamable $v9
    renamable $v8 = PseudoVMERGE_VVM_M1_TU undef renamable $v8, killed renamable $v8, killed renamable $v16, $v0, $noreg, 6 /* e64 */, implicit $vl, implicit $vtype
    PseudoRET implicit $v8

...
