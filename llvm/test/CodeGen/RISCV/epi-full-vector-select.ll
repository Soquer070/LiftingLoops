; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-v -verify-machineinstrs -O0 \
; RUN:    < %s | FileCheck --check-prefix=CHECK-O0 %s
; RUN: llc -mtriple=riscv64 -mattr=+experimental-v -verify-machineinstrs -O2 \
; RUN:    < %s | FileCheck --check-prefix=CHECK-O2 %s

@scratch = global i8 0, align 16

define void @test_select_int(<vscale x 1 x i64> %a, <vscale x 1 x i64> %b, <vscale x 1 x i1> %m) nounwind {
; CHECK-O0-LABEL: test_select_int:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    vsetvli a1, zero, e64,m1
; CHECK-O0-NEXT:    vmerge.vvm v1, v16, v17, v0
; CHECK-O0-NEXT:    vse.v v1, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_int:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a0, %hi(scratch)
; CHECK-O2-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O2-NEXT:    vsetvli a1, zero, e64,m1
; CHECK-O2-NEXT:    vmerge.vvm v1, v16, v17, v0
; CHECK-O2-NEXT:    vse.v v1, (a0)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 1 x i64>*

  %select = select <vscale x 1 x i1> %m, <vscale x 1 x i64> %a, <vscale x 1 x i64> %b
  store <vscale x 1 x i64> %select, <vscale x 1 x i64>* %store_addr

  ret void
}

define void @test_select_int_2(<vscale x 2 x i32> %a, <vscale x 2 x i32> %b, <vscale x 2 x i1> %m) nounwind {
; CHECK-O0-LABEL: test_select_int_2:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    vsetvli a1, zero, e32,m1
; CHECK-O0-NEXT:    vmerge.vvm v1, v16, v17, v0
; CHECK-O0-NEXT:    vse.v v1, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_int_2:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a0, %hi(scratch)
; CHECK-O2-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O2-NEXT:    vsetvli a1, zero, e32,m1
; CHECK-O2-NEXT:    vmerge.vvm v1, v16, v17, v0
; CHECK-O2-NEXT:    vse.v v1, (a0)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 2 x i32>*

  %select = select <vscale x 2 x i1> %m, <vscale x 2 x i32> %a, <vscale x 2 x i32> %b
  store <vscale x 2 x i32> %select, <vscale x 2 x i32>* %store_addr

  ret void
}

define void @test_select_int_3(<vscale x 2 x i64> %a, <vscale x 2 x i64> %b, <vscale x 2 x i1> %m) nounwind {
; CHECK-O0-LABEL: test_select_int_3:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    vsetvli a1, zero, e64,m2
; CHECK-O0-NEXT:    vmerge.vvm v2, v16, v18, v0
; CHECK-O0-NEXT:    vse.v v2, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_int_3:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a0, %hi(scratch)
; CHECK-O2-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O2-NEXT:    vsetvli a1, zero, e64,m2
; CHECK-O2-NEXT:    vmerge.vvm v2, v16, v18, v0
; CHECK-O2-NEXT:    vse.v v2, (a0)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 2 x i64>*

  %select = select <vscale x 2 x i1> %m, <vscale x 2 x i64> %a, <vscale x 2 x i64> %b
  store <vscale x 2 x i64> %select, <vscale x 2 x i64>* %store_addr

  ret void
}

define void @test_select_fp(<vscale x 1 x double> %a, <vscale x 1 x double> %b, <vscale x 1 x i1> %m) nounwind {
; CHECK-O0-LABEL: test_select_fp:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    vsetvli a1, zero, e64,m1
; CHECK-O0-NEXT:    vmerge.vvm v1, v16, v17, v0
; CHECK-O0-NEXT:    vse.v v1, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_fp:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a0, %hi(scratch)
; CHECK-O2-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O2-NEXT:    vsetvli a1, zero, e64,m1
; CHECK-O2-NEXT:    vmerge.vvm v1, v16, v17, v0
; CHECK-O2-NEXT:    vse.v v1, (a0)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 1 x double>*

  %select = select <vscale x 1 x i1> %m, <vscale x 1 x double> %a, <vscale x 1 x double> %b
  store <vscale x 1 x double> %select, <vscale x 1 x double>* %store_addr

  ret void
}

define void @test_select_fp_2(<vscale x 2 x float> %a, <vscale x 2 x float> %b, <vscale x 2 x i1> %m) nounwind {
; CHECK-O0-LABEL: test_select_fp_2:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    vsetvli a1, zero, e32,m1
; CHECK-O0-NEXT:    vmerge.vvm v1, v16, v17, v0
; CHECK-O0-NEXT:    vse.v v1, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_fp_2:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a0, %hi(scratch)
; CHECK-O2-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O2-NEXT:    vsetvli a1, zero, e32,m1
; CHECK-O2-NEXT:    vmerge.vvm v1, v16, v17, v0
; CHECK-O2-NEXT:    vse.v v1, (a0)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 2 x float>*

  %select = select <vscale x 2 x i1> %m, <vscale x 2 x float> %a, <vscale x 2 x float> %b
  store <vscale x 2 x float> %select, <vscale x 2 x float>* %store_addr

  ret void
}

define void @test_select_fp_3(<vscale x 2 x double> %a, <vscale x 2 x double> %b, <vscale x 2 x i1> %m) nounwind {
; CHECK-O0-LABEL: test_select_fp_3:
; CHECK-O0:       # %bb.0:
; CHECK-O0-NEXT:    lui a0, %hi(scratch)
; CHECK-O0-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O0-NEXT:    vsetvli a1, zero, e64,m2
; CHECK-O0-NEXT:    vmerge.vvm v2, v16, v18, v0
; CHECK-O0-NEXT:    vse.v v2, (a0)
; CHECK-O0-NEXT:    ret
;
; CHECK-O2-LABEL: test_select_fp_3:
; CHECK-O2:       # %bb.0:
; CHECK-O2-NEXT:    lui a0, %hi(scratch)
; CHECK-O2-NEXT:    addi a0, a0, %lo(scratch)
; CHECK-O2-NEXT:    vsetvli a1, zero, e64,m2
; CHECK-O2-NEXT:    vmerge.vvm v2, v16, v18, v0
; CHECK-O2-NEXT:    vse.v v2, (a0)
; CHECK-O2-NEXT:    ret
  %store_addr = bitcast i8* @scratch to <vscale x 2 x double>*

  %select = select <vscale x 2 x i1> %m, <vscale x 2 x double> %a, <vscale x 2 x double> %b
  store <vscale x 2 x double> %select, <vscale x 2 x double>* %store_addr

  ret void
}

; FIXME enable when whole-vector mask select operations are supported.
;define void @test_select_mask(<vscale x 1 x i1> %a, <vscale x 1 x i1> %b, <vscale x 1 x i1> %m) nounwind {
;  %store_addr = bitcast i8* @scratch to <vscale x 1 x i64>*
;
;  %select = select <vscale x 1 x i1> %m, <vscale x 1 x i1> %a, <vscale x 1 x i1> %b
;  %zext_select = zext <vscale x 1 x i1> %select to <vscale x 1 x i64>
;  store <vscale x 1 x i64> %zext_select, <vscale x 1 x i64>* %store_addr
;
;  ret void
;}

;define void @test_select_mask_2(<vscale x 2 x i1> %a, <vscale x 2 x i1> %b, <vscale x 2 x i1> %m) nounwind {
;  %store_addr = bitcast i8* @scratch to <vscale x 2 x i32>*
;
;  %select = select <vscale x 2 x i1> %m, <vscale x 2 x i1> %a, <vscale x 2 x i1> %b
;  %zext_select = zext <vscale x 2 x i1> %select to <vscale x 2 x i32>
;  store <vscale x 2 x i32> %zext_select, <vscale x 2 x i32>* %store_addr
;
;  ret void
;}

;define void @test_select_mask_3(<vscale x 2 x i1> %a, <vscale x 2 x i1> %b, <vscale x 2 x i1> %m) nounwind {
;  %store_addr = bitcast i8* @scratch to <vscale x 2 x i64>*
;
;  %select = select <vscale x 2 x i1> %m, <vscale x 2 x i1> %a, <vscale x 2 x i1> %b
;  %zext_select = zext <vscale x 2 x i1> %select to <vscale x 2 x i64>
;  store <vscale x 2 x i64> %zext_select, <vscale x 2 x i64>* %store_addr
;
;  ret void
;}
