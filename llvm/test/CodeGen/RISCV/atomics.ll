; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mattr=+a -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV32A %s
; RUN: llc -mtriple=riscv64 -mattr=+a -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV64A %s

define void @fence_acquire() nounwind {
; RV32A-LABEL: fence_acquire:
; RV32A:       # %bb.0:
; RV32A-NEXT:    fence r, rw
; RV32A-NEXT:    ret
;
; RV64A-LABEL: fence_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    fence r, rw
; RV64A-NEXT:    ret
  fence acquire
  ret void
}

define void @fence_release() nounwind {
; RV32A-LABEL: fence_release:
; RV32A:       # %bb.0:
; RV32A-NEXT:    fence rw, w
; RV32A-NEXT:    ret
;
; RV64A-LABEL: fence_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    fence rw, w
; RV64A-NEXT:    ret
  fence release
  ret void
}

define void @fence_acq_rel() nounwind {
; RV32A-LABEL: fence_acq_rel:
; RV32A:       # %bb.0:
; RV32A-NEXT:    fence.tso
; RV32A-NEXT:    ret
;
; RV64A-LABEL: fence_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    fence.tso
; RV64A-NEXT:    ret
  fence acq_rel
  ret void
}

define void @fence_seq_cst() nounwind {
; RV32A-LABEL: fence_seq_cst:
; RV32A:       # %bb.0:
; RV32A-NEXT:    fence rw, rw
; RV32A-NEXT:    ret
;
; RV64A-LABEL: fence_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    fence rw, rw
; RV64A-NEXT:    ret
  fence seq_cst
  ret void
}

define i8 @atomic_load_i8_unordered(i8 *%a) nounwind {
; RV32A-LABEL: atomic_load_i8_unordered:
; RV32A:       # %bb.0:
; RV32A-NEXT:    addi sp, sp, -16
; RV32A-NEXT:    sw ra, 12(sp)
; RV32A-NEXT:    mv a1, zero
; RV32A-NEXT:    call __atomic_load_1
; RV32A-NEXT:    lw ra, 12(sp)
; RV32A-NEXT:    addi sp, sp, 16
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_load_i8_unordered:
; RV64A:       # %bb.0:
; RV64A-NEXT:    addi sp, sp, -16
; RV64A-NEXT:    sd ra, 8(sp)
; RV64A-NEXT:    mv a1, zero
; RV64A-NEXT:    call __atomic_load_1
; RV64A-NEXT:    ld ra, 8(sp)
; RV64A-NEXT:    addi sp, sp, 16
; RV64A-NEXT:    ret
  %1 = load atomic i8, i8* %a unordered, align 1
  ret i8 %1
}

define i8 @atomic_load_i8_monotonic(i8 *%a) nounwind {
; RV32A-LABEL: atomic_load_i8_monotonic:
; RV32A:       # %bb.0:
; RV32A-NEXT:    addi sp, sp, -16
; RV32A-NEXT:    sw ra, 12(sp)
; RV32A-NEXT:    mv a1, zero
; RV32A-NEXT:    call __atomic_load_1
; RV32A-NEXT:    lw ra, 12(sp)
; RV32A-NEXT:    addi sp, sp, 16
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_load_i8_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    addi sp, sp, -16
; RV64A-NEXT:    sd ra, 8(sp)
; RV64A-NEXT:    mv a1, zero
; RV64A-NEXT:    call __atomic_load_1
; RV64A-NEXT:    ld ra, 8(sp)
; RV64A-NEXT:    addi sp, sp, 16
; RV64A-NEXT:    ret
  %1 = load atomic i8, i8* %a monotonic, align 1
  ret i8 %1
}

define i8 @atomic_load_i8_acquire(i8 *%a) nounwind {
; RV32A-LABEL: atomic_load_i8_acquire:
; RV32A:       # %bb.0:
; RV32A-NEXT:    addi sp, sp, -16
; RV32A-NEXT:    sw ra, 12(sp)
; RV32A-NEXT:    addi a1, zero, 2
; RV32A-NEXT:    call __atomic_load_1
; RV32A-NEXT:    lw ra, 12(sp)
; RV32A-NEXT:    addi sp, sp, 16
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_load_i8_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    addi sp, sp, -16
; RV64A-NEXT:    sd ra, 8(sp)
; RV64A-NEXT:    addi a1, zero, 2
; RV64A-NEXT:    call __atomic_load_1
; RV64A-NEXT:    ld ra, 8(sp)
; RV64A-NEXT:    addi sp, sp, 16
; RV64A-NEXT:    ret
  %1 = load atomic i8, i8* %a acquire, align 1
  ret i8 %1
}

define i8 @atomic_load_i8_seq_cst(i8 *%a) nounwind {
; RV32A-LABEL: atomic_load_i8_seq_cst:
; RV32A:       # %bb.0:
; RV32A-NEXT:    addi sp, sp, -16
; RV32A-NEXT:    sw ra, 12(sp)
; RV32A-NEXT:    addi a1, zero, 5
; RV32A-NEXT:    call __atomic_load_1
; RV32A-NEXT:    lw ra, 12(sp)
; RV32A-NEXT:    addi sp, sp, 16
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_load_i8_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    addi sp, sp, -16
; RV64A-NEXT:    sd ra, 8(sp)
; RV64A-NEXT:    addi a1, zero, 5
; RV64A-NEXT:    call __atomic_load_1
; RV64A-NEXT:    ld ra, 8(sp)
; RV64A-NEXT:    addi sp, sp, 16
; RV64A-NEXT:    ret
  %1 = load atomic i8, i8* %a seq_cst, align 1
  ret i8 %1
}

define i16 @atomic_load_i16_unordered(i16 *%a) nounwind {
; RV32A-LABEL: atomic_load_i16_unordered:
; RV32A:       # %bb.0:
; RV32A-NEXT:    addi sp, sp, -16
; RV32A-NEXT:    sw ra, 12(sp)
; RV32A-NEXT:    mv a1, zero
; RV32A-NEXT:    call __atomic_load_2
; RV32A-NEXT:    lw ra, 12(sp)
; RV32A-NEXT:    addi sp, sp, 16
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_load_i16_unordered:
; RV64A:       # %bb.0:
; RV64A-NEXT:    addi sp, sp, -16
; RV64A-NEXT:    sd ra, 8(sp)
; RV64A-NEXT:    mv a1, zero
; RV64A-NEXT:    call __atomic_load_2
; RV64A-NEXT:    ld ra, 8(sp)
; RV64A-NEXT:    addi sp, sp, 16
; RV64A-NEXT:    ret
  %1 = load atomic i16, i16* %a unordered, align 2
  ret i16 %1
}

define i16 @atomic_load_i16_monotonic(i16 *%a) nounwind {
; RV32A-LABEL: atomic_load_i16_monotonic:
; RV32A:       # %bb.0:
; RV32A-NEXT:    addi sp, sp, -16
; RV32A-NEXT:    sw ra, 12(sp)
; RV32A-NEXT:    mv a1, zero
; RV32A-NEXT:    call __atomic_load_2
; RV32A-NEXT:    lw ra, 12(sp)
; RV32A-NEXT:    addi sp, sp, 16
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_load_i16_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    addi sp, sp, -16
; RV64A-NEXT:    sd ra, 8(sp)
; RV64A-NEXT:    mv a1, zero
; RV64A-NEXT:    call __atomic_load_2
; RV64A-NEXT:    ld ra, 8(sp)
; RV64A-NEXT:    addi sp, sp, 16
; RV64A-NEXT:    ret
  %1 = load atomic i16, i16* %a monotonic, align 2
  ret i16 %1
}

define i16 @atomic_load_i16_acquire(i16 *%a) nounwind {
; RV32A-LABEL: atomic_load_i16_acquire:
; RV32A:       # %bb.0:
; RV32A-NEXT:    addi sp, sp, -16
; RV32A-NEXT:    sw ra, 12(sp)
; RV32A-NEXT:    addi a1, zero, 2
; RV32A-NEXT:    call __atomic_load_2
; RV32A-NEXT:    lw ra, 12(sp)
; RV32A-NEXT:    addi sp, sp, 16
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_load_i16_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    addi sp, sp, -16
; RV64A-NEXT:    sd ra, 8(sp)
; RV64A-NEXT:    addi a1, zero, 2
; RV64A-NEXT:    call __atomic_load_2
; RV64A-NEXT:    ld ra, 8(sp)
; RV64A-NEXT:    addi sp, sp, 16
; RV64A-NEXT:    ret
  %1 = load atomic i16, i16* %a acquire, align 2
  ret i16 %1
}

define i16 @atomic_load_i16_seq_cst(i16 *%a) nounwind {
; RV32A-LABEL: atomic_load_i16_seq_cst:
; RV32A:       # %bb.0:
; RV32A-NEXT:    addi sp, sp, -16
; RV32A-NEXT:    sw ra, 12(sp)
; RV32A-NEXT:    addi a1, zero, 5
; RV32A-NEXT:    call __atomic_load_2
; RV32A-NEXT:    lw ra, 12(sp)
; RV32A-NEXT:    addi sp, sp, 16
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_load_i16_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    addi sp, sp, -16
; RV64A-NEXT:    sd ra, 8(sp)
; RV64A-NEXT:    addi a1, zero, 5
; RV64A-NEXT:    call __atomic_load_2
; RV64A-NEXT:    ld ra, 8(sp)
; RV64A-NEXT:    addi sp, sp, 16
; RV64A-NEXT:    ret
  %1 = load atomic i16, i16* %a seq_cst, align 2
  ret i16 %1
}

define i32 @atomic_load_i32_unordered(i32 *%a) nounwind {
; RV32A-LABEL: atomic_load_i32_unordered:
; RV32A:       # %bb.0:
; RV32A-NEXT:    lw a0, 0(a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_load_i32_unordered:
; RV64A:       # %bb.0:
; RV64A-NEXT:    lw a0, 0(a0)
; RV64A-NEXT:    ret
  %1 = load atomic i32, i32* %a unordered, align 4
  ret i32 %1
}

define i32 @atomic_load_i32_monotonic(i32 *%a) nounwind {
; RV32A-LABEL: atomic_load_i32_monotonic:
; RV32A:       # %bb.0:
; RV32A-NEXT:    lw a0, 0(a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_load_i32_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    lw a0, 0(a0)
; RV64A-NEXT:    ret
  %1 = load atomic i32, i32* %a monotonic, align 4
  ret i32 %1
}

define i32 @atomic_load_i32_acquire(i32 *%a) nounwind {
; RV32A-LABEL: atomic_load_i32_acquire:
; RV32A:       # %bb.0:
; RV32A-NEXT:    lw a0, 0(a0)
; RV32A-NEXT:    fence r, rw
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_load_i32_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    lw a0, 0(a0)
; RV64A-NEXT:    fence r, rw
; RV64A-NEXT:    ret
  %1 = load atomic i32, i32* %a acquire, align 4
  ret i32 %1
}

define i32 @atomic_load_i32_seq_cst(i32 *%a) nounwind {
; RV32A-LABEL: atomic_load_i32_seq_cst:
; RV32A:       # %bb.0:
; RV32A-NEXT:    fence rw, rw
; RV32A-NEXT:    lw a0, 0(a0)
; RV32A-NEXT:    fence r, rw
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_load_i32_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    fence rw, rw
; RV64A-NEXT:    lw a0, 0(a0)
; RV64A-NEXT:    fence r, rw
; RV64A-NEXT:    ret
  %1 = load atomic i32, i32* %a seq_cst, align 4
  ret i32 %1
}

define void @atomic_store_i8_unordered(i8 *%a, i8 %b) nounwind {
; RV32A-LABEL: atomic_store_i8_unordered:
; RV32A:       # %bb.0:
; RV32A-NEXT:    addi sp, sp, -16
; RV32A-NEXT:    sw ra, 12(sp)
; RV32A-NEXT:    mv a2, zero
; RV32A-NEXT:    call __atomic_store_1
; RV32A-NEXT:    lw ra, 12(sp)
; RV32A-NEXT:    addi sp, sp, 16
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_store_i8_unordered:
; RV64A:       # %bb.0:
; RV64A-NEXT:    addi sp, sp, -16
; RV64A-NEXT:    sd ra, 8(sp)
; RV64A-NEXT:    mv a2, zero
; RV64A-NEXT:    call __atomic_store_1
; RV64A-NEXT:    ld ra, 8(sp)
; RV64A-NEXT:    addi sp, sp, 16
; RV64A-NEXT:    ret
  store atomic i8 %b, i8* %a unordered, align 1
  ret void
}

define void @atomic_store_i8_monotonic(i8 *%a, i8 %b) nounwind {
; RV32A-LABEL: atomic_store_i8_monotonic:
; RV32A:       # %bb.0:
; RV32A-NEXT:    addi sp, sp, -16
; RV32A-NEXT:    sw ra, 12(sp)
; RV32A-NEXT:    mv a2, zero
; RV32A-NEXT:    call __atomic_store_1
; RV32A-NEXT:    lw ra, 12(sp)
; RV32A-NEXT:    addi sp, sp, 16
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_store_i8_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    addi sp, sp, -16
; RV64A-NEXT:    sd ra, 8(sp)
; RV64A-NEXT:    mv a2, zero
; RV64A-NEXT:    call __atomic_store_1
; RV64A-NEXT:    ld ra, 8(sp)
; RV64A-NEXT:    addi sp, sp, 16
; RV64A-NEXT:    ret
  store atomic i8 %b, i8* %a monotonic, align 1
  ret void
}

define void @atomic_store_i8_release(i8 *%a, i8 %b) nounwind {
; RV32A-LABEL: atomic_store_i8_release:
; RV32A:       # %bb.0:
; RV32A-NEXT:    addi sp, sp, -16
; RV32A-NEXT:    sw ra, 12(sp)
; RV32A-NEXT:    addi a2, zero, 3
; RV32A-NEXT:    call __atomic_store_1
; RV32A-NEXT:    lw ra, 12(sp)
; RV32A-NEXT:    addi sp, sp, 16
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_store_i8_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    addi sp, sp, -16
; RV64A-NEXT:    sd ra, 8(sp)
; RV64A-NEXT:    addi a2, zero, 3
; RV64A-NEXT:    call __atomic_store_1
; RV64A-NEXT:    ld ra, 8(sp)
; RV64A-NEXT:    addi sp, sp, 16
; RV64A-NEXT:    ret
  store atomic i8 %b, i8* %a release, align 1
  ret void
}

define void @atomic_store_i8_seq_cst(i8 *%a, i8 %b) nounwind {
; RV32A-LABEL: atomic_store_i8_seq_cst:
; RV32A:       # %bb.0:
; RV32A-NEXT:    addi sp, sp, -16
; RV32A-NEXT:    sw ra, 12(sp)
; RV32A-NEXT:    addi a2, zero, 5
; RV32A-NEXT:    call __atomic_store_1
; RV32A-NEXT:    lw ra, 12(sp)
; RV32A-NEXT:    addi sp, sp, 16
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_store_i8_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    addi sp, sp, -16
; RV64A-NEXT:    sd ra, 8(sp)
; RV64A-NEXT:    addi a2, zero, 5
; RV64A-NEXT:    call __atomic_store_1
; RV64A-NEXT:    ld ra, 8(sp)
; RV64A-NEXT:    addi sp, sp, 16
; RV64A-NEXT:    ret
  store atomic i8 %b, i8* %a seq_cst, align 1
  ret void
}

define void @atomic_store_i16_unordered(i16 *%a, i16 %b) nounwind {
; RV32A-LABEL: atomic_store_i16_unordered:
; RV32A:       # %bb.0:
; RV32A-NEXT:    addi sp, sp, -16
; RV32A-NEXT:    sw ra, 12(sp)
; RV32A-NEXT:    mv a2, zero
; RV32A-NEXT:    call __atomic_store_2
; RV32A-NEXT:    lw ra, 12(sp)
; RV32A-NEXT:    addi sp, sp, 16
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_store_i16_unordered:
; RV64A:       # %bb.0:
; RV64A-NEXT:    addi sp, sp, -16
; RV64A-NEXT:    sd ra, 8(sp)
; RV64A-NEXT:    mv a2, zero
; RV64A-NEXT:    call __atomic_store_2
; RV64A-NEXT:    ld ra, 8(sp)
; RV64A-NEXT:    addi sp, sp, 16
; RV64A-NEXT:    ret
  store atomic i16 %b, i16* %a unordered, align 2
  ret void
}

define void @atomic_store_i16_monotonic(i16 *%a, i16 %b) nounwind {
; RV32A-LABEL: atomic_store_i16_monotonic:
; RV32A:       # %bb.0:
; RV32A-NEXT:    addi sp, sp, -16
; RV32A-NEXT:    sw ra, 12(sp)
; RV32A-NEXT:    mv a2, zero
; RV32A-NEXT:    call __atomic_store_2
; RV32A-NEXT:    lw ra, 12(sp)
; RV32A-NEXT:    addi sp, sp, 16
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_store_i16_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    addi sp, sp, -16
; RV64A-NEXT:    sd ra, 8(sp)
; RV64A-NEXT:    mv a2, zero
; RV64A-NEXT:    call __atomic_store_2
; RV64A-NEXT:    ld ra, 8(sp)
; RV64A-NEXT:    addi sp, sp, 16
; RV64A-NEXT:    ret
  store atomic i16 %b, i16* %a monotonic, align 2
  ret void
}

define void @atomic_store_i16_release(i16 *%a, i16 %b) nounwind {
; RV32A-LABEL: atomic_store_i16_release:
; RV32A:       # %bb.0:
; RV32A-NEXT:    addi sp, sp, -16
; RV32A-NEXT:    sw ra, 12(sp)
; RV32A-NEXT:    addi a2, zero, 3
; RV32A-NEXT:    call __atomic_store_2
; RV32A-NEXT:    lw ra, 12(sp)
; RV32A-NEXT:    addi sp, sp, 16
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_store_i16_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    addi sp, sp, -16
; RV64A-NEXT:    sd ra, 8(sp)
; RV64A-NEXT:    addi a2, zero, 3
; RV64A-NEXT:    call __atomic_store_2
; RV64A-NEXT:    ld ra, 8(sp)
; RV64A-NEXT:    addi sp, sp, 16
; RV64A-NEXT:    ret
  store atomic i16 %b, i16* %a release, align 2
  ret void
}

define void @atomic_store_i16_seq_cst(i16 *%a, i16 %b) nounwind {
; RV32A-LABEL: atomic_store_i16_seq_cst:
; RV32A:       # %bb.0:
; RV32A-NEXT:    addi sp, sp, -16
; RV32A-NEXT:    sw ra, 12(sp)
; RV32A-NEXT:    addi a2, zero, 5
; RV32A-NEXT:    call __atomic_store_2
; RV32A-NEXT:    lw ra, 12(sp)
; RV32A-NEXT:    addi sp, sp, 16
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_store_i16_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    addi sp, sp, -16
; RV64A-NEXT:    sd ra, 8(sp)
; RV64A-NEXT:    addi a2, zero, 5
; RV64A-NEXT:    call __atomic_store_2
; RV64A-NEXT:    ld ra, 8(sp)
; RV64A-NEXT:    addi sp, sp, 16
; RV64A-NEXT:    ret
  store atomic i16 %b, i16* %a seq_cst, align 2
  ret void
}

define void @atomic_store_i32_unordered(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomic_store_i32_unordered:
; RV32A:       # %bb.0:
; RV32A-NEXT:    sw a1, 0(a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_store_i32_unordered:
; RV64A:       # %bb.0:
; RV64A-NEXT:    sw a1, 0(a0)
; RV64A-NEXT:    ret
  store atomic i32 %b, i32* %a unordered, align 4
  ret void
}

define void @atomic_store_i32_monotonic(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomic_store_i32_monotonic:
; RV32A:       # %bb.0:
; RV32A-NEXT:    sw a1, 0(a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_store_i32_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    sw a1, 0(a0)
; RV64A-NEXT:    ret
  store atomic i32 %b, i32* %a monotonic, align 4
  ret void
}

define void @atomic_store_i32_release(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomic_store_i32_release:
; RV32A:       # %bb.0:
; RV32A-NEXT:    fence rw, w
; RV32A-NEXT:    sw a1, 0(a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_store_i32_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    fence rw, w
; RV64A-NEXT:    sw a1, 0(a0)
; RV64A-NEXT:    ret
  store atomic i32 %b, i32* %a release, align 4
  ret void
}

define void @atomic_store_i32_seq_cst(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomic_store_i32_seq_cst:
; RV32A:       # %bb.0:
; RV32A-NEXT:    fence rw, w
; RV32A-NEXT:    sw a1, 0(a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomic_store_i32_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    fence rw, w
; RV64A-NEXT:    sw a1, 0(a0)
; RV64A-NEXT:    ret
  store atomic i32 %b, i32* %a seq_cst, align 4
  ret void
}

define i32 @atomicrmw_xchg_i32_monotonic(i32* %a, i32 %b) {
; RV32A-LABEL: atomicrmw_xchg_i32_monotonic:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoswap.w a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_xchg_i32_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoswap.w a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xchg i32* %a, i32 %b monotonic
  ret i32 %1
}

define i32 @atomicrmw_xchg_i32_acquire(i32* %a, i32 %b) {
; RV32A-LABEL: atomicrmw_xchg_i32_acquire:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoswap.w.aq a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_xchg_i32_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoswap.w.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xchg i32* %a, i32 %b acquire
  ret i32 %1
}

define i32 @atomicrmw_xchg_i32_release(i32* %a, i32 %b) {
; RV32A-LABEL: atomicrmw_xchg_i32_release:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoswap.w.rl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_xchg_i32_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoswap.w.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xchg i32* %a, i32 %b release
  ret i32 %1
}

define i32 @atomicrmw_xchg_i32_acq_rel(i32* %a, i32 %b) {
; RV32A-LABEL: atomicrmw_xchg_i32_acq_rel:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoswap.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_xchg_i32_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoswap.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xchg i32* %a, i32 %b acq_rel
  ret i32 %1
}

define i32 @atomicrmw_xchg_i32_seq_cst(i32* %a, i32 %b) {
; RV32A-LABEL: atomicrmw_xchg_i32_seq_cst:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoswap.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_xchg_i32_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoswap.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xchg i32* %a, i32 %b seq_cst
  ret i32 %1
}

define i32 @atomicrmw_add_i32_monotonic(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_add_i32_monotonic:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoadd.w a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_add_i32_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoadd.w a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw add i32* %a, i32 %b monotonic
  ret i32 %1
}

define i32 @atomicrmw_add_i32_acquire(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_add_i32_acquire:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoadd.w.aq a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_add_i32_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoadd.w.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw add i32* %a, i32 %b acquire
  ret i32 %1
}

define i32 @atomicrmw_add_i32_release(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_add_i32_release:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoadd.w.rl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_add_i32_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoadd.w.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw add i32* %a, i32 %b release
  ret i32 %1
}

define i32 @atomicrmw_add_i32_acq_rel(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_add_i32_acq_rel:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoadd.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_add_i32_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoadd.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw add i32* %a, i32 %b acq_rel
  ret i32 %1
}

define i32 @atomicrmw_add_i32_seq_cst(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_add_i32_seq_cst:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoadd.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_add_i32_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoadd.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw add i32* %a, i32 %b seq_cst
  ret i32 %1
}

define i32 @atomicrmw_sub_i32_monotonic(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_sub_i32_monotonic:
; RV32A:       # %bb.0:
; RV32A-NEXT:    neg a1, a1
; RV32A-NEXT:    amoadd.w a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_sub_i32_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    neg a1, a1
; RV64A-NEXT:    amoadd.w a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw sub i32* %a, i32 %b monotonic
  ret i32 %1
}

define i32 @atomicrmw_sub_i32_acquire(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_sub_i32_acquire:
; RV32A:       # %bb.0:
; RV32A-NEXT:    neg a1, a1
; RV32A-NEXT:    amoadd.w.aq a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_sub_i32_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    neg a1, a1
; RV64A-NEXT:    amoadd.w.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw sub i32* %a, i32 %b acquire
  ret i32 %1
}

define i32 @atomicrmw_sub_i32_release(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_sub_i32_release:
; RV32A:       # %bb.0:
; RV32A-NEXT:    neg a1, a1
; RV32A-NEXT:    amoadd.w.rl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_sub_i32_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    neg a1, a1
; RV64A-NEXT:    amoadd.w.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw sub i32* %a, i32 %b release
  ret i32 %1
}

define i32 @atomicrmw_sub_i32_acq_rel(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_sub_i32_acq_rel:
; RV32A:       # %bb.0:
; RV32A-NEXT:    neg a1, a1
; RV32A-NEXT:    amoadd.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_sub_i32_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    neg a1, a1
; RV64A-NEXT:    amoadd.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw sub i32* %a, i32 %b acq_rel
  ret i32 %1
}

define i32 @atomicrmw_sub_i32_seq_cst(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_sub_i32_seq_cst:
; RV32A:       # %bb.0:
; RV32A-NEXT:    neg a1, a1
; RV32A-NEXT:    amoadd.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_sub_i32_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    neg a1, a1
; RV64A-NEXT:    amoadd.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw sub i32* %a, i32 %b seq_cst
  ret i32 %1
}

define i32 @atomicrmw_and_i32_monotonic(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_and_i32_monotonic:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoand.w a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_and_i32_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoand.w a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw and i32* %a, i32 %b monotonic
  ret i32 %1
}

define i32 @atomicrmw_and_i32_acquire(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_and_i32_acquire:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoand.w.aq a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_and_i32_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoand.w.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw and i32* %a, i32 %b acquire
  ret i32 %1
}

define i32 @atomicrmw_and_i32_release(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_and_i32_release:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoand.w.rl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_and_i32_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoand.w.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw and i32* %a, i32 %b release
  ret i32 %1
}

define i32 @atomicrmw_and_i32_acq_rel(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_and_i32_acq_rel:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoand.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_and_i32_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoand.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw and i32* %a, i32 %b acq_rel
  ret i32 %1
}

define i32 @atomicrmw_and_i32_seq_cst(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_and_i32_seq_cst:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoand.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_and_i32_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoand.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw and i32* %a, i32 %b seq_cst
  ret i32 %1
}

define i32 @atomicrmw_or_i32_monotonic(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_or_i32_monotonic:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoor.w a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_or_i32_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoor.w a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw or i32* %a, i32 %b monotonic
  ret i32 %1
}

define i32 @atomicrmw_or_i32_acquire(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_or_i32_acquire:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoor.w.aq a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_or_i32_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoor.w.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw or i32* %a, i32 %b acquire
  ret i32 %1
}

define i32 @atomicrmw_or_i32_release(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_or_i32_release:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoor.w.rl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_or_i32_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoor.w.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw or i32* %a, i32 %b release
  ret i32 %1
}

define i32 @atomicrmw_or_i32_acq_rel(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_or_i32_acq_rel:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoor.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_or_i32_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoor.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw or i32* %a, i32 %b acq_rel
  ret i32 %1
}

define i32 @atomicrmw_or_i32_seq_cst(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_or_i32_seq_cst:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoor.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_or_i32_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoor.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw or i32* %a, i32 %b seq_cst
  ret i32 %1
}

define i32 @atomicrmw_xor_i32_monotonic(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_xor_i32_monotonic:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoxor.w a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_xor_i32_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoxor.w a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xor i32* %a, i32 %b monotonic
  ret i32 %1
}

define i32 @atomicrmw_xor_i32_acquire(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_xor_i32_acquire:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoxor.w.aq a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_xor_i32_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoxor.w.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xor i32* %a, i32 %b acquire
  ret i32 %1
}

define i32 @atomicrmw_xor_i32_release(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_xor_i32_release:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoxor.w.rl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_xor_i32_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoxor.w.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xor i32* %a, i32 %b release
  ret i32 %1
}

define i32 @atomicrmw_xor_i32_acq_rel(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_xor_i32_acq_rel:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoxor.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_xor_i32_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoxor.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xor i32* %a, i32 %b acq_rel
  ret i32 %1
}

define i32 @atomicrmw_xor_i32_seq_cst(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_xor_i32_seq_cst:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amoxor.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_xor_i32_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amoxor.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw xor i32* %a, i32 %b seq_cst
  ret i32 %1
}

define i32 @atomicrmw_max_i32_monotonic(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_max_i32_monotonic:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amomax.w a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_max_i32_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomax.w a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw max i32* %a, i32 %b monotonic
  ret i32 %1
}

define i32 @atomicrmw_max_i32_acquire(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_max_i32_acquire:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amomax.w.aq a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_max_i32_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomax.w.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw max i32* %a, i32 %b acquire
  ret i32 %1
}

define i32 @atomicrmw_max_i32_release(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_max_i32_release:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amomax.w.rl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_max_i32_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomax.w.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw max i32* %a, i32 %b release
  ret i32 %1
}

define i32 @atomicrmw_max_i32_acq_rel(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_max_i32_acq_rel:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amomax.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_max_i32_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomax.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw max i32* %a, i32 %b acq_rel
  ret i32 %1
}

define i32 @atomicrmw_max_i32_seq_cst(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_max_i32_seq_cst:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amomax.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_max_i32_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomax.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw max i32* %a, i32 %b seq_cst
  ret i32 %1
}

define i32 @atomicrmw_min_i32_monotonic(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_min_i32_monotonic:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amomin.w a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_min_i32_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomin.w a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw min i32* %a, i32 %b monotonic
  ret i32 %1
}

define i32 @atomicrmw_min_i32_acquire(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_min_i32_acquire:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amomin.w.aq a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_min_i32_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomin.w.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw min i32* %a, i32 %b acquire
  ret i32 %1
}

define i32 @atomicrmw_min_i32_release(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_min_i32_release:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amomin.w.rl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_min_i32_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomin.w.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw min i32* %a, i32 %b release
  ret i32 %1
}

define i32 @atomicrmw_min_i32_acq_rel(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_min_i32_acq_rel:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amomin.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_min_i32_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomin.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw min i32* %a, i32 %b acq_rel
  ret i32 %1
}

define i32 @atomicrmw_min_i32_seq_cst(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_min_i32_seq_cst:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amomin.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_min_i32_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomin.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw min i32* %a, i32 %b seq_cst
  ret i32 %1
}

define i32 @atomicrmw_umax_i32_monotonic(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_umax_i32_monotonic:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amomaxu.w a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_umax_i32_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomaxu.w a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umax i32* %a, i32 %b monotonic
  ret i32 %1
}

define i32 @atomicrmw_umax_i32_acquire(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_umax_i32_acquire:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amomaxu.w.aq a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_umax_i32_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomaxu.w.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umax i32* %a, i32 %b acquire
  ret i32 %1
}

define i32 @atomicrmw_umax_i32_release(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_umax_i32_release:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amomaxu.w.rl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_umax_i32_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomaxu.w.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umax i32* %a, i32 %b release
  ret i32 %1
}

define i32 @atomicrmw_umax_i32_acq_rel(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_umax_i32_acq_rel:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amomaxu.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_umax_i32_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomaxu.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umax i32* %a, i32 %b acq_rel
  ret i32 %1
}

define i32 @atomicrmw_umax_i32_seq_cst(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_umax_i32_seq_cst:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amomaxu.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_umax_i32_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amomaxu.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umax i32* %a, i32 %b seq_cst
  ret i32 %1
}

define i32 @atomicrmw_umin_i32_monotonic(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_umin_i32_monotonic:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amominu.w a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_umin_i32_monotonic:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amominu.w a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umin i32* %a, i32 %b monotonic
  ret i32 %1
}

define i32 @atomicrmw_umin_i32_acquire(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_umin_i32_acquire:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amominu.w.aq a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_umin_i32_acquire:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amominu.w.aq a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umin i32* %a, i32 %b acquire
  ret i32 %1
}

define i32 @atomicrmw_umin_i32_release(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_umin_i32_release:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amominu.w.rl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_umin_i32_release:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amominu.w.rl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umin i32* %a, i32 %b release
  ret i32 %1
}

define i32 @atomicrmw_umin_i32_acq_rel(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_umin_i32_acq_rel:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amominu.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_umin_i32_acq_rel:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amominu.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umin i32* %a, i32 %b acq_rel
  ret i32 %1
}

define i32 @atomicrmw_umin_i32_seq_cst(i32 *%a, i32 %b) nounwind {
; RV32A-LABEL: atomicrmw_umin_i32_seq_cst:
; RV32A:       # %bb.0:
; RV32A-NEXT:    amominu.w.aqrl a0, a1, (a0)
; RV32A-NEXT:    ret
;
; RV64A-LABEL: atomicrmw_umin_i32_seq_cst:
; RV64A:       # %bb.0:
; RV64A-NEXT:    amominu.w.aqrl a0, a1, (a0)
; RV64A-NEXT:    ret
  %1 = atomicrmw umin i32* %a, i32 %b seq_cst
  ret i32 %1
}
