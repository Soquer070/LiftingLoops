; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -target-abi ilp32d -mattr=+f,+d < %s \
; RUN:    | FileCheck %s
; RUN: llc -mtriple=riscv64 -target-abi lp64d -mattr=+f,+d < %s \
; RUN:    | FileCheck %s

declare float     @llvm.sin.f32(float  %Val)
declare double    @llvm.sin.f64(double %Val)
declare float     @llvm.cos.f32(float  %Val)
declare double    @llvm.cos.f64(double %Val)

define dso_local float @fsinf32(float %a) nounwind {
; CHECK-LABEL: fsinf32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    tail sinf@plt
entry:
  %t = call float @llvm.sin.f32(float %a)
  ret float %t
}

define dso_local double @fsinf64(double %a) nounwind {
; CHECK-LABEL: fsinf64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    tail sin@plt
entry:
  %t = call double @llvm.sin.f64(double %a)
  ret double %t
}

define dso_local float @fcosf32(float %a) nounwind {
; CHECK-LABEL: fcosf32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    tail cosf@plt
entry:
  %t = call float @llvm.cos.f32(float %a)
  ret float %t
}

define dso_local double @fcosf64(double %a) nounwind {
; CHECK-LABEL: fcosf64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    tail cos@plt
entry:
  %t = call double @llvm.cos.f64(double %a)
  ret double %t
}

define dso_local float @fsincosf32(float %a) nounwind {
entry:
  %t1 = tail call fast float @llvm.sin.f32(float %a)
  %t2 = tail call fast float @llvm.cos.f32(float %a)
  %t3 = fadd float %t1, %t2
  ret float %t3
}

define dso_local double @fsincosf64(double %a) nounwind {
entry:
  %t1 = tail call fast double @llvm.sin.f64(double %a)
  %t2 = tail call fast double @llvm.cos.f64(double %a)
  %t3 = fadd double %t1, %t2
  ret double %t3
}
