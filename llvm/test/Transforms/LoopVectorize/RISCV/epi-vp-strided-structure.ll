; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN:    -S -loop-vectorize -riscv-v-vector-bits-min=64 -instcombine -simplifycfg < %s -o - \
; RUN:    | FileCheck --check-prefix=GATHER %s
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN:    -S -loop-vectorize -riscv-v-vector-bits-min=64 -instcombine -simplifycfg < %s -o - \
; RUN:    -interleave-no-scalar-epilogue=true \
; RUN:    | FileCheck --check-prefix=GATHER-INTERLEAVE %s
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN:    -vectorizer-use-vp-strided-load-store \
; RUN:    -S -loop-vectorize -riscv-v-vector-bits-min=64 -instcombine -simplifycfg < %s -o - \
; RUN:    | FileCheck --check-prefix=STRIDED %s
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize \
; RUN:    -vectorizer-use-vp-strided-load-store \
; RUN:    -interleave-no-scalar-epilogue=true \
; RUN:    -S -loop-vectorize -riscv-v-vector-bits-min=64 -instcombine -simplifycfg < %s -o - \
; RUN:    | FileCheck --check-prefix=STRIDED-INTERLEAVE %s

; Test from https://reviews.llvm.org/D107790
;
;struct foo {
;  int a, b, c, d;
;};
;
;void struct_gather(int * __restrict  A, struct foo * __restrict B) {
;  for (int i = 0; i < 1024; ++i)
;      A[i] += B[i].b;
;}

%struct.foo = type { i32, i32, i32, i32 }

define dso_local void @struct_gather(i32* noalias nocapture %A, %struct.foo* noalias nocapture readonly %B) {
; GATHER-LABEL: @struct_gather(
; GATHER-NEXT:  entry:
; GATHER-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; GATHER-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 1
; GATHER-NEXT:    [[TMP2:%.*]] = icmp ugt i64 [[TMP1]], -1025
; GATHER-NEXT:    br i1 [[TMP2]], label [[FOR_BODY:%.*]], label [[VECTOR_PH:%.*]]
; GATHER:       vector.ph:
; GATHER-NEXT:    [[TMP3:%.*]] = call <vscale x 2 x i64> @llvm.experimental.stepvector.nxv2i64()
; GATHER-NEXT:    [[TMP4:%.*]] = call i64 @llvm.vscale.i64()
; GATHER-NEXT:    [[TMP5:%.*]] = shl i64 [[TMP4]], 1
; GATHER-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP5]], i64 0
; GATHER-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <vscale x 2 x i64> [[DOTSPLATINSERT]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; GATHER-NEXT:    br label [[VECTOR_BODY:%.*]]
; GATHER:       vector.body:
; GATHER-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; GATHER-NEXT:    [[VEC_IND:%.*]] = phi <vscale x 2 x i64> [ [[TMP3]], [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[VECTOR_BODY]] ]
; GATHER-NEXT:    [[TMP6:%.*]] = sub i64 1024, [[INDEX]]
; GATHER-NEXT:    [[TMP7:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP6]], i64 2, i64 0)
; GATHER-NEXT:    [[TMP8:%.*]] = trunc i64 [[TMP7]] to i32
; GATHER-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT_FOO:%.*]], %struct.foo* [[B:%.*]], <vscale x 2 x i64> [[VEC_IND]], i32 1
; GATHER-NEXT:    [[VP_GATHER:%.*]] = call <vscale x 2 x i32> @llvm.vp.gather.nxv2i32.nxv2p0i32(<vscale x 2 x i32*> [[TMP9]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; GATHER-NEXT:    [[TMP10:%.*]] = getelementptr inbounds i32, i32* [[A:%.*]], i64 [[INDEX]]
; GATHER-NEXT:    [[TMP11:%.*]] = bitcast i32* [[TMP10]] to <vscale x 2 x i32>*
; GATHER-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP11]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; GATHER-NEXT:    [[VP_OP:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD]], <vscale x 2 x i32> [[VP_GATHER]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; GATHER-NEXT:    [[TMP12:%.*]] = bitcast i32* [[TMP10]] to <vscale x 2 x i32>*
; GATHER-NEXT:    call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP]], <vscale x 2 x i32>* [[TMP12]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; GATHER-NEXT:    [[TMP13:%.*]] = and i64 [[TMP7]], 4294967295
; GATHER-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP13]]
; GATHER-NEXT:    [[VEC_IND_NEXT]] = add <vscale x 2 x i64> [[VEC_IND]], [[DOTSPLAT]]
; GATHER-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[INDEX_NEXT]], 1024
; GATHER-NEXT:    br i1 [[TMP14]], label [[FOR_COND_CLEANUP:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; GATHER:       for.cond.cleanup:
; GATHER-NEXT:    ret void
; GATHER:       for.body:
; GATHER-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ 0, [[ENTRY:%.*]] ]
; GATHER-NEXT:    [[B_2:%.*]] = getelementptr inbounds [[STRUCT_FOO]], %struct.foo* [[B]], i64 [[INDVARS_IV]], i32 1
; GATHER-NEXT:    [[TMP15:%.*]] = load i32, i32* [[B_2]], align 4
; GATHER-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, i32* [[A]], i64 [[INDVARS_IV]]
; GATHER-NEXT:    [[TMP16:%.*]] = load i32, i32* [[ARRAYIDX2]], align 4
; GATHER-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP16]], [[TMP15]]
; GATHER-NEXT:    store i32 [[ADD]], i32* [[ARRAYIDX2]], align 4
; GATHER-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; GATHER-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 1024
; GATHER-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
;
; GATHER-INTERLEAVE-LABEL: @struct_gather(
; GATHER-INTERLEAVE-NEXT:  entry:
; GATHER-INTERLEAVE-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; GATHER-INTERLEAVE-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 4
; GATHER-INTERLEAVE-NEXT:    [[TMP2:%.*]] = icmp ugt i64 [[TMP1]], -1025
; GATHER-INTERLEAVE-NEXT:    br i1 [[TMP2]], label [[FOR_BODY:%.*]], label [[VECTOR_PH:%.*]]
; GATHER-INTERLEAVE:       vector.ph:
; GATHER-INTERLEAVE-NEXT:    [[TMP3:%.*]] = call <vscale x 2 x i64> @llvm.experimental.stepvector.nxv2i64()
; GATHER-INTERLEAVE-NEXT:    [[TMP4:%.*]] = call i64 @llvm.vscale.i64()
; GATHER-INTERLEAVE-NEXT:    [[TMP5:%.*]] = shl i64 [[TMP4]], 1
; GATHER-INTERLEAVE-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP5]], i64 0
; GATHER-INTERLEAVE-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <vscale x 2 x i64> [[DOTSPLATINSERT]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; GATHER-INTERLEAVE-NEXT:    br label [[VECTOR_BODY:%.*]]
; GATHER-INTERLEAVE:       vector.body:
; GATHER-INTERLEAVE-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; GATHER-INTERLEAVE-NEXT:    [[VEC_IND:%.*]] = phi <vscale x 2 x i64> [ [[TMP3]], [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[VECTOR_BODY]] ]
; GATHER-INTERLEAVE-NEXT:    [[STEP_ADD:%.*]] = add <vscale x 2 x i64> [[VEC_IND]], [[DOTSPLAT]]
; GATHER-INTERLEAVE-NEXT:    [[STEP_ADD1:%.*]] = add <vscale x 2 x i64> [[STEP_ADD]], [[DOTSPLAT]]
; GATHER-INTERLEAVE-NEXT:    [[STEP_ADD2:%.*]] = add <vscale x 2 x i64> [[STEP_ADD1]], [[DOTSPLAT]]
; GATHER-INTERLEAVE-NEXT:    [[STEP_ADD3:%.*]] = add <vscale x 2 x i64> [[STEP_ADD2]], [[DOTSPLAT]]
; GATHER-INTERLEAVE-NEXT:    [[STEP_ADD4:%.*]] = add <vscale x 2 x i64> [[STEP_ADD3]], [[DOTSPLAT]]
; GATHER-INTERLEAVE-NEXT:    [[STEP_ADD5:%.*]] = add <vscale x 2 x i64> [[STEP_ADD4]], [[DOTSPLAT]]
; GATHER-INTERLEAVE-NEXT:    [[STEP_ADD6:%.*]] = add <vscale x 2 x i64> [[STEP_ADD5]], [[DOTSPLAT]]
; GATHER-INTERLEAVE-NEXT:    [[TMP6:%.*]] = sub i64 1024, [[INDEX]]
; GATHER-INTERLEAVE-NEXT:    [[TMP7:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP6]], i64 2, i64 0)
; GATHER-INTERLEAVE-NEXT:    [[TMP8:%.*]] = trunc i64 [[TMP7]] to i32
; GATHER-INTERLEAVE-NEXT:    [[TMP9:%.*]] = sub i64 [[TMP6]], [[TMP7]]
; GATHER-INTERLEAVE-NEXT:    [[TMP10:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP9]], i64 2, i64 0)
; GATHER-INTERLEAVE-NEXT:    [[TMP11:%.*]] = trunc i64 [[TMP10]] to i32
; GATHER-INTERLEAVE-NEXT:    [[TMP12:%.*]] = sub i64 [[TMP9]], [[TMP10]]
; GATHER-INTERLEAVE-NEXT:    [[TMP13:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP12]], i64 2, i64 0)
; GATHER-INTERLEAVE-NEXT:    [[TMP14:%.*]] = trunc i64 [[TMP13]] to i32
; GATHER-INTERLEAVE-NEXT:    [[TMP15:%.*]] = sub i64 [[TMP12]], [[TMP13]]
; GATHER-INTERLEAVE-NEXT:    [[TMP16:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP15]], i64 2, i64 0)
; GATHER-INTERLEAVE-NEXT:    [[TMP17:%.*]] = trunc i64 [[TMP16]] to i32
; GATHER-INTERLEAVE-NEXT:    [[TMP18:%.*]] = sub i64 [[TMP15]], [[TMP16]]
; GATHER-INTERLEAVE-NEXT:    [[TMP19:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP18]], i64 2, i64 0)
; GATHER-INTERLEAVE-NEXT:    [[TMP20:%.*]] = trunc i64 [[TMP19]] to i32
; GATHER-INTERLEAVE-NEXT:    [[TMP21:%.*]] = sub i64 [[TMP18]], [[TMP19]]
; GATHER-INTERLEAVE-NEXT:    [[TMP22:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP21]], i64 2, i64 0)
; GATHER-INTERLEAVE-NEXT:    [[TMP23:%.*]] = trunc i64 [[TMP22]] to i32
; GATHER-INTERLEAVE-NEXT:    [[TMP24:%.*]] = sub i64 [[TMP21]], [[TMP22]]
; GATHER-INTERLEAVE-NEXT:    [[TMP25:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP24]], i64 2, i64 0)
; GATHER-INTERLEAVE-NEXT:    [[TMP26:%.*]] = trunc i64 [[TMP25]] to i32
; GATHER-INTERLEAVE-NEXT:    [[TMP27:%.*]] = sub i64 [[TMP24]], [[TMP25]]
; GATHER-INTERLEAVE-NEXT:    [[TMP28:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP27]], i64 2, i64 0)
; GATHER-INTERLEAVE-NEXT:    [[TMP29:%.*]] = trunc i64 [[TMP28]] to i32
; GATHER-INTERLEAVE-NEXT:    [[TMP30:%.*]] = getelementptr inbounds [[STRUCT_FOO:%.*]], %struct.foo* [[B:%.*]], <vscale x 2 x i64> [[VEC_IND]], i32 1
; GATHER-INTERLEAVE-NEXT:    [[TMP31:%.*]] = getelementptr inbounds [[STRUCT_FOO]], %struct.foo* [[B]], <vscale x 2 x i64> [[STEP_ADD]], i32 1
; GATHER-INTERLEAVE-NEXT:    [[TMP32:%.*]] = getelementptr inbounds [[STRUCT_FOO]], %struct.foo* [[B]], <vscale x 2 x i64> [[STEP_ADD1]], i32 1
; GATHER-INTERLEAVE-NEXT:    [[TMP33:%.*]] = getelementptr inbounds [[STRUCT_FOO]], %struct.foo* [[B]], <vscale x 2 x i64> [[STEP_ADD2]], i32 1
; GATHER-INTERLEAVE-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [[STRUCT_FOO]], %struct.foo* [[B]], <vscale x 2 x i64> [[STEP_ADD3]], i32 1
; GATHER-INTERLEAVE-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [[STRUCT_FOO]], %struct.foo* [[B]], <vscale x 2 x i64> [[STEP_ADD4]], i32 1
; GATHER-INTERLEAVE-NEXT:    [[TMP36:%.*]] = getelementptr inbounds [[STRUCT_FOO]], %struct.foo* [[B]], <vscale x 2 x i64> [[STEP_ADD5]], i32 1
; GATHER-INTERLEAVE-NEXT:    [[TMP37:%.*]] = getelementptr inbounds [[STRUCT_FOO]], %struct.foo* [[B]], <vscale x 2 x i64> [[STEP_ADD6]], i32 1
; GATHER-INTERLEAVE-NEXT:    [[VP_GATHER:%.*]] = call <vscale x 2 x i32> @llvm.vp.gather.nxv2i32.nxv2p0i32(<vscale x 2 x i32*> [[TMP30]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; GATHER-INTERLEAVE-NEXT:    [[VP_GATHER8:%.*]] = call <vscale x 2 x i32> @llvm.vp.gather.nxv2i32.nxv2p0i32(<vscale x 2 x i32*> [[TMP31]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; GATHER-INTERLEAVE-NEXT:    [[VP_GATHER9:%.*]] = call <vscale x 2 x i32> @llvm.vp.gather.nxv2i32.nxv2p0i32(<vscale x 2 x i32*> [[TMP32]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; GATHER-INTERLEAVE-NEXT:    [[VP_GATHER10:%.*]] = call <vscale x 2 x i32> @llvm.vp.gather.nxv2i32.nxv2p0i32(<vscale x 2 x i32*> [[TMP33]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; GATHER-INTERLEAVE-NEXT:    [[VP_GATHER11:%.*]] = call <vscale x 2 x i32> @llvm.vp.gather.nxv2i32.nxv2p0i32(<vscale x 2 x i32*> [[TMP34]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; GATHER-INTERLEAVE-NEXT:    [[VP_GATHER12:%.*]] = call <vscale x 2 x i32> @llvm.vp.gather.nxv2i32.nxv2p0i32(<vscale x 2 x i32*> [[TMP35]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; GATHER-INTERLEAVE-NEXT:    [[VP_GATHER13:%.*]] = call <vscale x 2 x i32> @llvm.vp.gather.nxv2i32.nxv2p0i32(<vscale x 2 x i32*> [[TMP36]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP26]])
; GATHER-INTERLEAVE-NEXT:    [[VP_GATHER14:%.*]] = call <vscale x 2 x i32> @llvm.vp.gather.nxv2i32.nxv2p0i32(<vscale x 2 x i32*> [[TMP37]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP29]])
; GATHER-INTERLEAVE-NEXT:    [[TMP38:%.*]] = getelementptr inbounds i32, i32* [[A:%.*]], i64 [[INDEX]]
; GATHER-INTERLEAVE-NEXT:    [[TMP39:%.*]] = bitcast i32* [[TMP38]] to <vscale x 2 x i32>*
; GATHER-INTERLEAVE-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP39]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; GATHER-INTERLEAVE-NEXT:    [[TMP40:%.*]] = sext i32 [[TMP8]] to i64
; GATHER-INTERLEAVE-NEXT:    [[TMP41:%.*]] = getelementptr inbounds i32, i32* [[TMP38]], i64 [[TMP40]]
; GATHER-INTERLEAVE-NEXT:    [[TMP42:%.*]] = bitcast i32* [[TMP41]] to <vscale x 2 x i32>*
; GATHER-INTERLEAVE-NEXT:    [[VP_OP_LOAD15:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP42]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; GATHER-INTERLEAVE-NEXT:    [[TMP43:%.*]] = add i32 [[TMP8]], [[TMP11]]
; GATHER-INTERLEAVE-NEXT:    [[TMP44:%.*]] = sext i32 [[TMP43]] to i64
; GATHER-INTERLEAVE-NEXT:    [[TMP45:%.*]] = getelementptr inbounds i32, i32* [[TMP38]], i64 [[TMP44]]
; GATHER-INTERLEAVE-NEXT:    [[TMP46:%.*]] = bitcast i32* [[TMP45]] to <vscale x 2 x i32>*
; GATHER-INTERLEAVE-NEXT:    [[VP_OP_LOAD16:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP46]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; GATHER-INTERLEAVE-NEXT:    [[TMP47:%.*]] = add i32 [[TMP8]], [[TMP11]]
; GATHER-INTERLEAVE-NEXT:    [[TMP48:%.*]] = add i32 [[TMP47]], [[TMP14]]
; GATHER-INTERLEAVE-NEXT:    [[TMP49:%.*]] = sext i32 [[TMP48]] to i64
; GATHER-INTERLEAVE-NEXT:    [[TMP50:%.*]] = getelementptr inbounds i32, i32* [[TMP38]], i64 [[TMP49]]
; GATHER-INTERLEAVE-NEXT:    [[TMP51:%.*]] = bitcast i32* [[TMP50]] to <vscale x 2 x i32>*
; GATHER-INTERLEAVE-NEXT:    [[VP_OP_LOAD17:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP51]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; GATHER-INTERLEAVE-NEXT:    [[TMP52:%.*]] = add i32 [[TMP8]], [[TMP11]]
; GATHER-INTERLEAVE-NEXT:    [[TMP53:%.*]] = add i32 [[TMP52]], [[TMP14]]
; GATHER-INTERLEAVE-NEXT:    [[TMP54:%.*]] = add i32 [[TMP53]], [[TMP17]]
; GATHER-INTERLEAVE-NEXT:    [[TMP55:%.*]] = sext i32 [[TMP54]] to i64
; GATHER-INTERLEAVE-NEXT:    [[TMP56:%.*]] = getelementptr inbounds i32, i32* [[TMP38]], i64 [[TMP55]]
; GATHER-INTERLEAVE-NEXT:    [[TMP57:%.*]] = bitcast i32* [[TMP56]] to <vscale x 2 x i32>*
; GATHER-INTERLEAVE-NEXT:    [[VP_OP_LOAD18:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP57]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; GATHER-INTERLEAVE-NEXT:    [[TMP58:%.*]] = add i32 [[TMP8]], [[TMP11]]
; GATHER-INTERLEAVE-NEXT:    [[TMP59:%.*]] = add i32 [[TMP58]], [[TMP14]]
; GATHER-INTERLEAVE-NEXT:    [[TMP60:%.*]] = add i32 [[TMP59]], [[TMP17]]
; GATHER-INTERLEAVE-NEXT:    [[TMP61:%.*]] = add i32 [[TMP60]], [[TMP20]]
; GATHER-INTERLEAVE-NEXT:    [[TMP62:%.*]] = sext i32 [[TMP61]] to i64
; GATHER-INTERLEAVE-NEXT:    [[TMP63:%.*]] = getelementptr inbounds i32, i32* [[TMP38]], i64 [[TMP62]]
; GATHER-INTERLEAVE-NEXT:    [[TMP64:%.*]] = bitcast i32* [[TMP63]] to <vscale x 2 x i32>*
; GATHER-INTERLEAVE-NEXT:    [[VP_OP_LOAD19:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP64]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; GATHER-INTERLEAVE-NEXT:    [[TMP65:%.*]] = add i32 [[TMP8]], [[TMP11]]
; GATHER-INTERLEAVE-NEXT:    [[TMP66:%.*]] = add i32 [[TMP65]], [[TMP14]]
; GATHER-INTERLEAVE-NEXT:    [[TMP67:%.*]] = add i32 [[TMP66]], [[TMP17]]
; GATHER-INTERLEAVE-NEXT:    [[TMP68:%.*]] = add i32 [[TMP67]], [[TMP20]]
; GATHER-INTERLEAVE-NEXT:    [[TMP69:%.*]] = add i32 [[TMP68]], [[TMP23]]
; GATHER-INTERLEAVE-NEXT:    [[TMP70:%.*]] = sext i32 [[TMP69]] to i64
; GATHER-INTERLEAVE-NEXT:    [[TMP71:%.*]] = getelementptr inbounds i32, i32* [[TMP38]], i64 [[TMP70]]
; GATHER-INTERLEAVE-NEXT:    [[TMP72:%.*]] = bitcast i32* [[TMP71]] to <vscale x 2 x i32>*
; GATHER-INTERLEAVE-NEXT:    [[VP_OP_LOAD20:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP72]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP26]])
; GATHER-INTERLEAVE-NEXT:    [[TMP73:%.*]] = add i32 [[TMP8]], [[TMP11]]
; GATHER-INTERLEAVE-NEXT:    [[TMP74:%.*]] = add i32 [[TMP73]], [[TMP14]]
; GATHER-INTERLEAVE-NEXT:    [[TMP75:%.*]] = add i32 [[TMP74]], [[TMP17]]
; GATHER-INTERLEAVE-NEXT:    [[TMP76:%.*]] = add i32 [[TMP75]], [[TMP20]]
; GATHER-INTERLEAVE-NEXT:    [[TMP77:%.*]] = add i32 [[TMP76]], [[TMP23]]
; GATHER-INTERLEAVE-NEXT:    [[TMP78:%.*]] = add i32 [[TMP77]], [[TMP26]]
; GATHER-INTERLEAVE-NEXT:    [[TMP79:%.*]] = sext i32 [[TMP78]] to i64
; GATHER-INTERLEAVE-NEXT:    [[TMP80:%.*]] = getelementptr inbounds i32, i32* [[TMP38]], i64 [[TMP79]]
; GATHER-INTERLEAVE-NEXT:    [[TMP81:%.*]] = bitcast i32* [[TMP80]] to <vscale x 2 x i32>*
; GATHER-INTERLEAVE-NEXT:    [[VP_OP_LOAD21:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP81]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP29]])
; GATHER-INTERLEAVE-NEXT:    [[VP_OP:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD]], <vscale x 2 x i32> [[VP_GATHER]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; GATHER-INTERLEAVE-NEXT:    [[VP_OP22:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD15]], <vscale x 2 x i32> [[VP_GATHER8]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; GATHER-INTERLEAVE-NEXT:    [[VP_OP23:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD16]], <vscale x 2 x i32> [[VP_GATHER9]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; GATHER-INTERLEAVE-NEXT:    [[VP_OP24:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD17]], <vscale x 2 x i32> [[VP_GATHER10]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; GATHER-INTERLEAVE-NEXT:    [[VP_OP25:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD18]], <vscale x 2 x i32> [[VP_GATHER11]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; GATHER-INTERLEAVE-NEXT:    [[VP_OP26:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD19]], <vscale x 2 x i32> [[VP_GATHER12]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; GATHER-INTERLEAVE-NEXT:    [[VP_OP27:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD20]], <vscale x 2 x i32> [[VP_GATHER13]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP26]])
; GATHER-INTERLEAVE-NEXT:    [[VP_OP28:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD21]], <vscale x 2 x i32> [[VP_GATHER14]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP29]])
; GATHER-INTERLEAVE-NEXT:    [[TMP82:%.*]] = bitcast i32* [[TMP38]] to <vscale x 2 x i32>*
; GATHER-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP]], <vscale x 2 x i32>* [[TMP82]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; GATHER-INTERLEAVE-NEXT:    [[TMP83:%.*]] = sext i32 [[TMP8]] to i64
; GATHER-INTERLEAVE-NEXT:    [[TMP84:%.*]] = getelementptr inbounds i32, i32* [[TMP38]], i64 [[TMP83]]
; GATHER-INTERLEAVE-NEXT:    [[TMP85:%.*]] = bitcast i32* [[TMP84]] to <vscale x 2 x i32>*
; GATHER-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP22]], <vscale x 2 x i32>* [[TMP85]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; GATHER-INTERLEAVE-NEXT:    [[TMP86:%.*]] = add i32 [[TMP8]], [[TMP11]]
; GATHER-INTERLEAVE-NEXT:    [[TMP87:%.*]] = sext i32 [[TMP86]] to i64
; GATHER-INTERLEAVE-NEXT:    [[TMP88:%.*]] = getelementptr inbounds i32, i32* [[TMP38]], i64 [[TMP87]]
; GATHER-INTERLEAVE-NEXT:    [[TMP89:%.*]] = bitcast i32* [[TMP88]] to <vscale x 2 x i32>*
; GATHER-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP23]], <vscale x 2 x i32>* [[TMP89]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; GATHER-INTERLEAVE-NEXT:    [[TMP90:%.*]] = add i32 [[TMP8]], [[TMP11]]
; GATHER-INTERLEAVE-NEXT:    [[TMP91:%.*]] = add i32 [[TMP90]], [[TMP14]]
; GATHER-INTERLEAVE-NEXT:    [[TMP92:%.*]] = sext i32 [[TMP91]] to i64
; GATHER-INTERLEAVE-NEXT:    [[TMP93:%.*]] = getelementptr inbounds i32, i32* [[TMP38]], i64 [[TMP92]]
; GATHER-INTERLEAVE-NEXT:    [[TMP94:%.*]] = bitcast i32* [[TMP93]] to <vscale x 2 x i32>*
; GATHER-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP24]], <vscale x 2 x i32>* [[TMP94]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; GATHER-INTERLEAVE-NEXT:    [[TMP95:%.*]] = add i32 [[TMP8]], [[TMP11]]
; GATHER-INTERLEAVE-NEXT:    [[TMP96:%.*]] = add i32 [[TMP95]], [[TMP14]]
; GATHER-INTERLEAVE-NEXT:    [[TMP97:%.*]] = add i32 [[TMP96]], [[TMP17]]
; GATHER-INTERLEAVE-NEXT:    [[TMP98:%.*]] = sext i32 [[TMP97]] to i64
; GATHER-INTERLEAVE-NEXT:    [[TMP99:%.*]] = getelementptr inbounds i32, i32* [[TMP38]], i64 [[TMP98]]
; GATHER-INTERLEAVE-NEXT:    [[TMP100:%.*]] = bitcast i32* [[TMP99]] to <vscale x 2 x i32>*
; GATHER-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP25]], <vscale x 2 x i32>* [[TMP100]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; GATHER-INTERLEAVE-NEXT:    [[TMP101:%.*]] = add i32 [[TMP8]], [[TMP11]]
; GATHER-INTERLEAVE-NEXT:    [[TMP102:%.*]] = add i32 [[TMP101]], [[TMP14]]
; GATHER-INTERLEAVE-NEXT:    [[TMP103:%.*]] = add i32 [[TMP102]], [[TMP17]]
; GATHER-INTERLEAVE-NEXT:    [[TMP104:%.*]] = add i32 [[TMP103]], [[TMP20]]
; GATHER-INTERLEAVE-NEXT:    [[TMP105:%.*]] = sext i32 [[TMP104]] to i64
; GATHER-INTERLEAVE-NEXT:    [[TMP106:%.*]] = getelementptr inbounds i32, i32* [[TMP38]], i64 [[TMP105]]
; GATHER-INTERLEAVE-NEXT:    [[TMP107:%.*]] = bitcast i32* [[TMP106]] to <vscale x 2 x i32>*
; GATHER-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP26]], <vscale x 2 x i32>* [[TMP107]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; GATHER-INTERLEAVE-NEXT:    [[TMP108:%.*]] = add i32 [[TMP8]], [[TMP11]]
; GATHER-INTERLEAVE-NEXT:    [[TMP109:%.*]] = add i32 [[TMP108]], [[TMP14]]
; GATHER-INTERLEAVE-NEXT:    [[TMP110:%.*]] = add i32 [[TMP109]], [[TMP17]]
; GATHER-INTERLEAVE-NEXT:    [[TMP111:%.*]] = add i32 [[TMP110]], [[TMP20]]
; GATHER-INTERLEAVE-NEXT:    [[TMP112:%.*]] = add i32 [[TMP111]], [[TMP23]]
; GATHER-INTERLEAVE-NEXT:    [[TMP113:%.*]] = sext i32 [[TMP112]] to i64
; GATHER-INTERLEAVE-NEXT:    [[TMP114:%.*]] = getelementptr inbounds i32, i32* [[TMP38]], i64 [[TMP113]]
; GATHER-INTERLEAVE-NEXT:    [[TMP115:%.*]] = bitcast i32* [[TMP114]] to <vscale x 2 x i32>*
; GATHER-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP27]], <vscale x 2 x i32>* [[TMP115]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP26]])
; GATHER-INTERLEAVE-NEXT:    [[TMP116:%.*]] = add i32 [[TMP8]], [[TMP11]]
; GATHER-INTERLEAVE-NEXT:    [[TMP117:%.*]] = add i32 [[TMP116]], [[TMP14]]
; GATHER-INTERLEAVE-NEXT:    [[TMP118:%.*]] = add i32 [[TMP117]], [[TMP17]]
; GATHER-INTERLEAVE-NEXT:    [[TMP119:%.*]] = add i32 [[TMP118]], [[TMP20]]
; GATHER-INTERLEAVE-NEXT:    [[TMP120:%.*]] = add i32 [[TMP119]], [[TMP23]]
; GATHER-INTERLEAVE-NEXT:    [[TMP121:%.*]] = add i32 [[TMP120]], [[TMP26]]
; GATHER-INTERLEAVE-NEXT:    [[TMP122:%.*]] = sext i32 [[TMP121]] to i64
; GATHER-INTERLEAVE-NEXT:    [[TMP123:%.*]] = getelementptr inbounds i32, i32* [[TMP38]], i64 [[TMP122]]
; GATHER-INTERLEAVE-NEXT:    [[TMP124:%.*]] = bitcast i32* [[TMP123]] to <vscale x 2 x i32>*
; GATHER-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP28]], <vscale x 2 x i32>* [[TMP124]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP29]])
; GATHER-INTERLEAVE-NEXT:    [[TMP125:%.*]] = add i32 [[TMP8]], [[TMP11]]
; GATHER-INTERLEAVE-NEXT:    [[TMP126:%.*]] = add i32 [[TMP125]], [[TMP14]]
; GATHER-INTERLEAVE-NEXT:    [[TMP127:%.*]] = add i32 [[TMP126]], [[TMP17]]
; GATHER-INTERLEAVE-NEXT:    [[TMP128:%.*]] = add i32 [[TMP127]], [[TMP20]]
; GATHER-INTERLEAVE-NEXT:    [[TMP129:%.*]] = add i32 [[TMP128]], [[TMP23]]
; GATHER-INTERLEAVE-NEXT:    [[TMP130:%.*]] = add i32 [[TMP129]], [[TMP26]]
; GATHER-INTERLEAVE-NEXT:    [[TMP131:%.*]] = add i32 [[TMP130]], [[TMP29]]
; GATHER-INTERLEAVE-NEXT:    [[TMP132:%.*]] = zext i32 [[TMP131]] to i64
; GATHER-INTERLEAVE-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP132]]
; GATHER-INTERLEAVE-NEXT:    [[VEC_IND_NEXT]] = add <vscale x 2 x i64> [[STEP_ADD6]], [[DOTSPLAT]]
; GATHER-INTERLEAVE-NEXT:    [[TMP133:%.*]] = icmp eq i64 [[INDEX_NEXT]], 1024
; GATHER-INTERLEAVE-NEXT:    br i1 [[TMP133]], label [[FOR_COND_CLEANUP:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; GATHER-INTERLEAVE:       for.cond.cleanup:
; GATHER-INTERLEAVE-NEXT:    ret void
; GATHER-INTERLEAVE:       for.body:
; GATHER-INTERLEAVE-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ 0, [[ENTRY:%.*]] ]
; GATHER-INTERLEAVE-NEXT:    [[B_2:%.*]] = getelementptr inbounds [[STRUCT_FOO]], %struct.foo* [[B]], i64 [[INDVARS_IV]], i32 1
; GATHER-INTERLEAVE-NEXT:    [[TMP134:%.*]] = load i32, i32* [[B_2]], align 4
; GATHER-INTERLEAVE-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, i32* [[A]], i64 [[INDVARS_IV]]
; GATHER-INTERLEAVE-NEXT:    [[TMP135:%.*]] = load i32, i32* [[ARRAYIDX2]], align 4
; GATHER-INTERLEAVE-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP135]], [[TMP134]]
; GATHER-INTERLEAVE-NEXT:    store i32 [[ADD]], i32* [[ARRAYIDX2]], align 4
; GATHER-INTERLEAVE-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; GATHER-INTERLEAVE-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 1024
; GATHER-INTERLEAVE-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
;
; STRIDED-LABEL: @struct_gather(
; STRIDED-NEXT:  entry:
; STRIDED-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; STRIDED-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 1
; STRIDED-NEXT:    [[TMP2:%.*]] = icmp ugt i64 [[TMP1]], -1025
; STRIDED-NEXT:    br i1 [[TMP2]], label [[FOR_BODY:%.*]], label [[VECTOR_PH:%.*]]
; STRIDED:       vector.ph:
; STRIDED-NEXT:    [[SCEVGEP:%.*]] = getelementptr [[STRUCT_FOO:%.*]], %struct.foo* [[B:%.*]], i64 0, i32 1
; STRIDED-NEXT:    br label [[VECTOR_BODY:%.*]]
; STRIDED:       vector.body:
; STRIDED-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; STRIDED-NEXT:    [[TMP3:%.*]] = sub i64 1024, [[INDEX]]
; STRIDED-NEXT:    [[TMP4:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP3]], i64 2, i64 0)
; STRIDED-NEXT:    [[TMP5:%.*]] = trunc i64 [[TMP4]] to i32
; STRIDED-NEXT:    [[TMP6:%.*]] = shl i64 [[INDEX]], 2
; STRIDED-NEXT:    [[TMP7:%.*]] = getelementptr i32, i32* [[SCEVGEP]], i64 [[TMP6]]
; STRIDED-NEXT:    [[VP_STRIDED_LOAD:%.*]] = call <vscale x 2 x i32> @llvm.experimental.vp.strided.load.nxv2i32.p0i32.i64(i32* [[TMP7]], i64 16, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP5]])
; STRIDED-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i32, i32* [[A:%.*]], i64 [[INDEX]]
; STRIDED-NEXT:    [[TMP9:%.*]] = bitcast i32* [[TMP8]] to <vscale x 2 x i32>*
; STRIDED-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP9]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP5]])
; STRIDED-NEXT:    [[VP_OP:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD]], <vscale x 2 x i32> [[VP_STRIDED_LOAD]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP5]])
; STRIDED-NEXT:    [[TMP10:%.*]] = bitcast i32* [[TMP8]] to <vscale x 2 x i32>*
; STRIDED-NEXT:    call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP]], <vscale x 2 x i32>* [[TMP10]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP5]])
; STRIDED-NEXT:    [[TMP11:%.*]] = and i64 [[TMP4]], 4294967295
; STRIDED-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP11]]
; STRIDED-NEXT:    [[TMP12:%.*]] = icmp eq i64 [[INDEX_NEXT]], 1024
; STRIDED-NEXT:    br i1 [[TMP12]], label [[FOR_COND_CLEANUP:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; STRIDED:       for.cond.cleanup:
; STRIDED-NEXT:    ret void
; STRIDED:       for.body:
; STRIDED-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ 0, [[ENTRY:%.*]] ]
; STRIDED-NEXT:    [[B_2:%.*]] = getelementptr inbounds [[STRUCT_FOO]], %struct.foo* [[B]], i64 [[INDVARS_IV]], i32 1
; STRIDED-NEXT:    [[TMP13:%.*]] = load i32, i32* [[B_2]], align 4
; STRIDED-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, i32* [[A]], i64 [[INDVARS_IV]]
; STRIDED-NEXT:    [[TMP14:%.*]] = load i32, i32* [[ARRAYIDX2]], align 4
; STRIDED-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP14]], [[TMP13]]
; STRIDED-NEXT:    store i32 [[ADD]], i32* [[ARRAYIDX2]], align 4
; STRIDED-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; STRIDED-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 1024
; STRIDED-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
;
; STRIDED-INTERLEAVE-LABEL: @struct_gather(
; STRIDED-INTERLEAVE-NEXT:  entry:
; STRIDED-INTERLEAVE-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; STRIDED-INTERLEAVE-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 4
; STRIDED-INTERLEAVE-NEXT:    [[TMP2:%.*]] = icmp ugt i64 [[TMP1]], -1025
; STRIDED-INTERLEAVE-NEXT:    br i1 [[TMP2]], label [[FOR_BODY:%.*]], label [[VECTOR_PH:%.*]]
; STRIDED-INTERLEAVE:       vector.ph:
; STRIDED-INTERLEAVE-NEXT:    [[TMP3:%.*]] = call <vscale x 2 x i64> @llvm.experimental.stepvector.nxv2i64()
; STRIDED-INTERLEAVE-NEXT:    [[TMP4:%.*]] = call i64 @llvm.vscale.i64()
; STRIDED-INTERLEAVE-NEXT:    [[TMP5:%.*]] = shl i64 [[TMP4]], 1
; STRIDED-INTERLEAVE-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP5]], i64 0
; STRIDED-INTERLEAVE-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <vscale x 2 x i64> [[DOTSPLATINSERT]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; STRIDED-INTERLEAVE-NEXT:    [[SCEVGEP:%.*]] = getelementptr [[STRUCT_FOO:%.*]], %struct.foo* [[B:%.*]], i64 0, i32 1
; STRIDED-INTERLEAVE-NEXT:    [[SCEVGEP9:%.*]] = getelementptr [[STRUCT_FOO]], %struct.foo* [[B]], i64 0, i32 1
; STRIDED-INTERLEAVE-NEXT:    [[SCEVGEP12:%.*]] = getelementptr [[STRUCT_FOO]], %struct.foo* [[B]], i64 0, i32 1
; STRIDED-INTERLEAVE-NEXT:    [[SCEVGEP15:%.*]] = getelementptr [[STRUCT_FOO]], %struct.foo* [[B]], i64 0, i32 1
; STRIDED-INTERLEAVE-NEXT:    [[SCEVGEP18:%.*]] = getelementptr [[STRUCT_FOO]], %struct.foo* [[B]], i64 0, i32 1
; STRIDED-INTERLEAVE-NEXT:    [[SCEVGEP21:%.*]] = getelementptr [[STRUCT_FOO]], %struct.foo* [[B]], i64 0, i32 1
; STRIDED-INTERLEAVE-NEXT:    [[SCEVGEP24:%.*]] = getelementptr [[STRUCT_FOO]], %struct.foo* [[B]], i64 0, i32 1
; STRIDED-INTERLEAVE-NEXT:    [[SCEVGEP27:%.*]] = getelementptr [[STRUCT_FOO]], %struct.foo* [[B]], i64 0, i32 1
; STRIDED-INTERLEAVE-NEXT:    br label [[VECTOR_BODY:%.*]]
; STRIDED-INTERLEAVE:       vector.body:
; STRIDED-INTERLEAVE-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; STRIDED-INTERLEAVE-NEXT:    [[VEC_IND:%.*]] = phi <vscale x 2 x i64> [ [[TMP3]], [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[VECTOR_BODY]] ]
; STRIDED-INTERLEAVE-NEXT:    [[REASS_ADD:%.*]] = shl <vscale x 2 x i64> [[DOTSPLAT]], shufflevector (<vscale x 2 x i64> insertelement (<vscale x 2 x i64> poison, i64 1, i32 0), <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer)
; STRIDED-INTERLEAVE-NEXT:    [[STEP_ADD1:%.*]] = add <vscale x 2 x i64> [[VEC_IND]], [[REASS_ADD]]
; STRIDED-INTERLEAVE-NEXT:    [[REASS_ADD52:%.*]] = shl <vscale x 2 x i64> [[DOTSPLAT]], shufflevector (<vscale x 2 x i64> insertelement (<vscale x 2 x i64> poison, i64 1, i32 0), <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer)
; STRIDED-INTERLEAVE-NEXT:    [[STEP_ADD3:%.*]] = add <vscale x 2 x i64> [[STEP_ADD1]], [[REASS_ADD52]]
; STRIDED-INTERLEAVE-NEXT:    [[REASS_ADD53:%.*]] = shl <vscale x 2 x i64> [[DOTSPLAT]], shufflevector (<vscale x 2 x i64> insertelement (<vscale x 2 x i64> poison, i64 1, i32 0), <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer)
; STRIDED-INTERLEAVE-NEXT:    [[STEP_ADD5:%.*]] = add <vscale x 2 x i64> [[STEP_ADD3]], [[REASS_ADD53]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP6:%.*]] = sub i64 1024, [[INDEX]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP7:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP6]], i64 2, i64 0)
; STRIDED-INTERLEAVE-NEXT:    [[TMP8:%.*]] = trunc i64 [[TMP7]] to i32
; STRIDED-INTERLEAVE-NEXT:    [[TMP9:%.*]] = sub i64 [[TMP6]], [[TMP7]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP10:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP9]], i64 2, i64 0)
; STRIDED-INTERLEAVE-NEXT:    [[TMP11:%.*]] = trunc i64 [[TMP10]] to i32
; STRIDED-INTERLEAVE-NEXT:    [[TMP12:%.*]] = sub i64 [[TMP9]], [[TMP10]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP13:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP12]], i64 2, i64 0)
; STRIDED-INTERLEAVE-NEXT:    [[TMP14:%.*]] = trunc i64 [[TMP13]] to i32
; STRIDED-INTERLEAVE-NEXT:    [[TMP15:%.*]] = sub i64 [[TMP12]], [[TMP13]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP16:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP15]], i64 2, i64 0)
; STRIDED-INTERLEAVE-NEXT:    [[TMP17:%.*]] = trunc i64 [[TMP16]] to i32
; STRIDED-INTERLEAVE-NEXT:    [[TMP18:%.*]] = sub i64 [[TMP15]], [[TMP16]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP19:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP18]], i64 2, i64 0)
; STRIDED-INTERLEAVE-NEXT:    [[TMP20:%.*]] = trunc i64 [[TMP19]] to i32
; STRIDED-INTERLEAVE-NEXT:    [[TMP21:%.*]] = sub i64 [[TMP18]], [[TMP19]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP22:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP21]], i64 2, i64 0)
; STRIDED-INTERLEAVE-NEXT:    [[TMP23:%.*]] = trunc i64 [[TMP22]] to i32
; STRIDED-INTERLEAVE-NEXT:    [[TMP24:%.*]] = sub i64 [[TMP21]], [[TMP22]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP25:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP24]], i64 2, i64 0)
; STRIDED-INTERLEAVE-NEXT:    [[TMP26:%.*]] = trunc i64 [[TMP25]] to i32
; STRIDED-INTERLEAVE-NEXT:    [[TMP27:%.*]] = sub i64 [[TMP24]], [[TMP25]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP28:%.*]] = call i64 @llvm.epi.vsetvl(i64 [[TMP27]], i64 2, i64 0)
; STRIDED-INTERLEAVE-NEXT:    [[TMP29:%.*]] = trunc i64 [[TMP28]] to i32
; STRIDED-INTERLEAVE-NEXT:    [[TMP30:%.*]] = shl i64 [[INDEX]], 2
; STRIDED-INTERLEAVE-NEXT:    [[TMP31:%.*]] = getelementptr i32, i32* [[SCEVGEP]], i64 [[TMP30]]
; STRIDED-INTERLEAVE-NEXT:    [[VP_STRIDED_LOAD:%.*]] = call <vscale x 2 x i32> @llvm.experimental.vp.strided.load.nxv2i32.p0i32.i64(i32* [[TMP31]], i64 16, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP32:%.*]] = shl i64 [[TMP7]], 4
; STRIDED-INTERLEAVE-NEXT:    [[TMP33:%.*]] = and i64 [[TMP32]], 68719476720
; STRIDED-INTERLEAVE-NEXT:    [[TMP34:%.*]] = mul i64 [[INDEX]], [[TMP33]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP35:%.*]] = bitcast i32* [[SCEVGEP9]] to i8*
; STRIDED-INTERLEAVE-NEXT:    [[TMP36:%.*]] = getelementptr i8, i8* [[TMP35]], i64 [[TMP34]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP37:%.*]] = bitcast i8* [[TMP36]] to i32*
; STRIDED-INTERLEAVE-NEXT:    [[VP_STRIDED_LOAD11:%.*]] = call <vscale x 2 x i32> @llvm.experimental.vp.strided.load.nxv2i32.p0i32.i64(i32* [[TMP37]], i64 16, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP38:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP39:%.*]] = zext i32 [[TMP38]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP40:%.*]] = shl nuw nsw i64 [[TMP39]], 4
; STRIDED-INTERLEAVE-NEXT:    [[TMP41:%.*]] = mul i64 [[INDEX]], [[TMP40]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP42:%.*]] = bitcast i32* [[SCEVGEP12]] to i8*
; STRIDED-INTERLEAVE-NEXT:    [[TMP43:%.*]] = getelementptr i8, i8* [[TMP42]], i64 [[TMP41]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP44:%.*]] = bitcast i8* [[TMP43]] to i32*
; STRIDED-INTERLEAVE-NEXT:    [[VP_STRIDED_LOAD14:%.*]] = call <vscale x 2 x i32> @llvm.experimental.vp.strided.load.nxv2i32.p0i32.i64(i32* [[TMP44]], i64 16, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP45:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP46:%.*]] = add i32 [[TMP45]], [[TMP14]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP47:%.*]] = zext i32 [[TMP46]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP48:%.*]] = shl nuw nsw i64 [[TMP47]], 4
; STRIDED-INTERLEAVE-NEXT:    [[TMP49:%.*]] = mul i64 [[INDEX]], [[TMP48]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP50:%.*]] = bitcast i32* [[SCEVGEP15]] to i8*
; STRIDED-INTERLEAVE-NEXT:    [[TMP51:%.*]] = getelementptr i8, i8* [[TMP50]], i64 [[TMP49]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP52:%.*]] = bitcast i8* [[TMP51]] to i32*
; STRIDED-INTERLEAVE-NEXT:    [[VP_STRIDED_LOAD17:%.*]] = call <vscale x 2 x i32> @llvm.experimental.vp.strided.load.nxv2i32.p0i32.i64(i32* [[TMP52]], i64 16, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP53:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP54:%.*]] = add i32 [[TMP53]], [[TMP14]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP55:%.*]] = add i32 [[TMP54]], [[TMP17]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP56:%.*]] = zext i32 [[TMP55]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP57:%.*]] = shl nuw nsw i64 [[TMP56]], 4
; STRIDED-INTERLEAVE-NEXT:    [[TMP58:%.*]] = mul i64 [[INDEX]], [[TMP57]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP59:%.*]] = bitcast i32* [[SCEVGEP18]] to i8*
; STRIDED-INTERLEAVE-NEXT:    [[TMP60:%.*]] = getelementptr i8, i8* [[TMP59]], i64 [[TMP58]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP61:%.*]] = bitcast i8* [[TMP60]] to i32*
; STRIDED-INTERLEAVE-NEXT:    [[VP_STRIDED_LOAD20:%.*]] = call <vscale x 2 x i32> @llvm.experimental.vp.strided.load.nxv2i32.p0i32.i64(i32* [[TMP61]], i64 16, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP62:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP63:%.*]] = add i32 [[TMP62]], [[TMP14]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP64:%.*]] = add i32 [[TMP63]], [[TMP17]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP65:%.*]] = add i32 [[TMP64]], [[TMP20]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP66:%.*]] = zext i32 [[TMP65]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP67:%.*]] = shl nuw nsw i64 [[TMP66]], 4
; STRIDED-INTERLEAVE-NEXT:    [[TMP68:%.*]] = mul i64 [[INDEX]], [[TMP67]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP69:%.*]] = bitcast i32* [[SCEVGEP21]] to i8*
; STRIDED-INTERLEAVE-NEXT:    [[TMP70:%.*]] = getelementptr i8, i8* [[TMP69]], i64 [[TMP68]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP71:%.*]] = bitcast i8* [[TMP70]] to i32*
; STRIDED-INTERLEAVE-NEXT:    [[VP_STRIDED_LOAD23:%.*]] = call <vscale x 2 x i32> @llvm.experimental.vp.strided.load.nxv2i32.p0i32.i64(i32* [[TMP71]], i64 16, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP72:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP73:%.*]] = add i32 [[TMP72]], [[TMP14]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP74:%.*]] = add i32 [[TMP73]], [[TMP17]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP75:%.*]] = add i32 [[TMP74]], [[TMP20]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP76:%.*]] = add i32 [[TMP75]], [[TMP23]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP77:%.*]] = zext i32 [[TMP76]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP78:%.*]] = shl nuw nsw i64 [[TMP77]], 4
; STRIDED-INTERLEAVE-NEXT:    [[TMP79:%.*]] = mul i64 [[INDEX]], [[TMP78]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP80:%.*]] = bitcast i32* [[SCEVGEP24]] to i8*
; STRIDED-INTERLEAVE-NEXT:    [[TMP81:%.*]] = getelementptr i8, i8* [[TMP80]], i64 [[TMP79]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP82:%.*]] = bitcast i8* [[TMP81]] to i32*
; STRIDED-INTERLEAVE-NEXT:    [[VP_STRIDED_LOAD26:%.*]] = call <vscale x 2 x i32> @llvm.experimental.vp.strided.load.nxv2i32.p0i32.i64(i32* [[TMP82]], i64 16, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP26]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP83:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP84:%.*]] = add i32 [[TMP83]], [[TMP14]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP85:%.*]] = add i32 [[TMP84]], [[TMP17]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP86:%.*]] = add i32 [[TMP85]], [[TMP20]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP87:%.*]] = add i32 [[TMP86]], [[TMP23]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP88:%.*]] = add i32 [[TMP87]], [[TMP26]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP89:%.*]] = zext i32 [[TMP88]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP90:%.*]] = shl nuw nsw i64 [[TMP89]], 4
; STRIDED-INTERLEAVE-NEXT:    [[TMP91:%.*]] = mul i64 [[INDEX]], [[TMP90]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP92:%.*]] = bitcast i32* [[SCEVGEP27]] to i8*
; STRIDED-INTERLEAVE-NEXT:    [[TMP93:%.*]] = getelementptr i8, i8* [[TMP92]], i64 [[TMP91]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP94:%.*]] = bitcast i8* [[TMP93]] to i32*
; STRIDED-INTERLEAVE-NEXT:    [[VP_STRIDED_LOAD29:%.*]] = call <vscale x 2 x i32> @llvm.experimental.vp.strided.load.nxv2i32.p0i32.i64(i32* [[TMP94]], i64 16, <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP29]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP95:%.*]] = getelementptr inbounds i32, i32* [[A:%.*]], i64 [[INDEX]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP96:%.*]] = bitcast i32* [[TMP95]] to <vscale x 2 x i32>*
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP_LOAD:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP96]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP97:%.*]] = sext i32 [[TMP8]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP98:%.*]] = getelementptr inbounds i32, i32* [[TMP95]], i64 [[TMP97]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP99:%.*]] = bitcast i32* [[TMP98]] to <vscale x 2 x i32>*
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP_LOAD30:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP99]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP100:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP101:%.*]] = sext i32 [[TMP100]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP102:%.*]] = getelementptr inbounds i32, i32* [[TMP95]], i64 [[TMP101]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP103:%.*]] = bitcast i32* [[TMP102]] to <vscale x 2 x i32>*
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP_LOAD31:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP103]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP104:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP105:%.*]] = add i32 [[TMP104]], [[TMP14]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP106:%.*]] = sext i32 [[TMP105]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP107:%.*]] = getelementptr inbounds i32, i32* [[TMP95]], i64 [[TMP106]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP108:%.*]] = bitcast i32* [[TMP107]] to <vscale x 2 x i32>*
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP_LOAD32:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP108]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP109:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP110:%.*]] = add i32 [[TMP109]], [[TMP14]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP111:%.*]] = add i32 [[TMP110]], [[TMP17]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP112:%.*]] = sext i32 [[TMP111]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP113:%.*]] = getelementptr inbounds i32, i32* [[TMP95]], i64 [[TMP112]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP114:%.*]] = bitcast i32* [[TMP113]] to <vscale x 2 x i32>*
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP_LOAD33:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP114]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP115:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP116:%.*]] = add i32 [[TMP115]], [[TMP14]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP117:%.*]] = add i32 [[TMP116]], [[TMP17]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP118:%.*]] = add i32 [[TMP117]], [[TMP20]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP119:%.*]] = sext i32 [[TMP118]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP120:%.*]] = getelementptr inbounds i32, i32* [[TMP95]], i64 [[TMP119]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP121:%.*]] = bitcast i32* [[TMP120]] to <vscale x 2 x i32>*
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP_LOAD34:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP121]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP122:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP123:%.*]] = add i32 [[TMP122]], [[TMP14]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP124:%.*]] = add i32 [[TMP123]], [[TMP17]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP125:%.*]] = add i32 [[TMP124]], [[TMP20]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP126:%.*]] = add i32 [[TMP125]], [[TMP23]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP127:%.*]] = sext i32 [[TMP126]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP128:%.*]] = getelementptr inbounds i32, i32* [[TMP95]], i64 [[TMP127]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP129:%.*]] = bitcast i32* [[TMP128]] to <vscale x 2 x i32>*
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP_LOAD35:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP129]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP26]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP130:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP131:%.*]] = add i32 [[TMP130]], [[TMP14]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP132:%.*]] = add i32 [[TMP131]], [[TMP17]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP133:%.*]] = add i32 [[TMP132]], [[TMP20]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP134:%.*]] = add i32 [[TMP133]], [[TMP23]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP135:%.*]] = add i32 [[TMP134]], [[TMP26]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP136:%.*]] = sext i32 [[TMP135]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP137:%.*]] = getelementptr inbounds i32, i32* [[TMP95]], i64 [[TMP136]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP138:%.*]] = bitcast i32* [[TMP137]] to <vscale x 2 x i32>*
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP_LOAD36:%.*]] = call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP138]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP29]])
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD]], <vscale x 2 x i32> [[VP_STRIDED_LOAD]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP37:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD30]], <vscale x 2 x i32> [[VP_STRIDED_LOAD11]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP38:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD31]], <vscale x 2 x i32> [[VP_STRIDED_LOAD14]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP39:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD32]], <vscale x 2 x i32> [[VP_STRIDED_LOAD17]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP40:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD33]], <vscale x 2 x i32> [[VP_STRIDED_LOAD20]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP41:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD34]], <vscale x 2 x i32> [[VP_STRIDED_LOAD23]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP42:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD35]], <vscale x 2 x i32> [[VP_STRIDED_LOAD26]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP26]])
; STRIDED-INTERLEAVE-NEXT:    [[VP_OP43:%.*]] = call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD36]], <vscale x 2 x i32> [[VP_STRIDED_LOAD29]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP29]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP139:%.*]] = bitcast i32* [[TMP95]] to <vscale x 2 x i32>*
; STRIDED-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP]], <vscale x 2 x i32>* [[TMP139]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP8]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP140:%.*]] = sext i32 [[TMP8]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP141:%.*]] = getelementptr inbounds i32, i32* [[TMP95]], i64 [[TMP140]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP142:%.*]] = bitcast i32* [[TMP141]] to <vscale x 2 x i32>*
; STRIDED-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP37]], <vscale x 2 x i32>* [[TMP142]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP143:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP144:%.*]] = sext i32 [[TMP143]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP145:%.*]] = getelementptr inbounds i32, i32* [[TMP95]], i64 [[TMP144]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP146:%.*]] = bitcast i32* [[TMP145]] to <vscale x 2 x i32>*
; STRIDED-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP38]], <vscale x 2 x i32>* [[TMP146]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP147:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP148:%.*]] = add i32 [[TMP147]], [[TMP14]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP149:%.*]] = sext i32 [[TMP148]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP150:%.*]] = getelementptr inbounds i32, i32* [[TMP95]], i64 [[TMP149]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP151:%.*]] = bitcast i32* [[TMP150]] to <vscale x 2 x i32>*
; STRIDED-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP39]], <vscale x 2 x i32>* [[TMP151]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP152:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP153:%.*]] = add i32 [[TMP152]], [[TMP14]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP154:%.*]] = add i32 [[TMP153]], [[TMP17]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP155:%.*]] = sext i32 [[TMP154]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP156:%.*]] = getelementptr inbounds i32, i32* [[TMP95]], i64 [[TMP155]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP157:%.*]] = bitcast i32* [[TMP156]] to <vscale x 2 x i32>*
; STRIDED-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP40]], <vscale x 2 x i32>* [[TMP157]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP158:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP159:%.*]] = add i32 [[TMP158]], [[TMP14]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP160:%.*]] = add i32 [[TMP159]], [[TMP17]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP161:%.*]] = add i32 [[TMP160]], [[TMP20]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP162:%.*]] = sext i32 [[TMP161]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP163:%.*]] = getelementptr inbounds i32, i32* [[TMP95]], i64 [[TMP162]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP164:%.*]] = bitcast i32* [[TMP163]] to <vscale x 2 x i32>*
; STRIDED-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP41]], <vscale x 2 x i32>* [[TMP164]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP165:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP166:%.*]] = add i32 [[TMP165]], [[TMP14]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP167:%.*]] = add i32 [[TMP166]], [[TMP17]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP168:%.*]] = add i32 [[TMP167]], [[TMP20]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP169:%.*]] = add i32 [[TMP168]], [[TMP23]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP170:%.*]] = sext i32 [[TMP169]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP171:%.*]] = getelementptr inbounds i32, i32* [[TMP95]], i64 [[TMP170]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP172:%.*]] = bitcast i32* [[TMP171]] to <vscale x 2 x i32>*
; STRIDED-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP42]], <vscale x 2 x i32>* [[TMP172]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP26]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP173:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP174:%.*]] = add i32 [[TMP173]], [[TMP14]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP175:%.*]] = add i32 [[TMP174]], [[TMP17]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP176:%.*]] = add i32 [[TMP175]], [[TMP20]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP177:%.*]] = add i32 [[TMP176]], [[TMP23]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP178:%.*]] = add i32 [[TMP177]], [[TMP26]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP179:%.*]] = sext i32 [[TMP178]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[TMP180:%.*]] = getelementptr inbounds i32, i32* [[TMP95]], i64 [[TMP179]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP181:%.*]] = bitcast i32* [[TMP180]] to <vscale x 2 x i32>*
; STRIDED-INTERLEAVE-NEXT:    call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP43]], <vscale x 2 x i32>* [[TMP181]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP29]])
; STRIDED-INTERLEAVE-NEXT:    [[TMP182:%.*]] = add i32 [[TMP8]], [[TMP11]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP183:%.*]] = add i32 [[TMP182]], [[TMP14]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP184:%.*]] = add i32 [[TMP183]], [[TMP17]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP185:%.*]] = add i32 [[TMP184]], [[TMP20]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP186:%.*]] = add i32 [[TMP185]], [[TMP23]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP187:%.*]] = add i32 [[TMP186]], [[TMP26]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP188:%.*]] = add i32 [[TMP187]], [[TMP29]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP189:%.*]] = zext i32 [[TMP188]] to i64
; STRIDED-INTERLEAVE-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP189]]
; STRIDED-INTERLEAVE-NEXT:    [[REASS_ADD54:%.*]] = shl <vscale x 2 x i64> [[DOTSPLAT]], shufflevector (<vscale x 2 x i64> insertelement (<vscale x 2 x i64> poison, i64 1, i32 0), <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer)
; STRIDED-INTERLEAVE-NEXT:    [[VEC_IND_NEXT]] = add <vscale x 2 x i64> [[STEP_ADD5]], [[REASS_ADD54]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP190:%.*]] = icmp eq i64 [[INDEX_NEXT]], 1024
; STRIDED-INTERLEAVE-NEXT:    br i1 [[TMP190]], label [[FOR_COND_CLEANUP:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; STRIDED-INTERLEAVE:       for.cond.cleanup:
; STRIDED-INTERLEAVE-NEXT:    ret void
; STRIDED-INTERLEAVE:       for.body:
; STRIDED-INTERLEAVE-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ 0, [[ENTRY:%.*]] ]
; STRIDED-INTERLEAVE-NEXT:    [[B_2:%.*]] = getelementptr inbounds [[STRUCT_FOO]], %struct.foo* [[B]], i64 [[INDVARS_IV]], i32 1
; STRIDED-INTERLEAVE-NEXT:    [[TMP191:%.*]] = load i32, i32* [[B_2]], align 4
; STRIDED-INTERLEAVE-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds i32, i32* [[A]], i64 [[INDVARS_IV]]
; STRIDED-INTERLEAVE-NEXT:    [[TMP192:%.*]] = load i32, i32* [[ARRAYIDX2]], align 4
; STRIDED-INTERLEAVE-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP192]], [[TMP191]]
; STRIDED-INTERLEAVE-NEXT:    store i32 [[ADD]], i32* [[ARRAYIDX2]], align 4
; STRIDED-INTERLEAVE-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; STRIDED-INTERLEAVE-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 1024
; STRIDED-INTERLEAVE-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
;
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void

for.body:                                         ; preds = %entry, %for.body
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %b.2 = getelementptr inbounds %struct.foo, %struct.foo* %B, i64 %indvars.iv, i32 1
  %0 = load i32, i32* %b.2, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %A, i64 %indvars.iv
  %1 = load i32, i32* %arrayidx2, align 4
  %add = add nsw i32 %1, %0
  store i32 %add, i32* %arrayidx2, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 1024
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}
