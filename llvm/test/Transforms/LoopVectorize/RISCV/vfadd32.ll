; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -mtriple riscv64 -S -loop-vectorize -mattr=+m,+a,+f,+d,+epi -target-abi=lp64d \
; RUN:   | FileCheck %s
; ModuleID = 'vecadd32.c'
source_filename = "vecadd32.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128"
target triple = "riscv64-unknown-linux-gnu"

; Function Attrs: nounwind
define dso_local void @vec_add(i32 signext %N, float* %c, float* %a, float* %b) #0 {
; CHECK-LABEL: @vec_add(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[C_ADDR:%.*]] = alloca float*, align 8
; CHECK-NEXT:    [[A_ADDR:%.*]] = alloca float*, align 8
; CHECK-NEXT:    [[B_ADDR:%.*]] = alloca float*, align 8
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[N:%.*]], i32* [[N_ADDR]], align 4, !tbaa !2
; CHECK-NEXT:    store float* [[C:%.*]], float** [[C_ADDR]], align 8, !tbaa !6
; CHECK-NEXT:    store float* [[A:%.*]], float** [[A_ADDR]], align 8, !tbaa !6
; CHECK-NEXT:    store float* [[B:%.*]], float** [[B_ADDR]], align 8, !tbaa !6
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast i32* [[I]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 4, i8* [[TMP0]]) #2
; CHECK-NEXT:    store i32 0, i32* [[I]], align 4, !tbaa !2
; CHECK-NEXT:    br label [[FOR_COND:%.*]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, i32* [[I]], align 4, !tbaa !2
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, i32* [[N_ADDR]], align 4, !tbaa !2
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[TMP3:%.*]] = load float*, float** [[A_ADDR]], align 8, !tbaa !6
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, i32* [[I]], align 4, !tbaa !2
; CHECK-NEXT:    [[IDXPROM:%.*]] = sext i32 [[TMP4]] to i64
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, float* [[TMP3]], i64 [[IDXPROM]]
; CHECK-NEXT:    [[TMP5:%.*]] = load float, float* [[ARRAYIDX]], align 4, !tbaa !8
; CHECK-NEXT:    [[TMP6:%.*]] = load float*, float** [[B_ADDR]], align 8, !tbaa !6
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, i32* [[I]], align 4, !tbaa !2
; CHECK-NEXT:    [[IDXPROM1:%.*]] = sext i32 [[TMP7]] to i64
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, float* [[TMP6]], i64 [[IDXPROM1]]
; CHECK-NEXT:    [[TMP8:%.*]] = load float, float* [[ARRAYIDX2]], align 4, !tbaa !8
; CHECK-NEXT:    [[ADD:%.*]] = fadd float [[TMP5]], [[TMP8]]
; CHECK-NEXT:    [[TMP9:%.*]] = load float*, float** [[C_ADDR]], align 8, !tbaa !6
; CHECK-NEXT:    [[TMP10:%.*]] = load i32, i32* [[I]], align 4, !tbaa !2
; CHECK-NEXT:    [[IDXPROM3:%.*]] = sext i32 [[TMP10]] to i64
; CHECK-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds float, float* [[TMP9]], i64 [[IDXPROM3]]
; CHECK-NEXT:    store float [[ADD]], float* [[ARRAYIDX4]], align 4, !tbaa !8
; CHECK-NEXT:    br label [[FOR_INC:%.*]]
; CHECK:       for.inc:
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, i32* [[I]], align 4, !tbaa !2
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP11]], 1
; CHECK-NEXT:    store i32 [[INC]], i32* [[I]], align 4, !tbaa !2
; CHECK-NEXT:    br label [[FOR_COND]]
; CHECK:       for.end:
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast i32* [[I]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 4, i8* [[TMP12]]) #2
; CHECK-NEXT:    ret void
;
entry:
  %N.addr = alloca i32, align 4
  %c.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  %i = alloca i32, align 4
  store i32 %N, i32* %N.addr, align 4, !tbaa !2
  store float* %c, float** %c.addr, align 8, !tbaa !6
  store float* %a, float** %a.addr, align 8, !tbaa !6
  store float* %b, float** %b.addr, align 8, !tbaa !6
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #2
  store i32 0, i32* %i, align 4, !tbaa !2
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !tbaa !2
  %2 = load i32, i32* %N.addr, align 4, !tbaa !2
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load float*, float** %a.addr, align 8, !tbaa !6
  %4 = load i32, i32* %i, align 4, !tbaa !2
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds float, float* %3, i64 %idxprom
  %5 = load float, float* %arrayidx, align 4, !tbaa !8
  %6 = load float*, float** %b.addr, align 8, !tbaa !6
  %7 = load i32, i32* %i, align 4, !tbaa !2
  %idxprom1 = sext i32 %7 to i64
  %arrayidx2 = getelementptr inbounds float, float* %6, i64 %idxprom1
  %8 = load float, float* %arrayidx2, align 4, !tbaa !8
  %add = fadd float %5, %8
  %9 = load float*, float** %c.addr, align 8, !tbaa !6
  %10 = load i32, i32* %i, align 4, !tbaa !2
  %idxprom3 = sext i32 %10 to i64
  %arrayidx4 = getelementptr inbounds float, float* %9, i64 %idxprom3
  store float %add, float* %arrayidx4, align 4, !tbaa !8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !tbaa !2
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4, !tbaa !2
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %12) #2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+a,+c,+d,+f,+m,-relax" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 9.0.0 (git@repo.hca.bsc.es:EPI/System-Software/llvm-mono.git 64b4a698b72f9c11abda7d34344de2c86826f96a)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !4, i64 0}
!8 = !{!9, !9, i64 0}
!9 = !{!"float", !4, i64 0}
