; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -mtriple riscv64 -mattr +m,+a,+f,+d,+experimental-v \
; RUN: -prefer-predicate-over-epilog -S -loop-vectorize \
; RUN: -debug-only=loop-vectorize -disable-output -print-after=loop-vectorize 2>&1 | FileCheck %s
; ModuleID = './simple-add.c'
source_filename = "./simple-add.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128-v128:128:128-v256:128:128-v512:128:128-v1024:128:128"
target triple = "riscv64-unknown-linux-gnu"

; CHECK-LABEL: simple_add
; CHECK:       N0 [label =
; CHECK-NEXT:    "for.body:\n" +
; CHECK-NEXT:      "WIDEN-INDUCTION %indvars.iv = phi 0, %indvars.iv.next\l" +
; CHECK-NEXT:      "CLONE %arrayidx = getelementptr %a, %indvars.iv\l" +
; CHECK-NEXT:      "EMIT vp<%1> = icmp ule ir<%indvars.iv> vp<%0>\l" +
; CHECK-NEXT:      "EMIT vp<%2> = GENERATE-EXPLICIT-VECTOR-LENGTH\l" +
; CHECK-NEXT:      "PREDICATED-WIDEN %0 = load %arrayidx, ir<%arrayidx>, ALL-ONES-MASK, vp<%2>\l" +
; CHECK-NEXT:      "CLONE %arrayidx2 = getelementptr %b, %indvars.iv\l" +
; CHECK-NEXT:      "PREDICATED-WIDEN %1 = load %arrayidx2, ir<%arrayidx2>, ALL-ONES-MASK, vp<%2>\l" +
; CHECK-NEXT:      "PREDICATED-WIDEN %add = add %1, %0, ALL-ONES-MASK, vp<%2>\l" +
; CHECK-NEXT:      "CLONE %arrayidx4 = getelementptr %c, %indvars.iv\l" +
; CHECK-NEXT:      "PREDICATED-WIDEN store %add, %arrayidx4, ir<%arrayidx4>, ALL-ONES-MASK, vp<%2>\l"
; CHECK-NEXT:  ]

; Function Attrs: nofree norecurse nounwind
define dso_local void @simple_add(i32 signext %N, i32* noalias nocapture %c, i32* noalias nocapture readonly %a, i32* noalias nocapture readonly %b) local_unnamed_addr {
entry:
  %cmp10 = icmp sgt i32 %N, 0
  br i1 %cmp10, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %b, i64 %indvars.iv
  %1 = load i32, i32* %arrayidx2, align 4
  %add = add nsw i32 %1, %0
  %arrayidx4 = getelementptr inbounds i32, i32* %c, i64 %indvars.iv
  store i32 %add, i32* %arrayidx4, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
