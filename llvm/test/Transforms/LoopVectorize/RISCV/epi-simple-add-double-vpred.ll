; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -O2 -vector-register-width-factor=8 -riscv-v-vector-bits-min=64 < %s -o - | FileCheck %s
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -O2 -riscv-v-vector-bits-min=64 < %s -o - | FileCheck %s --check-prefix=CHECK1
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -interleave-no-scalar-epilogue=true \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -O2 -riscv-v-vector-bits-min=64 < %s -o - | FileCheck %s --check-prefix=INTERLEAVE
; ModuleID = './simple-add-double.c'
source_filename = "./simple-add-double.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128-v128:128:128-v256:128:128-v512:128:128-v1024:128:128"
target triple = "riscv64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind
define dso_local void @simple_add(i32 signext %N, double* noalias nocapture %c, double* noalias nocapture readonly %a, double* noalias nocapture readonly %b) local_unnamed_addr {
; CHECK-LABEL: @simple_add(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP10:%.*]] = icmp sgt i32 [[N:%.*]], 2
; CHECK-NEXT:    br i1 [[CMP10]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK-NEXT:    [[TMP0:%.*]] = add nsw i64 [[WIDE_TRIP_COUNT]], -2
; CHECK-NEXT:    [[TMP1:%.*]] = sub nsw i64 1, [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    [[TMP2:%.*]] = tail call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP3:%.*]] = shl i64 [[TMP2]], 3
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ult i64 [[TMP1]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP4]], label [[FOR_BODY:%.*]], label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[OFFSET_IDX:%.*]] = add i64 [[INDEX]], 2
; CHECK-NEXT:    [[TMP5:%.*]] = sub i64 [[TMP0]], [[INDEX]]
; CHECK-NEXT:    [[TMP6:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP5]], i64 3, i64 3)
; CHECK-NEXT:    [[TMP7:%.*]] = trunc i64 [[TMP6]] to i32
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds double, double* [[A:%.*]], i64 [[OFFSET_IDX]]
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast double* [[TMP8]] to <vscale x 8 x double>*
; CHECK-NEXT:    [[VP_OP_LOAD:%.*]] = tail call <vscale x 8 x double> @llvm.vp.load.nxv8f64.p0nxv8f64(<vscale x 8 x double>* [[TMP9]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP7]])
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds double, double* [[B:%.*]], i64 [[OFFSET_IDX]]
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast double* [[TMP10]] to <vscale x 8 x double>*
; CHECK-NEXT:    [[VP_OP_LOAD3:%.*]] = tail call <vscale x 8 x double> @llvm.vp.load.nxv8f64.p0nxv8f64(<vscale x 8 x double>* [[TMP11]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP7]])
; CHECK-NEXT:    [[VP_OP:%.*]] = tail call <vscale x 8 x double> @llvm.vp.fadd.nxv8f64(<vscale x 8 x double> [[VP_OP_LOAD]], <vscale x 8 x double> [[VP_OP_LOAD3]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP7]])
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds double, double* [[C:%.*]], i64 [[OFFSET_IDX]]
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast double* [[TMP12]] to <vscale x 8 x double>*
; CHECK-NEXT:    tail call void @llvm.vp.store.nxv8f64.p0nxv8f64(<vscale x 8 x double> [[VP_OP]], <vscale x 8 x double>* [[TMP13]], <vscale x 8 x i1> shufflevector (<vscale x 8 x i1> insertelement (<vscale x 8 x i1> poison, i1 true, i32 0), <vscale x 8 x i1> poison, <vscale x 8 x i32> zeroinitializer), i32 [[TMP7]])
; CHECK-NEXT:    [[TMP14:%.*]] = and i64 [[TMP6]], 4294967295
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP14]]
; CHECK-NEXT:    [[TMP15:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[TMP0]]
; CHECK-NEXT:    br i1 [[TMP15]], label [[FOR_END]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ 2, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, double* [[A]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP16:%.*]] = load double, double* [[ARRAYIDX]], align 8
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds double, double* [[B]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP17:%.*]] = load double, double* [[ARRAYIDX2]], align 8
; CHECK-NEXT:    [[ADD:%.*]] = fadd double [[TMP16]], [[TMP17]]
; CHECK-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds double, double* [[C]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    store double [[ADD]], double* [[ARRAYIDX4]], align 8
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
; CHECK:       for.end:
; CHECK-NEXT:    ret void
;
; CHECK1-LABEL: @simple_add(
; CHECK1-NEXT:  entry:
; CHECK1-NEXT:    [[CMP10:%.*]] = icmp sgt i32 [[N:%.*]], 2
; CHECK1-NEXT:    br i1 [[CMP10]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; CHECK1:       for.body.preheader:
; CHECK1-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK1-NEXT:    [[TMP0:%.*]] = add nsw i64 [[WIDE_TRIP_COUNT]], -2
; CHECK1-NEXT:    [[TMP1:%.*]] = sub nsw i64 1, [[WIDE_TRIP_COUNT]]
; CHECK1-NEXT:    [[TMP2:%.*]] = tail call i64 @llvm.vscale.i64()
; CHECK1-NEXT:    [[TMP3:%.*]] = icmp ult i64 [[TMP1]], [[TMP2]]
; CHECK1-NEXT:    br i1 [[TMP3]], label [[FOR_BODY:%.*]], label [[VECTOR_BODY:%.*]]
; CHECK1:       vector.body:
; CHECK1-NEXT:    [[INDEX:%.*]] = phi i64 [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK1-NEXT:    [[OFFSET_IDX:%.*]] = add i64 [[INDEX]], 2
; CHECK1-NEXT:    [[TMP4:%.*]] = sub i64 [[TMP0]], [[INDEX]]
; CHECK1-NEXT:    [[TMP5:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP4]], i64 3, i64 0)
; CHECK1-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP5]] to i32
; CHECK1-NEXT:    [[TMP7:%.*]] = getelementptr inbounds double, double* [[A:%.*]], i64 [[OFFSET_IDX]]
; CHECK1-NEXT:    [[TMP8:%.*]] = bitcast double* [[TMP7]] to <vscale x 1 x double>*
; CHECK1-NEXT:    [[VP_OP_LOAD:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0nxv1f64(<vscale x 1 x double>* [[TMP8]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK1-NEXT:    [[TMP9:%.*]] = getelementptr inbounds double, double* [[B:%.*]], i64 [[OFFSET_IDX]]
; CHECK1-NEXT:    [[TMP10:%.*]] = bitcast double* [[TMP9]] to <vscale x 1 x double>*
; CHECK1-NEXT:    [[VP_OP_LOAD3:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0nxv1f64(<vscale x 1 x double>* [[TMP10]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK1-NEXT:    [[VP_OP:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD]], <vscale x 1 x double> [[VP_OP_LOAD3]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK1-NEXT:    [[TMP11:%.*]] = getelementptr inbounds double, double* [[C:%.*]], i64 [[OFFSET_IDX]]
; CHECK1-NEXT:    [[TMP12:%.*]] = bitcast double* [[TMP11]] to <vscale x 1 x double>*
; CHECK1-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0nxv1f64(<vscale x 1 x double> [[VP_OP]], <vscale x 1 x double>* [[TMP12]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP6]])
; CHECK1-NEXT:    [[TMP13:%.*]] = and i64 [[TMP5]], 4294967295
; CHECK1-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP13]]
; CHECK1-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[TMP0]]
; CHECK1-NEXT:    br i1 [[TMP14]], label [[FOR_END]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK1:       for.body:
; CHECK1-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ 2, [[FOR_BODY_PREHEADER]] ]
; CHECK1-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, double* [[A]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    [[TMP15:%.*]] = load double, double* [[ARRAYIDX]], align 8
; CHECK1-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds double, double* [[B]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    [[TMP16:%.*]] = load double, double* [[ARRAYIDX2]], align 8
; CHECK1-NEXT:    [[ADD:%.*]] = fadd double [[TMP15]], [[TMP16]]
; CHECK1-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds double, double* [[C]], i64 [[INDVARS_IV]]
; CHECK1-NEXT:    store double [[ADD]], double* [[ARRAYIDX4]], align 8
; CHECK1-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK1-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK1-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
; CHECK1:       for.end:
; CHECK1-NEXT:    ret void
;
; INTERLEAVE-LABEL: @simple_add(
; INTERLEAVE-NEXT:  entry:
; INTERLEAVE-NEXT:    [[CMP10:%.*]] = icmp sgt i32 [[N:%.*]], 2
; INTERLEAVE-NEXT:    br i1 [[CMP10]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; INTERLEAVE:       for.body.preheader:
; INTERLEAVE-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; INTERLEAVE-NEXT:    [[TMP0:%.*]] = add nsw i64 [[WIDE_TRIP_COUNT]], -2
; INTERLEAVE-NEXT:    [[TMP1:%.*]] = sub nsw i64 1, [[WIDE_TRIP_COUNT]]
; INTERLEAVE-NEXT:    [[TMP2:%.*]] = tail call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP3:%.*]] = shl i64 [[TMP2]], 3
; INTERLEAVE-NEXT:    [[TMP4:%.*]] = icmp ult i64 [[TMP1]], [[TMP3]]
; INTERLEAVE-NEXT:    br i1 [[TMP4]], label [[FOR_BODY:%.*]], label [[VECTOR_BODY_PREHEADER:%.*]]
; INTERLEAVE:       vector.body.preheader:
; INTERLEAVE-NEXT:    [[TMP5:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP6:%.*]] = sext i32 [[TMP5]] to i64
; INTERLEAVE-NEXT:    [[TMP7:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP8:%.*]] = shl i32 [[TMP7]], 1
; INTERLEAVE-NEXT:    [[TMP9:%.*]] = sext i32 [[TMP8]] to i64
; INTERLEAVE-NEXT:    [[TMP10:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP11:%.*]] = mul i32 [[TMP10]], 3
; INTERLEAVE-NEXT:    [[TMP12:%.*]] = sext i32 [[TMP11]] to i64
; INTERLEAVE-NEXT:    [[TMP13:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP14:%.*]] = shl i32 [[TMP13]], 2
; INTERLEAVE-NEXT:    [[TMP15:%.*]] = sext i32 [[TMP14]] to i64
; INTERLEAVE-NEXT:    [[TMP16:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP17:%.*]] = mul i32 [[TMP16]], 5
; INTERLEAVE-NEXT:    [[TMP18:%.*]] = sext i32 [[TMP17]] to i64
; INTERLEAVE-NEXT:    [[TMP19:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP20:%.*]] = mul i32 [[TMP19]], 6
; INTERLEAVE-NEXT:    [[TMP21:%.*]] = sext i32 [[TMP20]] to i64
; INTERLEAVE-NEXT:    [[TMP22:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP23:%.*]] = mul i32 [[TMP22]], 7
; INTERLEAVE-NEXT:    [[TMP24:%.*]] = sext i32 [[TMP23]] to i64
; INTERLEAVE-NEXT:    [[TMP25:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP26:%.*]] = sext i32 [[TMP25]] to i64
; INTERLEAVE-NEXT:    [[TMP27:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP28:%.*]] = shl i32 [[TMP27]], 1
; INTERLEAVE-NEXT:    [[TMP29:%.*]] = sext i32 [[TMP28]] to i64
; INTERLEAVE-NEXT:    [[TMP30:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP31:%.*]] = mul i32 [[TMP30]], 3
; INTERLEAVE-NEXT:    [[TMP32:%.*]] = sext i32 [[TMP31]] to i64
; INTERLEAVE-NEXT:    [[TMP33:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP34:%.*]] = shl i32 [[TMP33]], 2
; INTERLEAVE-NEXT:    [[TMP35:%.*]] = sext i32 [[TMP34]] to i64
; INTERLEAVE-NEXT:    [[TMP36:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP37:%.*]] = mul i32 [[TMP36]], 5
; INTERLEAVE-NEXT:    [[TMP38:%.*]] = sext i32 [[TMP37]] to i64
; INTERLEAVE-NEXT:    [[TMP39:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP40:%.*]] = mul i32 [[TMP39]], 6
; INTERLEAVE-NEXT:    [[TMP41:%.*]] = sext i32 [[TMP40]] to i64
; INTERLEAVE-NEXT:    [[TMP42:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP43:%.*]] = mul i32 [[TMP42]], 7
; INTERLEAVE-NEXT:    [[TMP44:%.*]] = sext i32 [[TMP43]] to i64
; INTERLEAVE-NEXT:    [[TMP45:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP46:%.*]] = sext i32 [[TMP45]] to i64
; INTERLEAVE-NEXT:    [[TMP47:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP48:%.*]] = shl i32 [[TMP47]], 1
; INTERLEAVE-NEXT:    [[TMP49:%.*]] = sext i32 [[TMP48]] to i64
; INTERLEAVE-NEXT:    [[TMP50:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP51:%.*]] = mul i32 [[TMP50]], 3
; INTERLEAVE-NEXT:    [[TMP52:%.*]] = sext i32 [[TMP51]] to i64
; INTERLEAVE-NEXT:    [[TMP53:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP54:%.*]] = shl i32 [[TMP53]], 2
; INTERLEAVE-NEXT:    [[TMP55:%.*]] = sext i32 [[TMP54]] to i64
; INTERLEAVE-NEXT:    [[TMP56:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP57:%.*]] = mul i32 [[TMP56]], 5
; INTERLEAVE-NEXT:    [[TMP58:%.*]] = sext i32 [[TMP57]] to i64
; INTERLEAVE-NEXT:    [[TMP59:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP60:%.*]] = mul i32 [[TMP59]], 6
; INTERLEAVE-NEXT:    [[TMP61:%.*]] = sext i32 [[TMP60]] to i64
; INTERLEAVE-NEXT:    [[TMP62:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP63:%.*]] = mul i32 [[TMP62]], 7
; INTERLEAVE-NEXT:    [[TMP64:%.*]] = sext i32 [[TMP63]] to i64
; INTERLEAVE-NEXT:    br label [[VECTOR_BODY:%.*]]
; INTERLEAVE:       vector.body:
; INTERLEAVE-NEXT:    [[INDEX:%.*]] = phi i64 [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ], [ 0, [[VECTOR_BODY_PREHEADER]] ]
; INTERLEAVE-NEXT:    [[OFFSET_IDX:%.*]] = add i64 [[INDEX]], 2
; INTERLEAVE-NEXT:    [[TMP65:%.*]] = sub i64 [[TMP0]], [[INDEX]]
; INTERLEAVE-NEXT:    [[TMP66:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP65]], i64 3, i64 0)
; INTERLEAVE-NEXT:    [[TMP67:%.*]] = trunc i64 [[TMP66]] to i32
; INTERLEAVE-NEXT:    [[TMP68:%.*]] = sub i64 [[TMP65]], [[TMP66]]
; INTERLEAVE-NEXT:    [[TMP69:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP68]], i64 3, i64 0)
; INTERLEAVE-NEXT:    [[TMP70:%.*]] = trunc i64 [[TMP69]] to i32
; INTERLEAVE-NEXT:    [[TMP71:%.*]] = sub i64 [[TMP68]], [[TMP69]]
; INTERLEAVE-NEXT:    [[TMP72:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP71]], i64 3, i64 0)
; INTERLEAVE-NEXT:    [[TMP73:%.*]] = trunc i64 [[TMP72]] to i32
; INTERLEAVE-NEXT:    [[TMP74:%.*]] = sub i64 [[TMP71]], [[TMP72]]
; INTERLEAVE-NEXT:    [[TMP75:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP74]], i64 3, i64 0)
; INTERLEAVE-NEXT:    [[TMP76:%.*]] = trunc i64 [[TMP75]] to i32
; INTERLEAVE-NEXT:    [[TMP77:%.*]] = sub i64 [[TMP74]], [[TMP75]]
; INTERLEAVE-NEXT:    [[TMP78:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP77]], i64 3, i64 0)
; INTERLEAVE-NEXT:    [[TMP79:%.*]] = trunc i64 [[TMP78]] to i32
; INTERLEAVE-NEXT:    [[TMP80:%.*]] = sub i64 [[TMP77]], [[TMP78]]
; INTERLEAVE-NEXT:    [[TMP81:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP80]], i64 3, i64 0)
; INTERLEAVE-NEXT:    [[TMP82:%.*]] = trunc i64 [[TMP81]] to i32
; INTERLEAVE-NEXT:    [[TMP83:%.*]] = sub i64 [[TMP80]], [[TMP81]]
; INTERLEAVE-NEXT:    [[TMP84:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP83]], i64 3, i64 0)
; INTERLEAVE-NEXT:    [[TMP85:%.*]] = trunc i64 [[TMP84]] to i32
; INTERLEAVE-NEXT:    [[TMP86:%.*]] = sub i64 [[TMP83]], [[TMP84]]
; INTERLEAVE-NEXT:    [[TMP87:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP86]], i64 3, i64 0)
; INTERLEAVE-NEXT:    [[TMP88:%.*]] = trunc i64 [[TMP87]] to i32
; INTERLEAVE-NEXT:    [[TMP89:%.*]] = getelementptr inbounds double, double* [[A:%.*]], i64 [[OFFSET_IDX]]
; INTERLEAVE-NEXT:    [[TMP90:%.*]] = bitcast double* [[TMP89]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0nxv1f64(<vscale x 1 x double>* [[TMP90]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP67]])
; INTERLEAVE-NEXT:    [[TMP91:%.*]] = getelementptr inbounds double, double* [[TMP89]], i64 [[TMP6]]
; INTERLEAVE-NEXT:    [[TMP92:%.*]] = bitcast double* [[TMP91]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD22:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0nxv1f64(<vscale x 1 x double>* nonnull [[TMP92]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP70]])
; INTERLEAVE-NEXT:    [[TMP93:%.*]] = getelementptr inbounds double, double* [[TMP89]], i64 [[TMP9]]
; INTERLEAVE-NEXT:    [[TMP94:%.*]] = bitcast double* [[TMP93]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD23:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0nxv1f64(<vscale x 1 x double>* [[TMP94]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP73]])
; INTERLEAVE-NEXT:    [[TMP95:%.*]] = getelementptr inbounds double, double* [[TMP89]], i64 [[TMP12]]
; INTERLEAVE-NEXT:    [[TMP96:%.*]] = bitcast double* [[TMP95]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD24:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0nxv1f64(<vscale x 1 x double>* [[TMP96]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP76]])
; INTERLEAVE-NEXT:    [[TMP97:%.*]] = getelementptr inbounds double, double* [[TMP89]], i64 [[TMP15]]
; INTERLEAVE-NEXT:    [[TMP98:%.*]] = bitcast double* [[TMP97]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD25:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0nxv1f64(<vscale x 1 x double>* [[TMP98]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP79]])
; INTERLEAVE-NEXT:    [[TMP99:%.*]] = getelementptr inbounds double, double* [[TMP89]], i64 [[TMP18]]
; INTERLEAVE-NEXT:    [[TMP100:%.*]] = bitcast double* [[TMP99]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD26:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0nxv1f64(<vscale x 1 x double>* [[TMP100]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP82]])
; INTERLEAVE-NEXT:    [[TMP101:%.*]] = getelementptr inbounds double, double* [[TMP89]], i64 [[TMP21]]
; INTERLEAVE-NEXT:    [[TMP102:%.*]] = bitcast double* [[TMP101]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD27:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0nxv1f64(<vscale x 1 x double>* [[TMP102]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP85]])
; INTERLEAVE-NEXT:    [[TMP103:%.*]] = getelementptr inbounds double, double* [[TMP89]], i64 [[TMP24]]
; INTERLEAVE-NEXT:    [[TMP104:%.*]] = bitcast double* [[TMP103]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD28:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0nxv1f64(<vscale x 1 x double>* [[TMP104]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP88]])
; INTERLEAVE-NEXT:    [[TMP105:%.*]] = getelementptr inbounds double, double* [[B:%.*]], i64 [[OFFSET_IDX]]
; INTERLEAVE-NEXT:    [[TMP106:%.*]] = bitcast double* [[TMP105]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD29:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0nxv1f64(<vscale x 1 x double>* [[TMP106]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP67]])
; INTERLEAVE-NEXT:    [[TMP107:%.*]] = getelementptr inbounds double, double* [[TMP105]], i64 [[TMP26]]
; INTERLEAVE-NEXT:    [[TMP108:%.*]] = bitcast double* [[TMP107]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD30:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0nxv1f64(<vscale x 1 x double>* nonnull [[TMP108]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP70]])
; INTERLEAVE-NEXT:    [[TMP109:%.*]] = getelementptr inbounds double, double* [[TMP105]], i64 [[TMP29]]
; INTERLEAVE-NEXT:    [[TMP110:%.*]] = bitcast double* [[TMP109]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD31:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0nxv1f64(<vscale x 1 x double>* [[TMP110]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP73]])
; INTERLEAVE-NEXT:    [[TMP111:%.*]] = getelementptr inbounds double, double* [[TMP105]], i64 [[TMP32]]
; INTERLEAVE-NEXT:    [[TMP112:%.*]] = bitcast double* [[TMP111]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD32:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0nxv1f64(<vscale x 1 x double>* [[TMP112]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP76]])
; INTERLEAVE-NEXT:    [[TMP113:%.*]] = getelementptr inbounds double, double* [[TMP105]], i64 [[TMP35]]
; INTERLEAVE-NEXT:    [[TMP114:%.*]] = bitcast double* [[TMP113]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD33:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0nxv1f64(<vscale x 1 x double>* [[TMP114]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP79]])
; INTERLEAVE-NEXT:    [[TMP115:%.*]] = getelementptr inbounds double, double* [[TMP105]], i64 [[TMP38]]
; INTERLEAVE-NEXT:    [[TMP116:%.*]] = bitcast double* [[TMP115]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD34:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0nxv1f64(<vscale x 1 x double>* [[TMP116]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP82]])
; INTERLEAVE-NEXT:    [[TMP117:%.*]] = getelementptr inbounds double, double* [[TMP105]], i64 [[TMP41]]
; INTERLEAVE-NEXT:    [[TMP118:%.*]] = bitcast double* [[TMP117]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD35:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0nxv1f64(<vscale x 1 x double>* [[TMP118]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP85]])
; INTERLEAVE-NEXT:    [[TMP119:%.*]] = getelementptr inbounds double, double* [[TMP105]], i64 [[TMP44]]
; INTERLEAVE-NEXT:    [[TMP120:%.*]] = bitcast double* [[TMP119]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD36:%.*]] = tail call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0nxv1f64(<vscale x 1 x double>* [[TMP120]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP88]])
; INTERLEAVE-NEXT:    [[VP_OP:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD]], <vscale x 1 x double> [[VP_OP_LOAD29]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP67]])
; INTERLEAVE-NEXT:    [[VP_OP37:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD22]], <vscale x 1 x double> [[VP_OP_LOAD30]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP70]])
; INTERLEAVE-NEXT:    [[VP_OP38:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD23]], <vscale x 1 x double> [[VP_OP_LOAD31]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP73]])
; INTERLEAVE-NEXT:    [[VP_OP39:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD24]], <vscale x 1 x double> [[VP_OP_LOAD32]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP76]])
; INTERLEAVE-NEXT:    [[VP_OP40:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD25]], <vscale x 1 x double> [[VP_OP_LOAD33]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP79]])
; INTERLEAVE-NEXT:    [[VP_OP41:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD26]], <vscale x 1 x double> [[VP_OP_LOAD34]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP82]])
; INTERLEAVE-NEXT:    [[VP_OP42:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD27]], <vscale x 1 x double> [[VP_OP_LOAD35]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP85]])
; INTERLEAVE-NEXT:    [[VP_OP43:%.*]] = tail call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_OP_LOAD28]], <vscale x 1 x double> [[VP_OP_LOAD36]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP88]])
; INTERLEAVE-NEXT:    [[TMP121:%.*]] = getelementptr inbounds double, double* [[C:%.*]], i64 [[OFFSET_IDX]]
; INTERLEAVE-NEXT:    [[TMP122:%.*]] = bitcast double* [[TMP121]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0nxv1f64(<vscale x 1 x double> [[VP_OP]], <vscale x 1 x double>* [[TMP122]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP67]])
; INTERLEAVE-NEXT:    [[TMP123:%.*]] = getelementptr inbounds double, double* [[TMP121]], i64 [[TMP46]]
; INTERLEAVE-NEXT:    [[TMP124:%.*]] = bitcast double* [[TMP123]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0nxv1f64(<vscale x 1 x double> [[VP_OP37]], <vscale x 1 x double>* nonnull [[TMP124]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP70]])
; INTERLEAVE-NEXT:    [[TMP125:%.*]] = getelementptr inbounds double, double* [[TMP121]], i64 [[TMP49]]
; INTERLEAVE-NEXT:    [[TMP126:%.*]] = bitcast double* [[TMP125]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0nxv1f64(<vscale x 1 x double> [[VP_OP38]], <vscale x 1 x double>* [[TMP126]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP73]])
; INTERLEAVE-NEXT:    [[TMP127:%.*]] = getelementptr inbounds double, double* [[TMP121]], i64 [[TMP52]]
; INTERLEAVE-NEXT:    [[TMP128:%.*]] = bitcast double* [[TMP127]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0nxv1f64(<vscale x 1 x double> [[VP_OP39]], <vscale x 1 x double>* [[TMP128]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP76]])
; INTERLEAVE-NEXT:    [[TMP129:%.*]] = getelementptr inbounds double, double* [[TMP121]], i64 [[TMP55]]
; INTERLEAVE-NEXT:    [[TMP130:%.*]] = bitcast double* [[TMP129]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0nxv1f64(<vscale x 1 x double> [[VP_OP40]], <vscale x 1 x double>* [[TMP130]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP79]])
; INTERLEAVE-NEXT:    [[TMP131:%.*]] = getelementptr inbounds double, double* [[TMP121]], i64 [[TMP58]]
; INTERLEAVE-NEXT:    [[TMP132:%.*]] = bitcast double* [[TMP131]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0nxv1f64(<vscale x 1 x double> [[VP_OP41]], <vscale x 1 x double>* [[TMP132]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP82]])
; INTERLEAVE-NEXT:    [[TMP133:%.*]] = getelementptr inbounds double, double* [[TMP121]], i64 [[TMP61]]
; INTERLEAVE-NEXT:    [[TMP134:%.*]] = bitcast double* [[TMP133]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0nxv1f64(<vscale x 1 x double> [[VP_OP42]], <vscale x 1 x double>* [[TMP134]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP85]])
; INTERLEAVE-NEXT:    [[TMP135:%.*]] = getelementptr inbounds double, double* [[TMP121]], i64 [[TMP64]]
; INTERLEAVE-NEXT:    [[TMP136:%.*]] = bitcast double* [[TMP135]] to <vscale x 1 x double>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv1f64.p0nxv1f64(<vscale x 1 x double> [[VP_OP43]], <vscale x 1 x double>* [[TMP136]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i32 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP88]])
; INTERLEAVE-NEXT:    [[TMP137:%.*]] = add i64 [[TMP66]], [[TMP69]]
; INTERLEAVE-NEXT:    [[TMP138:%.*]] = add i64 [[TMP137]], [[TMP72]]
; INTERLEAVE-NEXT:    [[TMP139:%.*]] = add i64 [[TMP138]], [[TMP75]]
; INTERLEAVE-NEXT:    [[TMP140:%.*]] = add i64 [[TMP139]], [[TMP78]]
; INTERLEAVE-NEXT:    [[TMP141:%.*]] = add i64 [[TMP140]], [[TMP81]]
; INTERLEAVE-NEXT:    [[TMP142:%.*]] = add i64 [[TMP141]], [[TMP84]]
; INTERLEAVE-NEXT:    [[TMP143:%.*]] = add i64 [[TMP142]], [[TMP87]]
; INTERLEAVE-NEXT:    [[TMP144:%.*]] = and i64 [[TMP143]], 4294967295
; INTERLEAVE-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP144]]
; INTERLEAVE-NEXT:    [[TMP145:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[TMP0]]
; INTERLEAVE-NEXT:    br i1 [[TMP145]], label [[FOR_END]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; INTERLEAVE:       for.body:
; INTERLEAVE-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ 2, [[FOR_BODY_PREHEADER]] ]
; INTERLEAVE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, double* [[A]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    [[TMP146:%.*]] = load double, double* [[ARRAYIDX]], align 8
; INTERLEAVE-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds double, double* [[B]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    [[TMP147:%.*]] = load double, double* [[ARRAYIDX2]], align 8
; INTERLEAVE-NEXT:    [[ADD:%.*]] = fadd double [[TMP146]], [[TMP147]]
; INTERLEAVE-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds double, double* [[C]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    store double [[ADD]], double* [[ARRAYIDX4]], align 8
; INTERLEAVE-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; INTERLEAVE-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; INTERLEAVE-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
; INTERLEAVE:       for.end:
; INTERLEAVE-NEXT:    ret void
;
entry:
  %cmp10 = icmp sgt i32 %N, 2
  br i1 %cmp10, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ 2, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds double, double* %a, i64 %indvars.iv
  %0 = load double, double* %arrayidx, align 8
  %arrayidx2 = getelementptr inbounds double, double* %b, i64 %indvars.iv
  %1 = load double, double* %arrayidx2, align 8
  %add = fadd double %0, %1
  %arrayidx4 = getelementptr inbounds double, double* %c, i64 %indvars.iv
  store double %add, double* %arrayidx4, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
