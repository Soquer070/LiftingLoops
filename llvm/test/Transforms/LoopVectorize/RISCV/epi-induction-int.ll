; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -riscv-v-vector-bits-min=64 \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -O3 < %s -o - \
; RUN:    | FileCheck %s
; RUN: opt -mtriple riscv64 -mattr +m,+a,+f,+d,+zepi -riscv-v-vector-bits-min=64 -interleave-no-scalar-epilogue=true \
; RUN:    -scalable-vectorization=only -prefer-predicate-over-epilogue=predicate-dont-vectorize -S -O3 < %s -o - \
; RUN:    | FileCheck %s --check-prefix=INTERLEAVE
; ModuleID = 'induction-int.c'
source_filename = "induction-int.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128-v128:128:128-v256:128:128-v512:128:128-v1024:128:128"
target triple = "riscv64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind
define dso_local void @induction_float(i32 signext %N, i32* noalias nocapture %a, i32 signext %x) local_unnamed_addr {
; CHECK-LABEL: @induction_float(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP6:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP6]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK-NEXT:    [[TMP0:%.*]] = xor i64 [[WIDE_TRIP_COUNT]], -1
; CHECK-NEXT:    [[TMP1:%.*]] = tail call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP2:%.*]] = shl i64 [[TMP1]], 1
; CHECK-NEXT:    [[TMP3:%.*]] = icmp ugt i64 [[TMP2]], [[TMP0]]
; CHECK-NEXT:    br i1 [[TMP3]], label [[FOR_BODY:%.*]], label [[VECTOR_PH:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    [[TMP4:%.*]] = tail call <vscale x 2 x i32> @llvm.experimental.stepvector.nxv2i32()
; CHECK-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X:%.*]], i64 0
; CHECK-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <vscale x 2 x i32> [[DOTSPLATINSERT]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP5:%.*]] = mul <vscale x 2 x i32> [[TMP4]], [[DOTSPLAT]]
; CHECK-NEXT:    [[TMP6:%.*]] = tail call i32 @llvm.vscale.i32()
; CHECK-NEXT:    [[TMP7:%.*]] = shl i32 [[TMP6]], 1
; CHECK-NEXT:    [[TMP8:%.*]] = mul i32 [[TMP7]], [[X]]
; CHECK-NEXT:    [[DOTSPLATINSERT2:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[TMP8]], i64 0
; CHECK-NEXT:    [[DOTSPLAT3:%.*]] = shufflevector <vscale x 2 x i32> [[DOTSPLATINSERT2]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT6:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT7:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT6]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[VEC_IND:%.*]] = phi <vscale x 2 x i32> [ [[TMP5]], [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP9:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[INDEX]]
; CHECK-NEXT:    [[TMP10:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP9]], i64 2, i64 0)
; CHECK-NEXT:    [[TMP11:%.*]] = trunc i64 [[TMP10]] to i32
; CHECK-NEXT:    [[VP_OP:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VEC_IND]], <vscale x 2 x i32> [[BROADCAST_SPLAT7]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds i32, i32* [[A:%.*]], i64 [[INDEX]]
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast i32* [[TMP12]] to <vscale x 2 x i32>*
; CHECK-NEXT:    [[VP_OP_LOAD:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP13]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; CHECK-NEXT:    [[VP_OP8:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD]], <vscale x 2 x i32> [[VP_OP]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast i32* [[TMP12]] to <vscale x 2 x i32>*
; CHECK-NEXT:    tail call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP8]], <vscale x 2 x i32>* [[TMP14]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; CHECK-NEXT:    [[TMP15:%.*]] = and i64 [[TMP10]], 4294967295
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP15]]
; CHECK-NEXT:    [[VEC_IND_NEXT]] = add <vscale x 2 x i32> [[VEC_IND]], [[DOTSPLAT3]]
; CHECK-NEXT:    [[TMP16:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[TMP16]], label [[FOR_END]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[S_08:%.*]] = phi i32 [ [[ADD:%.*]], [[FOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[ADD]] = add nsw i32 [[S_08]], [[X]]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, i32* [[A]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP17:%.*]] = load i32, i32* [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[TMP17]], [[ADD]]
; CHECK-NEXT:    store i32 [[MUL]], i32* [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
; CHECK:       for.end:
; CHECK-NEXT:    ret void
;
; INTERLEAVE-LABEL: @induction_float(
; INTERLEAVE-NEXT:  entry:
; INTERLEAVE-NEXT:    [[CMP6:%.*]] = icmp sgt i32 [[N:%.*]], 0
; INTERLEAVE-NEXT:    br i1 [[CMP6]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; INTERLEAVE:       for.body.preheader:
; INTERLEAVE-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; INTERLEAVE-NEXT:    [[TMP0:%.*]] = xor i64 [[WIDE_TRIP_COUNT]], -1
; INTERLEAVE-NEXT:    [[TMP1:%.*]] = tail call i64 @llvm.vscale.i64()
; INTERLEAVE-NEXT:    [[TMP2:%.*]] = shl i64 [[TMP1]], 4
; INTERLEAVE-NEXT:    [[TMP3:%.*]] = icmp ugt i64 [[TMP2]], [[TMP0]]
; INTERLEAVE-NEXT:    br i1 [[TMP3]], label [[FOR_BODY:%.*]], label [[VECTOR_PH:%.*]]
; INTERLEAVE:       vector.ph:
; INTERLEAVE-NEXT:    [[TMP4:%.*]] = tail call <vscale x 2 x i32> @llvm.experimental.stepvector.nxv2i32()
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X:%.*]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <vscale x 2 x i32> [[DOTSPLATINSERT]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[TMP5:%.*]] = mul <vscale x 2 x i32> [[TMP4]], [[DOTSPLAT]]
; INTERLEAVE-NEXT:    [[TMP6:%.*]] = tail call i32 @llvm.vscale.i32()
; INTERLEAVE-NEXT:    [[TMP7:%.*]] = shl i32 [[TMP6]], 1
; INTERLEAVE-NEXT:    [[TMP8:%.*]] = mul i32 [[TMP7]], [[X]]
; INTERLEAVE-NEXT:    [[DOTSPLATINSERT2:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[TMP8]], i64 0
; INTERLEAVE-NEXT:    [[DOTSPLAT3:%.*]] = shufflevector <vscale x 2 x i32> [[DOTSPLATINSERT2]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT34:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT35:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT34]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT36:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT37:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT36]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT39:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT40:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT39]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT42:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT43:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT42]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT45:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT46:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT45]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT48:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT49:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT48]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT51:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT52:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT51]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    [[BROADCAST_SPLATINSERT54:%.*]] = insertelement <vscale x 2 x i32> poison, i32 [[X]], i64 0
; INTERLEAVE-NEXT:    [[BROADCAST_SPLAT55:%.*]] = shufflevector <vscale x 2 x i32> [[BROADCAST_SPLATINSERT54]], <vscale x 2 x i32> poison, <vscale x 2 x i32> zeroinitializer
; INTERLEAVE-NEXT:    br label [[VECTOR_BODY:%.*]]
; INTERLEAVE:       vector.body:
; INTERLEAVE-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; INTERLEAVE-NEXT:    [[VEC_IND:%.*]] = phi <vscale x 2 x i32> [ [[TMP5]], [[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], [[VECTOR_BODY]] ]
; INTERLEAVE-NEXT:    [[STEP_ADD:%.*]] = add <vscale x 2 x i32> [[VEC_IND]], [[DOTSPLAT3]]
; INTERLEAVE-NEXT:    [[STEP_ADD4:%.*]] = add <vscale x 2 x i32> [[STEP_ADD]], [[DOTSPLAT3]]
; INTERLEAVE-NEXT:    [[STEP_ADD5:%.*]] = add <vscale x 2 x i32> [[STEP_ADD4]], [[DOTSPLAT3]]
; INTERLEAVE-NEXT:    [[STEP_ADD6:%.*]] = add <vscale x 2 x i32> [[STEP_ADD5]], [[DOTSPLAT3]]
; INTERLEAVE-NEXT:    [[STEP_ADD7:%.*]] = add <vscale x 2 x i32> [[STEP_ADD6]], [[DOTSPLAT3]]
; INTERLEAVE-NEXT:    [[STEP_ADD8:%.*]] = add <vscale x 2 x i32> [[STEP_ADD7]], [[DOTSPLAT3]]
; INTERLEAVE-NEXT:    [[STEP_ADD9:%.*]] = add <vscale x 2 x i32> [[STEP_ADD8]], [[DOTSPLAT3]]
; INTERLEAVE-NEXT:    [[TMP9:%.*]] = sub i64 [[WIDE_TRIP_COUNT]], [[INDEX]]
; INTERLEAVE-NEXT:    [[TMP10:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP9]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP11:%.*]] = trunc i64 [[TMP10]] to i32
; INTERLEAVE-NEXT:    [[TMP12:%.*]] = sub i64 [[TMP9]], [[TMP10]]
; INTERLEAVE-NEXT:    [[TMP13:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP12]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP14:%.*]] = trunc i64 [[TMP13]] to i32
; INTERLEAVE-NEXT:    [[TMP15:%.*]] = sub i64 [[TMP12]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP16:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP15]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP17:%.*]] = trunc i64 [[TMP16]] to i32
; INTERLEAVE-NEXT:    [[TMP18:%.*]] = sub i64 [[TMP15]], [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP19:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP18]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP20:%.*]] = trunc i64 [[TMP19]] to i32
; INTERLEAVE-NEXT:    [[TMP21:%.*]] = sub i64 [[TMP18]], [[TMP19]]
; INTERLEAVE-NEXT:    [[TMP22:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP21]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP23:%.*]] = trunc i64 [[TMP22]] to i32
; INTERLEAVE-NEXT:    [[TMP24:%.*]] = sub i64 [[TMP21]], [[TMP22]]
; INTERLEAVE-NEXT:    [[TMP25:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP24]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP26:%.*]] = trunc i64 [[TMP25]] to i32
; INTERLEAVE-NEXT:    [[TMP27:%.*]] = sub i64 [[TMP24]], [[TMP25]]
; INTERLEAVE-NEXT:    [[TMP28:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP27]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP29:%.*]] = trunc i64 [[TMP28]] to i32
; INTERLEAVE-NEXT:    [[TMP30:%.*]] = sub i64 [[TMP27]], [[TMP28]]
; INTERLEAVE-NEXT:    [[TMP31:%.*]] = tail call i64 @llvm.epi.vsetvl(i64 [[TMP30]], i64 2, i64 0)
; INTERLEAVE-NEXT:    [[TMP32:%.*]] = trunc i64 [[TMP31]] to i32
; INTERLEAVE-NEXT:    [[VP_OP:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[VEC_IND]], <vscale x 2 x i32> [[BROADCAST_SPLAT35]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; INTERLEAVE-NEXT:    [[VP_OP38:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[STEP_ADD]], <vscale x 2 x i32> [[BROADCAST_SPLAT37]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; INTERLEAVE-NEXT:    [[VP_OP41:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[STEP_ADD4]], <vscale x 2 x i32> [[BROADCAST_SPLAT40]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; INTERLEAVE-NEXT:    [[VP_OP44:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[STEP_ADD5]], <vscale x 2 x i32> [[BROADCAST_SPLAT43]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[VP_OP47:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[STEP_ADD6]], <vscale x 2 x i32> [[BROADCAST_SPLAT46]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; INTERLEAVE-NEXT:    [[VP_OP50:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[STEP_ADD7]], <vscale x 2 x i32> [[BROADCAST_SPLAT49]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP26]])
; INTERLEAVE-NEXT:    [[VP_OP53:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[STEP_ADD8]], <vscale x 2 x i32> [[BROADCAST_SPLAT52]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP29]])
; INTERLEAVE-NEXT:    [[VP_OP56:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.add.nxv2i32(<vscale x 2 x i32> [[STEP_ADD9]], <vscale x 2 x i32> [[BROADCAST_SPLAT55]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP32]])
; INTERLEAVE-NEXT:    [[TMP33:%.*]] = getelementptr inbounds i32, i32* [[A:%.*]], i64 [[INDEX]]
; INTERLEAVE-NEXT:    [[TMP34:%.*]] = bitcast i32* [[TMP33]] to <vscale x 2 x i32>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP34]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; INTERLEAVE-NEXT:    [[SEXT:%.*]] = shl i64 [[TMP10]], 32
; INTERLEAVE-NEXT:    [[TMP35:%.*]] = ashr exact i64 [[SEXT]], 32
; INTERLEAVE-NEXT:    [[TMP36:%.*]] = getelementptr inbounds i32, i32* [[TMP33]], i64 [[TMP35]]
; INTERLEAVE-NEXT:    [[TMP37:%.*]] = bitcast i32* [[TMP36]] to <vscale x 2 x i32>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD57:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP37]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; INTERLEAVE-NEXT:    [[TMP38:%.*]] = add i64 [[TMP10]], [[TMP13]]
; INTERLEAVE-NEXT:    [[SEXT72:%.*]] = shl i64 [[TMP38]], 32
; INTERLEAVE-NEXT:    [[TMP39:%.*]] = ashr exact i64 [[SEXT72]], 32
; INTERLEAVE-NEXT:    [[TMP40:%.*]] = getelementptr inbounds i32, i32* [[TMP33]], i64 [[TMP39]]
; INTERLEAVE-NEXT:    [[TMP41:%.*]] = bitcast i32* [[TMP40]] to <vscale x 2 x i32>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD58:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP41]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; INTERLEAVE-NEXT:    [[TMP42:%.*]] = add i64 [[TMP10]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP43:%.*]] = add i64 [[TMP42]], [[TMP16]]
; INTERLEAVE-NEXT:    [[SEXT73:%.*]] = shl i64 [[TMP43]], 32
; INTERLEAVE-NEXT:    [[TMP44:%.*]] = ashr exact i64 [[SEXT73]], 32
; INTERLEAVE-NEXT:    [[TMP45:%.*]] = getelementptr inbounds i32, i32* [[TMP33]], i64 [[TMP44]]
; INTERLEAVE-NEXT:    [[TMP46:%.*]] = bitcast i32* [[TMP45]] to <vscale x 2 x i32>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD59:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP46]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[TMP47:%.*]] = add i64 [[TMP10]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP48:%.*]] = add i64 [[TMP47]], [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP49:%.*]] = add i64 [[TMP48]], [[TMP19]]
; INTERLEAVE-NEXT:    [[SEXT74:%.*]] = shl i64 [[TMP49]], 32
; INTERLEAVE-NEXT:    [[TMP50:%.*]] = ashr exact i64 [[SEXT74]], 32
; INTERLEAVE-NEXT:    [[TMP51:%.*]] = getelementptr inbounds i32, i32* [[TMP33]], i64 [[TMP50]]
; INTERLEAVE-NEXT:    [[TMP52:%.*]] = bitcast i32* [[TMP51]] to <vscale x 2 x i32>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD60:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP52]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; INTERLEAVE-NEXT:    [[TMP53:%.*]] = add i64 [[TMP10]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP54:%.*]] = add i64 [[TMP53]], [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP55:%.*]] = add i64 [[TMP54]], [[TMP19]]
; INTERLEAVE-NEXT:    [[TMP56:%.*]] = add i64 [[TMP55]], [[TMP22]]
; INTERLEAVE-NEXT:    [[SEXT75:%.*]] = shl i64 [[TMP56]], 32
; INTERLEAVE-NEXT:    [[TMP57:%.*]] = ashr exact i64 [[SEXT75]], 32
; INTERLEAVE-NEXT:    [[TMP58:%.*]] = getelementptr inbounds i32, i32* [[TMP33]], i64 [[TMP57]]
; INTERLEAVE-NEXT:    [[TMP59:%.*]] = bitcast i32* [[TMP58]] to <vscale x 2 x i32>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD61:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP59]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP26]])
; INTERLEAVE-NEXT:    [[TMP60:%.*]] = add i64 [[TMP10]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP61:%.*]] = add i64 [[TMP60]], [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP62:%.*]] = add i64 [[TMP61]], [[TMP19]]
; INTERLEAVE-NEXT:    [[TMP63:%.*]] = add i64 [[TMP62]], [[TMP22]]
; INTERLEAVE-NEXT:    [[TMP64:%.*]] = add i64 [[TMP63]], [[TMP25]]
; INTERLEAVE-NEXT:    [[SEXT76:%.*]] = shl i64 [[TMP64]], 32
; INTERLEAVE-NEXT:    [[TMP65:%.*]] = ashr exact i64 [[SEXT76]], 32
; INTERLEAVE-NEXT:    [[TMP66:%.*]] = getelementptr inbounds i32, i32* [[TMP33]], i64 [[TMP65]]
; INTERLEAVE-NEXT:    [[TMP67:%.*]] = bitcast i32* [[TMP66]] to <vscale x 2 x i32>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD62:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP67]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP29]])
; INTERLEAVE-NEXT:    [[TMP68:%.*]] = add i64 [[TMP10]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP69:%.*]] = add i64 [[TMP68]], [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP70:%.*]] = add i64 [[TMP69]], [[TMP19]]
; INTERLEAVE-NEXT:    [[TMP71:%.*]] = add i64 [[TMP70]], [[TMP22]]
; INTERLEAVE-NEXT:    [[TMP72:%.*]] = add i64 [[TMP71]], [[TMP25]]
; INTERLEAVE-NEXT:    [[TMP73:%.*]] = add i64 [[TMP72]], [[TMP28]]
; INTERLEAVE-NEXT:    [[SEXT77:%.*]] = shl i64 [[TMP73]], 32
; INTERLEAVE-NEXT:    [[TMP74:%.*]] = ashr exact i64 [[SEXT77]], 32
; INTERLEAVE-NEXT:    [[TMP75:%.*]] = getelementptr inbounds i32, i32* [[TMP33]], i64 [[TMP74]]
; INTERLEAVE-NEXT:    [[TMP76:%.*]] = bitcast i32* [[TMP75]] to <vscale x 2 x i32>*
; INTERLEAVE-NEXT:    [[VP_OP_LOAD63:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.load.nxv2i32.p0nxv2i32(<vscale x 2 x i32>* [[TMP76]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP32]])
; INTERLEAVE-NEXT:    [[VP_OP64:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD]], <vscale x 2 x i32> [[VP_OP]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; INTERLEAVE-NEXT:    [[VP_OP65:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD57]], <vscale x 2 x i32> [[VP_OP38]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; INTERLEAVE-NEXT:    [[VP_OP66:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD58]], <vscale x 2 x i32> [[VP_OP41]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; INTERLEAVE-NEXT:    [[VP_OP67:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD59]], <vscale x 2 x i32> [[VP_OP44]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[VP_OP68:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD60]], <vscale x 2 x i32> [[VP_OP47]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; INTERLEAVE-NEXT:    [[VP_OP69:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD61]], <vscale x 2 x i32> [[VP_OP50]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP26]])
; INTERLEAVE-NEXT:    [[VP_OP70:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD62]], <vscale x 2 x i32> [[VP_OP53]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP29]])
; INTERLEAVE-NEXT:    [[VP_OP71:%.*]] = tail call <vscale x 2 x i32> @llvm.vp.mul.nxv2i32(<vscale x 2 x i32> [[VP_OP_LOAD63]], <vscale x 2 x i32> [[VP_OP56]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP32]])
; INTERLEAVE-NEXT:    [[TMP77:%.*]] = bitcast i32* [[TMP33]] to <vscale x 2 x i32>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP64]], <vscale x 2 x i32>* [[TMP77]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP11]])
; INTERLEAVE-NEXT:    [[SEXT78:%.*]] = shl i64 [[TMP10]], 32
; INTERLEAVE-NEXT:    [[TMP78:%.*]] = ashr exact i64 [[SEXT78]], 32
; INTERLEAVE-NEXT:    [[TMP79:%.*]] = getelementptr inbounds i32, i32* [[TMP33]], i64 [[TMP78]]
; INTERLEAVE-NEXT:    [[TMP80:%.*]] = bitcast i32* [[TMP79]] to <vscale x 2 x i32>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP65]], <vscale x 2 x i32>* [[TMP80]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP14]])
; INTERLEAVE-NEXT:    [[TMP81:%.*]] = add i64 [[TMP10]], [[TMP13]]
; INTERLEAVE-NEXT:    [[SEXT79:%.*]] = shl i64 [[TMP81]], 32
; INTERLEAVE-NEXT:    [[TMP82:%.*]] = ashr exact i64 [[SEXT79]], 32
; INTERLEAVE-NEXT:    [[TMP83:%.*]] = getelementptr inbounds i32, i32* [[TMP33]], i64 [[TMP82]]
; INTERLEAVE-NEXT:    [[TMP84:%.*]] = bitcast i32* [[TMP83]] to <vscale x 2 x i32>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP66]], <vscale x 2 x i32>* [[TMP84]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP17]])
; INTERLEAVE-NEXT:    [[TMP85:%.*]] = add i64 [[TMP10]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP86:%.*]] = add i64 [[TMP85]], [[TMP16]]
; INTERLEAVE-NEXT:    [[SEXT80:%.*]] = shl i64 [[TMP86]], 32
; INTERLEAVE-NEXT:    [[TMP87:%.*]] = ashr exact i64 [[SEXT80]], 32
; INTERLEAVE-NEXT:    [[TMP88:%.*]] = getelementptr inbounds i32, i32* [[TMP33]], i64 [[TMP87]]
; INTERLEAVE-NEXT:    [[TMP89:%.*]] = bitcast i32* [[TMP88]] to <vscale x 2 x i32>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP67]], <vscale x 2 x i32>* [[TMP89]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP20]])
; INTERLEAVE-NEXT:    [[TMP90:%.*]] = add i64 [[TMP10]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP91:%.*]] = add i64 [[TMP90]], [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP92:%.*]] = add i64 [[TMP91]], [[TMP19]]
; INTERLEAVE-NEXT:    [[SEXT81:%.*]] = shl i64 [[TMP92]], 32
; INTERLEAVE-NEXT:    [[TMP93:%.*]] = ashr exact i64 [[SEXT81]], 32
; INTERLEAVE-NEXT:    [[TMP94:%.*]] = getelementptr inbounds i32, i32* [[TMP33]], i64 [[TMP93]]
; INTERLEAVE-NEXT:    [[TMP95:%.*]] = bitcast i32* [[TMP94]] to <vscale x 2 x i32>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP68]], <vscale x 2 x i32>* [[TMP95]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP23]])
; INTERLEAVE-NEXT:    [[TMP96:%.*]] = add i64 [[TMP10]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP97:%.*]] = add i64 [[TMP96]], [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP98:%.*]] = add i64 [[TMP97]], [[TMP19]]
; INTERLEAVE-NEXT:    [[TMP99:%.*]] = add i64 [[TMP98]], [[TMP22]]
; INTERLEAVE-NEXT:    [[SEXT82:%.*]] = shl i64 [[TMP99]], 32
; INTERLEAVE-NEXT:    [[TMP100:%.*]] = ashr exact i64 [[SEXT82]], 32
; INTERLEAVE-NEXT:    [[TMP101:%.*]] = getelementptr inbounds i32, i32* [[TMP33]], i64 [[TMP100]]
; INTERLEAVE-NEXT:    [[TMP102:%.*]] = bitcast i32* [[TMP101]] to <vscale x 2 x i32>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP69]], <vscale x 2 x i32>* [[TMP102]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP26]])
; INTERLEAVE-NEXT:    [[TMP103:%.*]] = add i64 [[TMP10]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP104:%.*]] = add i64 [[TMP103]], [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP105:%.*]] = add i64 [[TMP104]], [[TMP19]]
; INTERLEAVE-NEXT:    [[TMP106:%.*]] = add i64 [[TMP105]], [[TMP22]]
; INTERLEAVE-NEXT:    [[TMP107:%.*]] = add i64 [[TMP106]], [[TMP25]]
; INTERLEAVE-NEXT:    [[SEXT83:%.*]] = shl i64 [[TMP107]], 32
; INTERLEAVE-NEXT:    [[TMP108:%.*]] = ashr exact i64 [[SEXT83]], 32
; INTERLEAVE-NEXT:    [[TMP109:%.*]] = getelementptr inbounds i32, i32* [[TMP33]], i64 [[TMP108]]
; INTERLEAVE-NEXT:    [[TMP110:%.*]] = bitcast i32* [[TMP109]] to <vscale x 2 x i32>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP70]], <vscale x 2 x i32>* [[TMP110]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP29]])
; INTERLEAVE-NEXT:    [[TMP111:%.*]] = add i64 [[TMP10]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP112:%.*]] = add i64 [[TMP111]], [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP113:%.*]] = add i64 [[TMP112]], [[TMP19]]
; INTERLEAVE-NEXT:    [[TMP114:%.*]] = add i64 [[TMP113]], [[TMP22]]
; INTERLEAVE-NEXT:    [[TMP115:%.*]] = add i64 [[TMP114]], [[TMP25]]
; INTERLEAVE-NEXT:    [[TMP116:%.*]] = add i64 [[TMP115]], [[TMP28]]
; INTERLEAVE-NEXT:    [[SEXT84:%.*]] = shl i64 [[TMP116]], 32
; INTERLEAVE-NEXT:    [[TMP117:%.*]] = ashr exact i64 [[SEXT84]], 32
; INTERLEAVE-NEXT:    [[TMP118:%.*]] = getelementptr inbounds i32, i32* [[TMP33]], i64 [[TMP117]]
; INTERLEAVE-NEXT:    [[TMP119:%.*]] = bitcast i32* [[TMP118]] to <vscale x 2 x i32>*
; INTERLEAVE-NEXT:    tail call void @llvm.vp.store.nxv2i32.p0nxv2i32(<vscale x 2 x i32> [[VP_OP71]], <vscale x 2 x i32>* [[TMP119]], <vscale x 2 x i1> shufflevector (<vscale x 2 x i1> insertelement (<vscale x 2 x i1> poison, i1 true, i32 0), <vscale x 2 x i1> poison, <vscale x 2 x i32> zeroinitializer), i32 [[TMP32]])
; INTERLEAVE-NEXT:    [[TMP120:%.*]] = add i64 [[TMP10]], [[TMP13]]
; INTERLEAVE-NEXT:    [[TMP121:%.*]] = add i64 [[TMP120]], [[TMP16]]
; INTERLEAVE-NEXT:    [[TMP122:%.*]] = add i64 [[TMP121]], [[TMP19]]
; INTERLEAVE-NEXT:    [[TMP123:%.*]] = add i64 [[TMP122]], [[TMP22]]
; INTERLEAVE-NEXT:    [[TMP124:%.*]] = add i64 [[TMP123]], [[TMP25]]
; INTERLEAVE-NEXT:    [[TMP125:%.*]] = add i64 [[TMP124]], [[TMP28]]
; INTERLEAVE-NEXT:    [[TMP126:%.*]] = add i64 [[TMP125]], [[TMP31]]
; INTERLEAVE-NEXT:    [[TMP127:%.*]] = and i64 [[TMP126]], 4294967295
; INTERLEAVE-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP127]]
; INTERLEAVE-NEXT:    [[VEC_IND_NEXT]] = add <vscale x 2 x i32> [[STEP_ADD9]], [[DOTSPLAT3]]
; INTERLEAVE-NEXT:    [[TMP128:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[WIDE_TRIP_COUNT]]
; INTERLEAVE-NEXT:    br i1 [[TMP128]], label [[FOR_END]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; INTERLEAVE:       for.body:
; INTERLEAVE-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; INTERLEAVE-NEXT:    [[S_08:%.*]] = phi i32 [ [[ADD:%.*]], [[FOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; INTERLEAVE-NEXT:    [[ADD]] = add nsw i32 [[S_08]], [[X]]
; INTERLEAVE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, i32* [[A]], i64 [[INDVARS_IV]]
; INTERLEAVE-NEXT:    [[TMP129:%.*]] = load i32, i32* [[ARRAYIDX]], align 4
; INTERLEAVE-NEXT:    [[MUL:%.*]] = mul nsw i32 [[TMP129]], [[ADD]]
; INTERLEAVE-NEXT:    store i32 [[MUL]], i32* [[ARRAYIDX]], align 4
; INTERLEAVE-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; INTERLEAVE-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; INTERLEAVE-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END]], label [[FOR_BODY]], !llvm.loop [[LOOP2:![0-9]+]]
; INTERLEAVE:       for.end:
; INTERLEAVE-NEXT:    ret void
;
entry:
  %cmp6 = icmp sgt i32 %N, 0
  br i1 %cmp6, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %s.08 = phi i32 [ 0, %for.body.preheader ], [ %add, %for.body ]
  %add = add nsw i32 %s.08, %x
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 4
  %mul = mul nsw i32 %0, %add
  store i32 %mul, i32* %arrayidx, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
